∏€
YC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Sliding Puzzle\Program.cs
	Exception 	
?	 

	exception 
= 
null 
; 
const 
string 
menu 
= 
$str 
; 
string 
info 
= 
$str .
;. /
string 
youWon 
= 
$str .
;. /
try 
{ 
while   
(   
true   
)   
{!! 
Menu"" 
:"" 
Console## 	
.##	 

Clear##
 
(## 
)## 
;## 
Console$$ 	
.$$	 

Write$$
 
($$ 
menu$$ 
)$$ 
;$$ 
int%% 
[%% 
,%% 
]%% 
?%% 	
board%%
 
=%% 
null%% 
;%% 
var&& 
(&& 
row&& 

,&&
 
column&& 
)&& 
=&& 
(&& 
$num&& 
,&& 
$num&& 
)&& 
;&& 
while'' 
('' 	
board''	 
is'' 
null'' 
)'' 
{(( 
Console)) 

.))
 
CursorVisible)) 
=)) 
false))  
;))  !
switch** 	
(**
 
Console** 
.** 
ReadKey** 
(** 
true** 
)**  
.**  !
Key**! $
)**$ %
{++ 
case,, 

ConsoleKey,,	 
.,, 
D1,, 
or,, 

ConsoleKey,, $
.,,$ %
NumPad1,,% ,
:,,, -
board,,. 3
=,,4 5
new,,6 9
int,,: =
[,,= >
$num,,> ?
,,,? @
$num,,A B
],,B C
;,,C D
break,,E J
;,,J K
case-- 

ConsoleKey--	 
.-- 
D2-- 
or-- 

ConsoleKey-- $
.--$ %
NumPad2--% ,
:--, -
board--. 3
=--4 5
new--6 9
int--: =
[--= >
$num--> ?
,--? @
$num--A B
]--B C
;--C D
break--E J
;--J K
case.. 

ConsoleKey..	 
... 
D3.. 
or.. 

ConsoleKey.. $
...$ %
NumPad3..% ,
:.., -
board... 3
=..4 5
new..6 9
int..: =
[..= >
$num..> ?
,..? @
$num..A B
]..B C
;..C D
break..E J
;..J K
case// 

ConsoleKey//	 
.// 
Escape// 
:// 
return// "
;//" #
}00 
}11 

Initialize22 
(22 
board22 
)22 
;22 
while33 
(33 	
IsSolved33	 
(33 
board33 
)33 
)33 
{44 

Initialize55 
(55 
board55 
)55 
;55 
}66 
Console77 	
.77	 

Clear77
 
(77 
)77 
;77 
while88 
(88 	
!88	 

IsSolved88
 
(88 
board88 
)88 
)88 
{99 
Render:: 	
(::	 

board::
 
):: 
;:: 
Console;; 

.;;
 
Write;; 
(;; 
info;; 
);; 
;;; 
var<< 
space<< 
=<< 
FindFlatLength<< 
(<< 
board<< #
)<<# $
;<<$ %
Console== 

.==
 
CursorVisible== 
=== 
false==  
;==  !
switch>> 	
(>>
 
Console>> 
.>> 
ReadKey>> 
(>> 
true>> 
)>>  
.>>  !
Key>>! $
)>>$ %
{?? 
case@@ 

ConsoleKey@@	 
.@@ 
A@@ 
or@@ 

ConsoleKey@@ #
.@@# $
	LeftArrow@@$ -
:@@- .
ifAA 
(AA 	
spaceAA	 
.AA 
ColumnAA 
<AA 
boardAA 
.AA 
	GetLengthAA '
(AA' (
$numAA( )
)AA) *
-AA+ ,
$numAA- .
)AA. /
{BB 
(CC 
boardCC 
[CC 
spaceCC 
.CC 
RowCC 
,CC 
spaceCC 
.CC 
ColumnCC $
]CC$ %
,CC% &
boardCC' ,
[CC, -
spaceCC- 2
.CC2 3
RowCC3 6
,CC6 7
spaceCC8 =
.CC= >
ColumnCC> D
+CCE F
$numCCG H
]CCH I
)CCI J
=CCK L
(CCM N
boardCCN S
[CCS T
spaceCCT Y
.CCY Z
RowCCZ ]
,CC] ^
spaceCC_ d
.CCd e
ColumnCCe k
+CCl m
$numCCn o
]CCo p
,CCp q
boardCCr w
[CCw x
spaceCCx }
.CC} ~
Row	CC~ Å
,
CCÅ Ç
space
CCÉ à
.
CCà â
Column
CCâ è
]
CCè ê
)
CCê ë
;
CCë í
}DD 
breakEE 

;EE
 
caseFF 

ConsoleKeyFF	 
.FF 
DFF 
orFF 

ConsoleKeyFF #
.FF# $

RightArrowFF$ .
:FF. /
ifGG 
(GG 	
spaceGG	 
.GG 
ColumnGG 
>GG 
$numGG 
)GG 
{HH 
(II 
boardII 
[II 
spaceII 
.II 
RowII 
,II 
spaceII 
.II 
ColumnII $
]II$ %
,II% &
boardII' ,
[II, -
spaceII- 2
.II2 3
RowII3 6
,II6 7
spaceII8 =
.II= >
ColumnII> D
-IIE F
$numIIG H
]IIH I
)III J
=IIK L
(IIM N
boardIIN S
[IIS T
spaceIIT Y
.IIY Z
RowIIZ ]
,II] ^
spaceII_ d
.IId e
ColumnIIe k
-IIl m
$numIIn o
]IIo p
,IIp q
boardIIr w
[IIw x
spaceIIx }
.II} ~
Row	II~ Å
,
IIÅ Ç
space
IIÉ à
.
IIà â
Column
IIâ è
]
IIè ê
)
IIê ë
;
IIë í
}JJ 
breakKK 

;KK
 
caseLL 

ConsoleKeyLL	 
.LL 
WLL 
orLL 

ConsoleKeyLL #
.LL# $
UpArrowLL$ +
:LL+ ,
ifMM 
(MM 	
spaceMM	 
.MM 
RowMM 
<MM 
boardMM 
.MM 
	GetLengthMM $
(MM$ %
$numMM% &
)MM& '
-MM( )
$numMM* +
)MM+ ,
{NN 
(OO 
boardOO 
[OO 
spaceOO 
.OO 
RowOO 
,OO 
spaceOO 
.OO 
ColumnOO $
]OO$ %
,OO% &
boardOO' ,
[OO, -
spaceOO- 2
.OO2 3
RowOO3 6
+OO7 8
$numOO9 :
,OO: ;
spaceOO< A
.OOA B
ColumnOOB H
]OOH I
)OOI J
=OOK L
(OOM N
boardOON S
[OOS T
spaceOOT Y
.OOY Z
RowOOZ ]
+OO^ _
$numOO` a
,OOa b
spaceOOc h
.OOh i
ColumnOOi o
]OOo p
,OOp q
boardOOr w
[OOw x
spaceOOx }
.OO} ~
Row	OO~ Å
,
OOÅ Ç
space
OOÉ à
.
OOà â
Column
OOâ è
]
OOè ê
)
OOê ë
;
OOë í
}PP 
breakQQ 

;QQ
 
caseRR 

ConsoleKeyRR	 
.RR 
SRR 
orRR 

ConsoleKeyRR #
.RR# $
	DownArrowRR$ -
:RR- .
ifSS 
(SS 	
spaceSS	 
.SS 
RowSS 
>SS 
$numSS 
)SS 
{TT 
(UU 
boardUU 
[UU 
spaceUU 
.UU 
RowUU 
,UU 
spaceUU 
.UU 
ColumnUU $
]UU$ %
,UU% &
boardUU' ,
[UU, -
spaceUU- 2
.UU2 3
RowUU3 6
-UU7 8
$numUU9 :
,UU: ;
spaceUU< A
.UUA B
ColumnUUB H
]UUH I
)UUI J
=UUK L
(UUM N
boardUUN S
[UUS T
spaceUUT Y
.UUY Z
RowUUZ ]
-UU^ _
$numUU` a
,UUa b
spaceUUc h
.UUh i
ColumnUUi o
]UUo p
,UUp q
boardUUr w
[UUw x
spaceUUx }
.UU} ~
Row	UU~ Å
,
UUÅ Ç
space
UUÉ à
.
UUà â
Column
UUâ è
]
UUè ê
)
UUê ë
;
UUë í
}VV 
breakWW 

;WW
 
caseXX 

ConsoleKeyXX	 
.XX 
EscapeXX 
:XX 
gotoYY 	
MenuYY
 
;YY 
}ZZ 
}[[ 
Render\\ 
(\\ 	
board\\	 
)\\ 
;\\ 
Console]] 	
.]]	 

Write]]
 
(]] 
youWon]] 
)]] 
;]] 
GetEnterOrEscape^^ 
:^^ 
Console__ 	
.__	 

CursorVisible__
 
=__ 
false__ 
;__  
switch`` 
(``	 

Console``
 
.`` 
ReadKey`` 
(`` 
true`` 
)`` 
.``  
Key``  #
)``# $
{aa 
casebb 

ConsoleKeybb 
.bb 
Enterbb 
orbb 

ConsoleKeybb &
.bb& '
Escapebb' -
:bb- .
breakbb/ 4
;bb4 5
defaultcc 

:cc
 
gotocc 
GetEnterOrEscapecc !
;cc! "
}dd 
}ee 
}ff 
catchgg 
(gg 
	Exceptiongg 
egg 
)gg 
{hh 
	exceptionii 

=ii 
eii 
;ii 
throwjj 
;jj 
}kk 
finallyll 
{mm 
Consolenn 
.nn 	
CursorVisiblenn	 
=nn 
truenn 
;nn 
Consoleoo 
.oo 	

ResetColoroo	 
(oo 
)oo 
;oo 
Consolepp 
.pp 	
Clearpp	 
(pp 
)pp 
;pp 
Consoleqq 
.qq 	
	WriteLineqq	 
(qq 
	exceptionqq 
?qq 
.qq 
ToStringqq &
(qq& '
)qq' (
??qq) +
$strqq, H
)qqH I
;qqI J
}rr 
statictt 
voidtt 
Rendertt 
(tt 
inttt 
[tt 
,tt 
]tt 
boardtt 
)tt  
{uu 
intvv 
spacevv 

=vv 
boardvv 
.vv 

FlatLengthvv 
(vv 
)vv 
;vv  
Consoleww 
.ww 	
SetCursorPositionww	 
(ww 
$numww 
,ww 
$numww 
)ww  
;ww  !
Consolexx 
.xx 	
	WriteLinexx	 
(xx 
)xx 
;xx 
Consoleyy 
.yy 	
	WriteLineyy	 
(yy 
$stryy %
)yy% &
;yy& '
Consolezz 
.zz 	
	WriteLinezz	 
(zz 
)zz 
;zz 
int{{ 
	tileWidth{{ 
={{ 
board{{ 
.{{ 

FlatLength{{ !
({{! "
){{" #
.{{# $
ToString{{$ ,
({{, -
){{- .
.{{. /
Length{{/ 5
;{{5 6
Console|| 
.|| 	
	WriteLine||	 
(|| 
$"|| 
$str|| 
{|| 
new|| 
string|| #
(||# $
$char||$ '
,||' (
board||) .
.||. /
	GetLength||/ 8
(||8 9
$num||9 :
)||: ;
*||< =
(||> ?
	tileWidth||? H
+||I J
$num||K L
)||L M
+||N O
$num||P Q
)||Q R
}||R S
$str||S T
"||T U
)||U V
;||V W
for}} 
(}} 
int}} 	
r}}
 
=}} 
$num}} 
;}} 
r}} 
<}} 
board}} 
.}} 
	GetLength}} $
(}}$ %
$num}}% &
)}}& '
;}}' (
r}}) *
++}}* ,
)}}, -
{~~ 
Console 	
.	 

Write
 
( 
$str 
) 
; 
for
ÄÄ 
(
ÄÄ 
int
ÄÄ 

c
ÄÄ 
=
ÄÄ 
$num
ÄÄ 
;
ÄÄ 
c
ÄÄ 
<
ÄÄ 
board
ÄÄ 
.
ÄÄ 
	GetLength
ÄÄ %
(
ÄÄ% &
$num
ÄÄ& '
)
ÄÄ' (
;
ÄÄ( )
c
ÄÄ* +
++
ÄÄ+ -
)
ÄÄ- .
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
board
ÇÇ 
[
ÇÇ 
r
ÇÇ 
,
ÇÇ 
c
ÇÇ 
]
ÇÇ 
==
ÇÇ 
space
ÇÇ 
)
ÇÇ 
{
ÉÉ 
Console
ÑÑ 
.
ÑÑ 
Write
ÑÑ 
(
ÑÑ 
new
ÑÑ 
string
ÑÑ 
(
ÑÑ 
$char
ÑÑ  
,
ÑÑ  !
	tileWidth
ÑÑ" +
)
ÑÑ+ ,
)
ÑÑ, -
;
ÑÑ- .
}
ÖÖ 
else
ÜÜ 
{
áá 
string
àà 

value
àà 
=
àà 
board
àà 
[
àà 
r
àà 
,
àà 
c
àà 
]
àà 
.
àà 
ToString
àà '
(
àà' (
CultureInfo
àà( 3
.
àà3 4
InvariantCulture
àà4 D
)
ààD E
;
ààE F
if
ââ 
(
ââ 
value
ââ 
.
ââ 
Length
ââ 
<
ââ 
$num
ââ 
&&
ââ 
board
ââ !
.
ââ! "

FlatLength
ââ" ,
(
ââ, -
)
ââ- .
>
ââ/ 0
$num
ââ1 2
)
ââ2 3
{
ää 
Console
ãã 
.
ãã 
Write
ãã 
(
ãã 
$char
ãã 
)
ãã 
;
ãã 
}
åå 
Console
çç 
.
çç 
Write
çç 
(
çç 
value
çç 
)
çç 
;
çç 
}
éé 
Console
èè 

.
èè
 
Write
èè 
(
èè 
$char
èè 
)
èè 
;
èè 
}
êê 
Console
ëë 	
.
ëë	 

	WriteLine
ëë
 
(
ëë 
$char
ëë 
)
ëë 
;
ëë 
}
íí 
Console
ìì 
.
ìì 	
	WriteLine
ìì	 
(
ìì 
$"
ìì 
$str
ìì 
{
ìì 
new
ìì 
string
ìì #
(
ìì# $
$char
ìì$ '
,
ìì' (
board
ìì) .
.
ìì. /
	GetLength
ìì/ 8
(
ìì8 9
$num
ìì9 :
)
ìì: ;
*
ìì< =
(
ìì> ?
	tileWidth
ìì? H
+
ììI J
$num
ììK L
)
ììL M
+
ììN O
$num
ììP Q
)
ììQ R
}
ììR S
$str
ììS T
"
ììT U
)
ììU V
;
ììV W
}îî 
staticññ 
void
ññ 

Initialize
ññ 
(
ññ 
int
ññ 
[
ññ 
,
ññ 
]
ññ 
board
ññ #
)
ññ# $
{óó 
for
òò 
(
òò 
int
òò 	
i
òò
 
=
òò 
$num
òò 
,
òò 
k
òò 
=
òò 
$num
òò 
;
òò 
i
òò 
<
òò 
board
òò !
.
òò! "

FlatLength
òò" ,
(
òò, -
)
òò- .
;
òò. /
i
òò0 1
++
òò1 3
)
òò3 4
{
ôô 
board
öö 
.
öö 
FlatSet
öö 
(
öö 
i
öö 
,
öö 
k
öö 
++
öö 
)
öö 
;
öö 
}
õõ 
Shuffle
úú 
(
úú 	
$num
úú	 

,
úú
 
board
úú 
.
úú 

FlatLength
úú 
(
úú 
)
úú 
-
úú  
$num
úú! "
,
úú" #
i
úú$ %
=>
úú& (
board
úú) .
.
úú. /
FlatGet
úú/ 6
(
úú6 7
i
úú7 8
)
úú8 9
,
úú9 :
(
úú; <
i
úú< =
,
úú= >
v
úú? @
)
úú@ A
=>
úúB D
board
úúE J
.
úúJ K
FlatSet
úúK R
(
úúR S
i
úúS T
,
úúT U
v
úúV W
)
úúW X
)
úúX Y
;
úúY Z
if
ùù 
(
ùù 
!
ùù 

IsSolvable
ùù 
(
ùù 
board
ùù 
)
ùù 
)
ùù 
{
ûû 
if
üü 
(
üü 
board
üü 
[
üü 
$num
üü 
,
üü 
$num
üü 
]
üü 
!=
üü 
board
üü 
.
üü 

FlatLength
üü %
(
üü% &
)
üü& '
&&
üü( *
board
üü+ 0
[
üü0 1
$num
üü1 2
,
üü2 3
$num
üü4 5
]
üü5 6
!=
üü7 9
board
üü: ?
.
üü? @

FlatLength
üü@ J
(
üüJ K
)
üüK L
)
üüL M
{
†† 
(
°° 
board
°° 	
[
°°	 

$num
°°
 
,
°° 
$num
°° 
]
°° 
,
°° 
board
°° 
[
°° 
$num
°° 
,
°° 
$num
°° 
]
°° 
)
°° 
=
°° 
(
°°  !
board
°°! &
[
°°& '
$num
°°' (
,
°°( )
$num
°°* +
]
°°+ ,
,
°°, -
board
°°. 3
[
°°3 4
$num
°°4 5
,
°°5 6
$num
°°7 8
]
°°8 9
)
°°9 :
;
°°: ;
}
¢¢ 
else
££ 
{
§§ 
(
•• 
board
•• 	
[
••	 

$num
••
 
,
•• 
$num
•• 
]
•• 
,
•• 
board
•• 
[
•• 
$num
•• 
,
•• 
$num
•• 
]
•• 
)
•• 
=
•• 
(
••  !
board
••! &
[
••& '
$num
••' (
,
••( )
$num
••* +
]
••+ ,
,
••, -
board
••. 3
[
••3 4
$num
••4 5
,
••5 6
$num
••7 8
]
••8 9
)
••9 :
;
••: ;
}
¶¶ 
}
ßß 
}®® 
static™™ 
bool
™™ 

IsSolvable
™™ 
(
™™ 
int
™™ 
[
™™ 
,
™™ 
]
™™ 
board
™™ #
)
™™# $
=>
™™% '
board
´´ 
.
´´ 
	GetLength
´´ 
(
´´ 
$num
´´ 
)
´´ 
%
´´ 
$num
´´ 
is
´´ 
$num
´´ 
?
¨¨ 

Inversions
¨¨ 
(
¨¨ 
board
¨¨ 
)
¨¨ 
%
¨¨ 
$num
¨¨ 
is
¨¨ 
$num
¨¨ 
:
≠≠ 
(
≠≠ 

Inversions
≠≠ 
(
≠≠ 
board
≠≠ 
)
≠≠ 
+
≠≠ 
board
≠≠ 
.
≠≠ 
	GetLength
≠≠ (
(
≠≠( )
$num
≠≠) *
)
≠≠* +
-
≠≠, -
(
≠≠. /
FindFlatLength
≠≠/ =
(
≠≠= >
board
≠≠> C
)
≠≠C D
.
≠≠D E
Row
≠≠E H
+
≠≠I J
$num
≠≠K L
)
≠≠L M
)
≠≠M N
%
≠≠O P
$num
≠≠Q R
is
≠≠S U
$num
≠≠V W
;
≠≠W X
staticØØ 
(
ØØ 
int
ØØ 
Row
ØØ 
,
ØØ 
int
ØØ 
Column
ØØ 
)
ØØ 
FindFlatLength
ØØ +
(
ØØ+ ,
int
ØØ, /
[
ØØ/ 0
,
ØØ0 1
]
ØØ1 2
board
ØØ3 8
)
ØØ8 9
{∞∞ 
for
±± 
(
±± 
int
±± 	
r
±±
 
=
±± 
$num
±± 
;
±± 
r
±± 
<
±± 
board
±± 
.
±± 
	GetLength
±± $
(
±±$ %
$num
±±% &
)
±±& '
;
±±' (
r
±±) *
++
±±* ,
)
±±, -
{
≤≤ 
for
≥≥ 
(
≥≥ 
int
≥≥ 

c
≥≥ 
=
≥≥ 
$num
≥≥ 
;
≥≥ 
c
≥≥ 
<
≥≥ 
board
≥≥ 
.
≥≥ 
	GetLength
≥≥ %
(
≥≥% &
$num
≥≥& '
)
≥≥' (
;
≥≥( )
c
≥≥* +
++
≥≥+ -
)
≥≥- .
{
¥¥ 
if
µµ 
(
µµ 
board
µµ 
[
µµ 
r
µµ 
,
µµ 
c
µµ 
]
µµ 
==
µµ 
board
µµ 
.
µµ 

FlatLength
µµ &
(
µµ& '
)
µµ' (
)
µµ( )
{
∂∂ 
return
∑∑ 

(
∑∑ 
r
∑∑ 
,
∑∑ 
c
∑∑ 
)
∑∑ 
;
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 
throw
ªª 
new
ªª 

	Exception
ªª 
(
ªª 
$str
ªª H
)
ªªH I
;
ªªI J
}ºº 
staticææ 
bool
ææ 
IsSolved
ææ 
(
ææ 
int
ææ 
[
ææ 
,
ææ 
]
ææ 
board
ææ !
)
ææ! "
{øø 
for
¿¿ 
(
¿¿ 
int
¿¿ 	
i
¿¿
 
=
¿¿ 
$num
¿¿ 
;
¿¿ 
i
¿¿ 
<
¿¿ 
board
¿¿ 
.
¿¿ 

FlatLength
¿¿ %
(
¿¿% &
)
¿¿& '
;
¿¿' (
i
¿¿) *
++
¿¿* ,
)
¿¿, -
{
¡¡ 
for
¬¬ 
(
¬¬ 
int
¬¬ 

j
¬¬ 
=
¬¬ 
i
¬¬ 
+
¬¬ 
$num
¬¬ 
;
¬¬ 
j
¬¬ 
<
¬¬ 
board
¬¬ 
.
¬¬  

FlatLength
¬¬  *
(
¬¬* +
)
¬¬+ ,
;
¬¬, -
j
¬¬. /
++
¬¬/ 1
)
¬¬1 2
{
√√ 
if
ƒƒ 
(
ƒƒ 
board
ƒƒ 
.
ƒƒ 
FlatGet
ƒƒ 
(
ƒƒ 
i
ƒƒ 
)
ƒƒ 
>
ƒƒ 
board
ƒƒ 
.
ƒƒ  
FlatGet
ƒƒ  '
(
ƒƒ' (
j
ƒƒ( )
)
ƒƒ) *
)
ƒƒ* +
{
≈≈ 
return
∆∆ 

false
∆∆ 
;
∆∆ 
}
«« 
}
»» 
}
…… 
return
   
true
   
;
   
}ÀÀ 
staticÕÕ 
int
ÕÕ 


Inversions
ÕÕ 
(
ÕÕ 
int
ÕÕ 
[
ÕÕ 
,
ÕÕ 
]
ÕÕ 
board
ÕÕ "
)
ÕÕ" #
{ŒŒ 
int
œœ 

inversions
œœ 
=
œœ 
$num
œœ 
;
œœ 
for
–– 
(
–– 
int
–– 	
i
––
 
=
–– 
$num
–– 
;
–– 
i
–– 
<
–– 
board
–– 
.
–– 

FlatLength
–– %
(
––% &
)
––& '
;
––' (
i
––) *
++
––* ,
)
––, -
{
—— 
for
““ 
(
““ 
int
““ 

j
““ 
=
““ 
i
““ 
+
““ 
$num
““ 
;
““ 
j
““ 
<
““ 
board
““ 
.
““  

FlatLength
““  *
(
““* +
)
““+ ,
;
““, -
j
““. /
++
““/ 1
)
““1 2
{
”” 
if
‘‘ 
(
‘‘ 
!
‘‘ 
(
‘‘ 	
board
‘‘	 
.
‘‘ 
FlatGet
‘‘ 
(
‘‘ 
i
‘‘ 
)
‘‘ 
==
‘‘ 
board
‘‘ "
.
‘‘" #

FlatLength
‘‘# -
(
‘‘- .
)
‘‘. /
||
‘‘0 2
board
‘‘3 8
.
‘‘8 9
FlatGet
‘‘9 @
(
‘‘@ A
j
‘‘A B
)
‘‘B C
==
‘‘D F
board
‘‘G L
.
‘‘L M

FlatLength
‘‘M W
(
‘‘W X
)
‘‘X Y
)
‘‘Y Z
&&
‘‘[ ]
board
’’ 	
.
’’	 

FlatGet
’’
 
(
’’ 
i
’’ 
)
’’ 
>
’’ 
board
’’ 
.
’’ 
FlatGet
’’ $
(
’’$ %
j
’’% &
)
’’& '
)
’’' (
{
÷÷ 

inversions
◊◊ 
++
◊◊ 
;
◊◊ 
}
ÿÿ 
}
ŸŸ 
}
⁄⁄ 
return
€€ 

inversions
€€ 
;
€€ 
}‹‹ 
publicﬁﬁ 
static
ﬁﬁ 
class
ﬁﬁ 

Extensions
ﬁﬁ 
{ﬂﬂ 
public
‡‡ 
static
‡‡ 
int
‡‡ 

FlatLength
‡‡ 
<
‡‡ 
T
‡‡ 
>
‡‡  
(
‡‡  !
this
‡‡! %
T
‡‡& '
[
‡‡' (
,
‡‡( )
]
‡‡) *
array2d
‡‡+ 2
)
‡‡2 3
=>
‡‡4 6
array2d
·· 	
.
··	 

	GetLength
··
 
(
·· 
$num
·· 
)
·· 
*
·· 
array2d
··  
.
··  !
	GetLength
··! *
(
··* +
$num
··+ ,
)
··, -
;
··- .
public
„„ 
static
„„ 
T
„„ 
FlatGet
„„ 
<
„„ 
T
„„ 
>
„„ 
(
„„ 
this
„„  
T
„„! "
[
„„" #
,
„„# $
]
„„$ %
array2d
„„& -
,
„„- .
int
„„/ 2
index
„„3 8
)
„„8 9
=>
„„: <
array2d
‰‰ 	
[
‰‰	 

index
‰‰
 
/
‰‰ 
array2d
‰‰ 
.
‰‰ 
	GetLength
‰‰ #
(
‰‰# $
$num
‰‰$ %
)
‰‰% &
,
‰‰& '
index
‰‰( -
%
‰‰. /
array2d
‰‰0 7
.
‰‰7 8
	GetLength
‰‰8 A
(
‰‰A B
$num
‰‰B C
)
‰‰C D
]
‰‰D E
;
‰‰E F
public
ÊÊ 
static
ÊÊ 
void
ÊÊ 
FlatSet
ÊÊ 
<
ÊÊ 
T
ÊÊ 
>
ÊÊ 
(
ÊÊ 
this
ÊÊ #
T
ÊÊ$ %
[
ÊÊ% &
,
ÊÊ& '
]
ÊÊ' (
array2d
ÊÊ) 0
,
ÊÊ0 1
int
ÊÊ2 5
index
ÊÊ6 ;
,
ÊÊ; <
T
ÊÊ= >
value
ÊÊ? D
)
ÊÊD E
=>
ÊÊF H
array2d
ÁÁ 	
[
ÁÁ	 

index
ÁÁ
 
/
ÁÁ 
array2d
ÁÁ 
.
ÁÁ 
	GetLength
ÁÁ #
(
ÁÁ# $
$num
ÁÁ$ %
)
ÁÁ% &
,
ÁÁ& '
index
ÁÁ( -
%
ÁÁ. /
array2d
ÁÁ0 7
.
ÁÁ7 8
	GetLength
ÁÁ8 A
(
ÁÁA B
$num
ÁÁB C
)
ÁÁC D
]
ÁÁD E
=
ÁÁF G
value
ÁÁH M
;
ÁÁM N
}ËË 
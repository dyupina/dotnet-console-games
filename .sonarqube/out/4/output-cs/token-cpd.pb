íæ
VC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Minesweeper\Program.cs
const 
int 	
mine
 
= 
- 
$num 
; 
Random 
random 
= 
new 
( 
) 
; 
( 
int 
Value 

,
 
bool 
Visible 
) 
[ 
, 
] 
board "
;" #
Console 
. 
	WriteLine 
( 
$str 
)  
;  !
Console		 
.		 
	WriteLine		 
(		 
)		 
;		 
int

 
selectedWidth

 
=

 
GetIntegerInput

 #
(

# $
$"

$ &
$str

& <
{

< =
Math

= A
.

A B
Min

B E
(

E F
Console

F M
.

M N
LargestWindowWidth

N `
,

` a
$num

b d
)

d e
}

e f
$str

f i
"

i j
,

j k
$num

l n
,

n o
Math

p t
.

t u
Min

u x
(

x y
Console	

y Ä
.


Ä Å 
LargestWindowWidth


Å ì
,


ì î
$num


ï ó
)


ó ò
)


ò ô
;


ô ö
int 
selectedHeight 
= 
GetIntegerInput $
($ %
$"% '
$str' >
{> ?
Math? C
.C D
MinD G
(G H
ConsoleH O
.O P
LargestWindowHeightP c
,c d
$nume g
)g h
}h i
$stri l
"l m
,m n
$numo q
,q r
Maths w
.w x
Minx {
({ |
Console	| É
.
É Ñ!
LargestWindowHeight
Ñ ó
,
ó ò
$num
ô õ
)
õ ú
)
ú ù
;
ù û
double 
	mineRatio 
= 
GetMineRatio 
(  
$str  C
)C D
;D E
int 
	mineCount 
= 
( 
int 
) 
( 
selectedWidth #
*$ %
selectedHeight& 4
*5 6
	mineRatio7 @
)@ A
;A B
if 
( 
OperatingSystem 
. 
	IsWindows 
( 
) 
)  
{ 
Console 
. 	
WindowHeight	 
= 
selectedHeight &
;& '
Console 
. 	
WindowWidth	 
= 
selectedWidth $
;$ %
} 
( 
int 
Column 
, 
int 
Row 
) 
= 
( 
selectedWidth &
/' (
$num) *
,* +
selectedHeight, :
/; <
$num= >
)> ?
;? @
GenerateBoard 
( 
) 
; 
Console 
. 
Clear 
( 
) 
; 
RenderBoard 
( 
) 
; 
int 
height 

= 
Console 
. 
WindowHeight !
;! "
int 
width 	
=
 
Console 
. 
WindowWidth 
;  
while 
( 
true 
) 
{ 
if 
( 
Console 
. 
WindowHeight 
!= 
height #
||$ &
Console' .
.. /
WindowWidth/ :
!=; =
width> C
)C D
{ 
RenderBoard 
( 
) 
; 
} 
Console 
. 	
SetCursorPosition	 
( 
Column !
,! "
Row# &
)& '
;' (
switch   
(   	
Console  	 
.   
ReadKey   
(   
true   
)   
.   
Key   "
)  " #
{!! 
case"" 

ConsoleKey"" 
."" 
UpArrow"" 
:"" 
Row"" !
=""" #
Math""$ (
.""( )
Max"") ,
("", -
Row""- 0
-""1 2
$num""3 4
,""4 5
$num""6 7
)""7 8
;""8 9
break"": ?
;""? @
case## 

ConsoleKey## 
.## 
	DownArrow## 
:## 
Row## !
=##" #
Math##$ (
.##( )
Min##) ,
(##, -
Row##- 0
+##1 2
$num##3 4
,##4 5
selectedHeight##6 D
-##E F
$num##G H
)##H I
;##I J
break##K P
;##P Q
case$$ 

ConsoleKey$$ 
.$$ 
	LeftArrow$$ 
:$$ 
Column$$ $
=$$% &
Math$$' +
.$$+ ,
Max$$, /
($$/ 0
Column$$0 6
-$$7 8
$num$$9 :
,$$: ;
$num$$< =
)$$= >
;$$> ?
break$$@ E
;$$E F
case%% 

ConsoleKey%% 
.%% 

RightArrow%% 
:%% 
Column%% $
=%%% &
Math%%' +
.%%+ ,
Min%%, /
(%%/ 0
Column%%0 6
+%%7 8
$num%%9 :
,%%: ;
selectedWidth%%< I
-%%J K
$num%%L M
)%%M N
;%%N O
break%%P U
;%%U V
case&& 

ConsoleKey&& 
.&& 
Enter&& 
:&& 
if'' 
('' 
!'' 
board'' 
['' 
Column'' 
,'' 
Row'' 
]'' 
.'' 
Visible'' "
)''" #
{(( 
if)) 
()) 
board)) 
[)) 
Column)) 
,)) 
Row)) 
])) 
.)) 
Value))  
==))! #
mine))$ (
)))( )
{** 
for++ 
(++	 

int++
 
column++ 
=++ 
$num++ 
;++ 
column++  
<++! "
selectedWidth++# 0
;++0 1
column++2 8
++++8 :
)++: ;
{,, 
for-- 	
(--
 
int-- 
row-- 
=-- 
$num-- 
;-- 
row-- 
<-- 
selectedHeight-- ,
;--, -
row--. 1
++--1 3
)--3 4
{.. 
board// 
[// 
column// 
,// 
row// 
]// 
.// 
Visible// !
=//" #
true//$ (
;//( )
}00 
}11 
RenderBoard22 
(22 
)22 
;22 
Console33 
.33 
SetCursorPosition33 
(33 
$num33  
,33  !
selectedHeight33" 0
-331 2
$num333 4
)334 5
;335 6
Console44 
.44 
Write44 
(44 
$str44 5
)445 6
;446 7
Console55 
.55 
ReadLine55 
(55 
)55 
;55 
Console66 
.66 
Clear66 
(66 
)66 
;66 
Console77 
.77 
Write77 
(77 
$str77 ,
)77, -
;77- .
return88 
;88 
}99 
else:: 
if::	 
(:: 
board:: 
[:: 
Column:: 
,:: 
Row:: 
]:: 
.::  
Value::  %
==::& (
$num::) *
)::* +
{;; 
Reveal<< 
(<< 
Column<< 
,<< 
Row<< 
)<< 
;<< 
RenderBoard== 
(== 
)== 
;== 
}>> 
else?? 
{@@ 
boardAA 

[AA
 
ColumnAA 
,AA 
RowAA 
]AA 
.AA 
VisibleAA 
=AA  !
trueAA" &
;AA& '
RenderBoardBB 
(BB 
)BB 
;BB 
}CC 
intDD 
visibleCountDD 
=DD 
$numDD 
;DD 
forEE 
(EE 	
intEE	 
columnEE 
=EE 
$numEE 
;EE 
columnEE 
<EE  !
selectedWidthEE" /
;EE/ 0
columnEE1 7
++EE7 9
)EE9 :
{FF 
forGG 
(GG	 

intGG
 
rowGG 
=GG 
$numGG 
;GG 
rowGG 
<GG 
selectedHeightGG +
;GG+ ,
rowGG- 0
++GG0 2
)GG2 3
{HH 
ifII 
(II	 

boardII
 
[II 
columnII 
,II 
rowII 
]II 
.II 
VisibleII $
)II$ %
{JJ 
visibleCountKK 
++KK 
;KK 
}LL 
}MM 
}NN 
ifOO 
(OO 
visibleCountOO 
==OO 
selectedWidthOO %
*OO& '
selectedHeightOO( 6
-OO7 8
	mineCountOO9 B
)OOB C
{PP 
ConsoleQQ 
.QQ 
SetCursorPositionQQ 
(QQ 
$numQQ  
,QQ  !
selectedHeightQQ" 0
-QQ1 2
$numQQ3 4
)QQ4 5
;QQ5 6
ConsoleRR 
.RR 
WriteRR 
(RR 
$strRR 4
)RR4 5
;RR5 6
ConsoleSS 
.SS 
ReadLineSS 
(SS 
)SS 
;SS 
ConsoleTT 
.TT 
ClearTT 
(TT 
)TT 
;TT 
ConsoleUU 
.UU 
WriteUU 
(UU 
$strUU ,
)UU, -
;UU- .
returnVV 
;VV 
}WW 
}XX 
breakYY 
;YY 	
caseZZ 

ConsoleKeyZZ 
.ZZ 
EscapeZZ 
:ZZ 
Console[[ 

.[[
 
Clear[[ 
([[ 
)[[ 
;[[ 
Console\\ 

.\\
 
Write\\ 
(\\ 
$str\\ *
)\\* +
;\\+ ,
return]] 	
;]]	 

}^^ 
}__ 
IEnumerableaa 
<aa 
(aa 
intaa 
Rowaa 
,aa 
intaa 
Columnaa  
)aa  !
>aa! "
AdjacentTilesaa# 0
(aa0 1
intaa1 4
columnaa5 ;
,aa; <
intaa= @
rowaaA D
)aaD E
{bb 
ifgg	 
(gg 
rowgg 
>gg 
$numgg 
&&gg 
columngg 
>gg  
$numgg! "
)gg" #
yieldgg$ )
returngg* 0
(gg1 2
rowgg2 5
-gg6 7
$numgg8 9
,gg9 :
columngg; A
-ggB C
$numggD E
)ggE F
;ggF G
ifhh	 
(hh 
rowhh 
>hh 
$numhh 
)hh 
yieldhh 
returnhh "
(hh# $
rowhh$ '
-hh( )
$numhh* +
,hh+ ,
columnhh- 3
)hh3 4
;hh4 5
ifii	 
(ii 
rowii 
>ii 
$numii 
&&ii 
columnii 
<ii  
selectedWidthii! .
-ii/ 0
$numii1 2
)ii2 3
yieldii4 9
returnii: @
(iiA B
rowiiB E
-iiF G
$numiiH I
,iiI J
columniiK Q
+iiR S
$numiiT U
)iiU V
;iiV W
ifjj	 
(jj 
columnjj 
>jj 
$numjj 
)jj 
yieldjj 
returnjj %
(jj& '
rowjj' *
,jj* +
columnjj, 2
-jj3 4
$numjj5 6
)jj6 7
;jj7 8
ifkk	 
(kk 
columnkk 
<kk 
selectedWidthkk #
-kk$ %
$numkk& '
)kk' (
yieldkk) .
returnkk/ 5
(kk6 7
rowkk7 :
,kk: ;
columnkk< B
+kkC D
$numkkE F
)kkF G
;kkG H
ifll	 
(ll 
rowll 
<ll 
selectedHeightll !
-ll" #
$numll$ %
&&ll& (
columnll) /
>ll0 1
$numll2 3
)ll3 4
yieldll5 :
returnll; A
(llB C
rowllC F
+llG H
$numllI J
,llJ K
columnllL R
-llS T
$numllU V
)llV W
;llW X
ifmm	 
(mm 
rowmm 
<mm 
selectedHeightmm !
-mm" #
$nummm$ %
)mm% &
yieldmm' ,
returnmm- 3
(mm4 5
rowmm5 8
+mm9 :
$nummm; <
,mm< =
columnmm> D
)mmD E
;mmE F
ifnn	 
(nn 
rownn 
<nn 
selectedHeightnn !
-nn" #
$numnn$ %
&&nn& (
columnnn) /
<nn0 1
selectedWidthnn2 ?
-nn@ A
$numnnB C
)nnC D
yieldnnE J
returnnnK Q
(nnR S
rownnS V
+nnW X
$numnnY Z
,nnZ [
columnnn\ b
+nnc d
$numnne f
)nnf g
;nng h
}oo 
intqq 
GetIntegerInputqq 
(qq 
stringqq 
promptqq !
,qq! "
intqq# &
minqq' *
,qq* +
intqq, /
maxqq0 3
)qq3 4
{rr 
intss 

inputValuess 
;ss 
Consolett 
.tt 	
Writett	 
(tt 
prompttt 
)tt 
;tt 
whileuu 
(uu 
!uu 	
intuu	 
.uu 
TryParseuu 
(uu 
Consoleuu 
.uu 
ReadLineuu &
(uu& '
)uu' (
,uu( )
outuu* -

inputValueuu. 8
)uu8 9
||uu: <

inputValueuu= G
<uuH I
minuuJ M
||uuN P
maxuuQ T
<uuU V

inputValueuuW a
)uua b
{vv 
Consoleww 	
.ww	 

	WriteLineww
 
(ww 
$strww 1
)ww1 2
;ww2 3
Consolexx 	
.xx	 

Writexx
 
(xx 
promptxx 
)xx 
;xx 
}yy 
returnzz 

inputValuezz 
;zz 
}{{ 
double}} 
GetMineRatio}} 
(}} 
string}} 
prompt}} !
)}}! "
{~~ 
double 

inputValue 
; 
Console
ÄÄ 
.
ÄÄ 	
Write
ÄÄ	 
(
ÄÄ 
prompt
ÄÄ 
)
ÄÄ 
;
ÄÄ 
while
ÅÅ 
(
ÅÅ 
!
ÅÅ 	
double
ÅÅ	 
.
ÅÅ 
TryParse
ÅÅ 
(
ÅÅ 
Console
ÅÅ  
.
ÅÅ  !
ReadLine
ÅÅ! )
(
ÅÅ) *
)
ÅÅ* +
,
ÅÅ+ ,
out
ÅÅ- 0

inputValue
ÅÅ1 ;
)
ÅÅ; <
||
ÅÅ= ?
(
ÅÅ@ A
	mineCount
ÅÅA J
=
ÅÅK L
(
ÅÅM N
int
ÅÅN Q
)
ÅÅQ R
(
ÅÅR S
selectedWidth
ÅÅS `
*
ÅÅa b
selectedHeight
ÅÅc q
*
ÅÅr s

inputValue
ÅÅt ~
)
ÅÅ~ 
)ÅÅ Ä
<ÅÅÅ Ç
$numÅÅÉ Ñ
||ÅÅÖ á
	mineCountÅÅà ë
>ÅÅí ì
selectedHeightÅÅî ¢
*ÅÅ£ §
selectedWidthÅÅ• ≤
)ÅÅ≤ ≥
{
ÇÇ 
Console
ÉÉ 	
.
ÉÉ	 

	WriteLine
ÉÉ
 
(
ÉÉ 
$str
ÉÉ 1
)
ÉÉ1 2
;
ÉÉ2 3
Console
ÑÑ 	
.
ÑÑ	 

Write
ÑÑ
 
(
ÑÑ 
prompt
ÑÑ 
)
ÑÑ 
;
ÑÑ 
}
ÖÖ 
return
ÜÜ 

inputValue
ÜÜ 
;
ÜÜ 
}áá 
voidââ 
GenerateBoard
ââ 
(
ââ 
)
ââ 
{ää 
board
ãã 
=
ãã 
new
ãã	 
(
ãã 
int
ãã 
Value
ãã 
,
ãã 
bool
ãã 
Visible
ãã %
)
ãã% &
[
ãã& '
selectedWidth
ãã' 4
,
ãã4 5
selectedHeight
ãã6 D
]
ããD E
;
ããE F
var
åå 
coordinates
åå 
=
åå 
new
åå 
List
åå 
<
åå 
(
åå 
int
åå  
Row
åå! $
,
åå$ %
int
åå& )
Column
åå* 0
)
åå0 1
>
åå1 2
(
åå2 3
)
åå3 4
;
åå4 5
for
çç 
(
çç 
int
çç 	
column
çç
 
=
çç 
$num
çç 
;
çç 
column
çç 
<
çç 
selectedWidth
çç ,
;
çç, -
column
çç. 4
++
çç4 6
)
çç6 7
{
éé 
for
èè 
(
èè 
int
èè 

row
èè 
=
èè 
$num
èè 
;
èè 
row
èè 
<
èè 
selectedHeight
èè (
;
èè( )
row
èè* -
++
èè- /
)
èè/ 0
{
êê 
coordinates
ëë 
.
ëë 
Add
ëë 
(
ëë 
(
ëë 
column
ëë 
,
ëë 
row
ëë 
)
ëë  
)
ëë  !
;
ëë! "
}
íí 
}
ìì 
for
îî 
(
îî 
int
îî 	
i
îî
 
=
îî 
$num
îî 
;
îî 
i
îî 
<
îî 
	mineCount
îî 
;
îî 
i
îî  !
++
îî! #
)
îî# $
{
ïï 
int
ññ 
randomIndex
ññ 
=
ññ 
random
ññ 
.
ññ 
Next
ññ 
(
ññ  
$num
ññ  !
,
ññ! "
coordinates
ññ# .
.
ññ. /
Count
ññ/ 4
)
ññ4 5
;
ññ5 6
(
óó 
int
óó 
column
óó 
,
óó 
int
óó 
row
óó 
)
óó 
=
óó 
coordinates
óó %
[
óó% &
randomIndex
óó& 1
]
óó1 2
;
óó2 3
coordinates
òò 
.
òò 
RemoveAt
òò 
(
òò 
randomIndex
òò "
)
òò" #
;
òò# $
board
ôô 
[
ôô 
column
ôô 
,
ôô 
row
ôô 
]
ôô 
=
ôô 
(
ôô 
mine
ôô 
,
ôô 
false
ôô #
)
ôô# $
;
ôô$ %
foreach
öö 	
(
öö
 
var
öö 
tile
öö 
in
öö 
AdjacentTiles
öö $
(
öö$ %
column
öö% +
,
öö+ ,
row
öö- 0
)
öö0 1
)
öö1 2
{
õõ 
if
úú 
(
úú 
board
úú 
[
úú 
tile
úú 
.
úú 
Column
úú 
,
úú 
tile
úú 
.
úú 
Row
úú "
]
úú" #
.
úú# $
Value
úú$ )
!=
úú* ,
mine
úú- 1
)
úú1 2
{
ùù 
board
ûû 	
[
ûû	 

tile
ûû
 
.
ûû 
Column
ûû 
,
ûû 
tile
ûû 
.
ûû 
Row
ûû 
]
ûû  
.
ûû  !
Value
ûû! &
++
ûû& (
;
ûû( )
}
üü 
}
†† 
}
°° 
}¢¢ 
char§§ 
Render
§§ 
(
§§ 
int
§§ 
value
§§ 
)
§§ 
=>
§§ 
value
§§ 
switch
§§  &
{•• 
mine
¶¶ 
=>
¶¶ 
$char
¶¶	 
,
¶¶ 
$num
ßß 
=>
ßß 
$char
ßß 	
,
ßß	 

$num
®® 
=>
®® 
$char
®® 	
,
®®	 

$num
©© 
=>
©© 
$char
©© 	
,
©©	 

$num
™™ 
=>
™™ 
$char
™™ 	
,
™™	 

$num
´´ 
=>
´´ 
$char
´´ 	
,
´´	 

$num
¨¨ 
=>
¨¨ 
$char
¨¨ 	
,
¨¨	 

$num
≠≠ 
=>
≠≠ 
$char
≠≠ 	
,
≠≠	 

$num
ÆÆ 
=>
ÆÆ 
$char
ÆÆ 	
,
ÆÆ	 

$num
ØØ 
=>
ØØ 
$char
ØØ 	
,
ØØ	 

_
∞∞ 
=>
∞∞ 
throw
∞∞ 
new
∞∞ %
NotImplementedException
∞∞ '
(
∞∞' (
)
∞∞( )
,
∞∞) *
}±± 
;
±± 
void≥≥ 
RenderBoard
≥≥ 
(
≥≥ 
)
≥≥ 
{¥¥ 
for
µµ 
(
µµ 
int
µµ 	
row
µµ
 
=
µµ 
$num
µµ 
;
µµ 
row
µµ 
<
µµ 
selectedHeight
µµ '
;
µµ' (
row
µµ) ,
++
µµ, .
)
µµ. /
{
∂∂ 
for
∑∑ 
(
∑∑ 
int
∑∑ 

column
∑∑ 
=
∑∑ 
$num
∑∑ 
;
∑∑ 
column
∑∑ 
<
∑∑ 
selectedWidth
∑∑  -
;
∑∑- .
column
∑∑/ 5
++
∑∑5 7
)
∑∑7 8
{
∏∏ 
Console
ππ 

.
ππ
 
SetCursorPosition
ππ 
(
ππ 
column
ππ #
,
ππ# $
row
ππ% (
)
ππ( )
;
ππ) *
Console
∫∫ 

.
∫∫
 
Write
∫∫ 
(
∫∫ 
board
∫∫ 
[
∫∫ 
column
∫∫ 
,
∫∫ 
row
∫∫ "
]
∫∫" #
.
∫∫# $
Visible
∫∫$ +
?
ªª 
Render
ªª 
(
ªª 
board
ªª 
[
ªª 
column
ªª 
,
ªª 
row
ªª 
]
ªª 
.
ªª  
Value
ªª  %
)
ªª% &
:
ºº 
$char
ºº 	
)
ºº	 

;
ºº
 
}
ΩΩ 
}
ææ 
}øø 
void¡¡ 
Reveal
¡¡ 
(
¡¡ 
int
¡¡ 
column
¡¡ 
,
¡¡ 
int
¡¡ 
row
¡¡ 
)
¡¡  
{¬¬ 
board
√√ 
[
√√ 
column
√√ 
,
√√ 
row
√√ 
]
√√ 
.
√√ 
Visible
√√ 
=
√√ 
true
√√ "
;
√√" #
if
ƒƒ 
(
ƒƒ 
board
ƒƒ 

[
ƒƒ
 
column
ƒƒ 
,
ƒƒ 
row
ƒƒ 
]
ƒƒ 
.
ƒƒ 
Value
ƒƒ 
==
ƒƒ  
$num
ƒƒ! "
)
ƒƒ" #
{
≈≈ 
foreach
∆∆ 	
(
∆∆
 
var
∆∆ 
(
∆∆ 
r
∆∆ 
,
∆∆ 
c
∆∆ 
)
∆∆ 
in
∆∆ 
AdjacentTiles
∆∆ &
(
∆∆& '
column
∆∆' -
,
∆∆- .
row
∆∆/ 2
)
∆∆2 3
)
∆∆3 4
{
«« 
if
»» 
(
»» 
!
»» 
board
»» 
[
»» 
c
»» 
,
»» 
r
»» 
]
»» 
.
»» 
Visible
»» 
)
»» 
{
…… 
Reveal
   

(
  
 
c
   
,
   
r
   
)
   
;
   
}
ÀÀ 
}
ÃÃ 
}
ÕÕ 
}ŒŒ 
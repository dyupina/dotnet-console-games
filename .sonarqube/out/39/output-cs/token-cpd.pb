¥½
UC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Battleship\Program.cs
	Exception 	
?	 

	exception 
= 
null 
; 
const 
int 	
boardHeight
 
= 
$num 
; 
const 
int 	

boardWidth
 
= 
$num 
; 
bool 
[ 
, 
] 
offense 
; 
Ship		 
[		 
,		 
]		 
offenseShips		 
;		 
bool

 
[

 
,

 
]

 
defense

 
;

 
Ship 
[ 
, 
] 
defenseShips 
; 
( 
int 
BufferHeight 
, 
int 
BufferWidth "
," #
int$ '
WindowHeight( 4
,4 5
int6 9
WindowWidth: E
)E F
consoleSizeG R
;R S
bool 
placing 
= 
false 
; 
( 
Ship 
Ship 

,
 
int 
Size 
, 
int 
Row 
, 
int "
Column# )
,) *
bool+ /
Vertical0 8
)8 9
	placement: C
=D E
defaultF M
;M N
bool 
escape 
= 
false 
; 
( 
int 
Row 
, 	
int
 
Column 
) 
	selection 
=  !
default" )
;) *
bool 
	selecting 
= 
false 
; 
Action 
? 
renderMessage 
= 
null 
; 
try 
{ 
Console 
. 	
BackgroundColor	 
= 
ConsoleColor '
.' (
Black( -
;- .
Console 
. 	
ForegroundColor	 
= 
ConsoleColor '
.' (
White( -
;- .
Console 
. 	
Clear	 
( 
) 
; 
consoleSize 
= 
ConsoleSize 
( 
) 
; 
while 
( 
! 	
escape	 
) 
{ 
offense 	
=
 
new 
bool 
[ 
boardHeight  
,  !

boardWidth" ,
], -
;- .
offenseShips 
= 
new 
Ship 
[ 
boardHeight %
,% &

boardWidth' 1
]1 2
;2 3
defense 	
=
 
new 
bool 
[ 
boardHeight  
,  !

boardWidth" ,
], -
;- .
defenseShips   
=   
new   
Ship   
[   
boardHeight   %
,  % &

boardWidth  ' 1
]  1 2
;  2 3
Console## 	
.##	 

Clear##
 
(## 
)## 
;## 
renderMessage$$ 
=$$ 
($$ 
)$$ 
=>$$ 
{%% 
Console&& 

.&&
 
	WriteLine&& 
(&& 
)&& 
;&& 
Console'' 

.''
 
	WriteLine'' 
('' 
$str'' W
)''W X
;''X Y
Console(( 

.((
 
	WriteLine(( 
((( 
$str(( U
)((U V
;((V W
Console)) 

.))
 
	WriteLine)) 
()) 
$str)) U
)))U V
;))V W
Console** 

.**
 
	WriteLine** 
(** 
$str** 2
)**2 3
;**3 4
Console++ 

.++
 
	WriteLine++ 
(++ 
)++ 
;++ 
Console,, 

.,,
 
	WriteLine,, 
(,, 
$str,, F
),,F G
;,,G H
Console-- 

.--
 
	WriteLine-- 
(-- 
)-- 
;-- 
Console.. 

...
 
	WriteLine.. 
(.. 
$str.. 2
)..2 3
;..3 4
}// 
;// 
RenderMainView00 
(00 
)00 
;00 
GetEnterOrEscape11 
(11 
)11 
;11 
if22 
(22 
escape22 
)22 
{33 
return44 	
;44	 

}55 
Console88 	
.88	 

Clear88
 
(88 
)88 
;88 
PlaceDefenseShips99 
(99 
)99 
;99 
if:: 
(:: 
escape:: 
):: 
{;; 
return<< 	
;<<	 

}== !
RandomizeOffenseShips>> 
(>> 
)>> 
;>> 
renderMessage?? 
=?? 
(?? 
)?? 
=>?? 
{@@ 
ConsoleAA 

.AA
 
	WriteLineAA 
(AA 
)AA 
;AA 
ConsoleBB 

.BB
 
	WriteLineBB 
(BB 
$strBB :
)BB: ;
;BB; <
ConsoleCC 

.CC
 
	WriteLineCC 
(CC 
)CC 
;CC 
ConsoleDD 

.DD
 
	WriteLineDD 
(DD 
$strDD 5
)DD5 6
;DD6 7
}EE 
;EE 
RenderMainViewFF 
(FF 
)FF 
;FF 
	selectionII 
=II 
(II 
boardHeightII 
/II 
$numII 
,II 

boardWidthII  *
/II+ ,
$numII- .
)II. /
;II/ 0
ConsoleJJ 	
.JJ	 

ClearJJ
 
(JJ 
)JJ 
;JJ 
renderMessageKK 
=KK 
(KK 
)KK 
=>KK 
{LL 
ConsoleMM 

.MM
 
	WriteLineMM 
(MM 
)MM 
;MM 
ConsoleNN 

.NN
 
	WriteLineNN 
(NN 
$strNN +
)NN+ ,
;NN, -
ConsoleOO 

.OO
 
	WriteLineOO 
(OO 
)OO 
;OO 
ConsolePP 

.PP
 
	WriteLinePP 
(PP 
$strPP  
)PP  !
;PP! "
ConsoleQQ 

.QQ
 
	WriteLineQQ 
(QQ 
$strQQ !
)QQ! "
;QQ" #
ConsoleRR 

.RR
 
	WriteLineRR 
(RR 
$strRR /
)RR/ 0
;RR0 1
ConsoleSS 

.SS
 
	WriteLineSS 
(SS 
$strSS =
)SS= >
;SS> ?
}TT 
;TT 
	selectingUU 
=UU 
trueUU 
;UU 
whileVV 
(VV 	
!VV	 

WonVV
 
(VV 
defenseShipsVV 
,VV 
defenseVV #
)VV# $
&&VV% '
!VV( )
WonVV) ,
(VV, -
offenseShipsVV- 9
,VV9 :
offenseVV; B
)VVB C
)VVC D
{WW 
ChooseOffenseXX 
(XX 
)XX 
;XX 
ifYY 
(YY 
escapeYY 
)YY 
{ZZ 
return[[ 

;[[
 
}\\ !
RandomlyChooseDefense]] 
(]] 
)]] 
;]] 
RenderMainView^^ 
(^^ 
)^^ 
;^^ 
}__ 
	selecting`` 
=`` 
false`` 
;`` 
Consolecc 	
.cc	 

Clearcc
 
(cc 
)cc 
;cc 
renderMessagedd 
=dd 
(dd 
)dd 
=>dd 
{ee 
Consoleff 

.ff
 
	WriteLineff 
(ff 
)ff 
;ff 
switchgg 	
(gg
 
(gg 
Wongg 
(gg 
defenseShipsgg 
,gg 
defensegg %
)gg% &
,gg& '
Wongg( +
(gg+ ,
offenseShipsgg, 8
,gg8 9
offensegg: A
)ggA B
)ggB C
)ggC D
{hh 
caseii 
(ii	 

trueii
 
,ii 
trueii 
)ii 
:ii 
Consolejj 
.jj 
	WriteLinejj 
(jj 
$strjj 5
)jj5 6
;jj6 7
breakkk 

;kk
 
casell 
(ll	 

falsell
 
,ll 
truell 
)ll 
:ll 
Consolemm 
.mm 
	WriteLinemm 
(mm 
$strmm A
)mmA B
;mmB C
breaknn 

;nn
 
caseoo 
(oo	 

trueoo
 
,oo 
falseoo 
)oo 
:oo 
Consolepp 
.pp 
	WriteLinepp 
(pp 
$strpp C
)ppC D
;ppD E
breakqq 

;qq
 
}rr 
Consoless 

.ss
 
	WriteLiness 
(ss 
)ss 
;ss 
Consolett 

.tt
 
	WriteLinett 
(tt 
$strtt =
)tt= >
;tt> ?
}uu 
;uu 
RenderMainViewvv 
(vv 
showEnemyShipsvv 
:vv  
truevv! %
)vv% &
;vv& '
GetEnterOrEscapeww 
(ww 
)ww 
;ww 
}xx 
}yy 
catchzz 
(zz 
	Exceptionzz 
ezz 
)zz 
{{{ 
	exception|| 

=|| 
e|| 
;|| 
throw}} 
;}} 
}~~ 
finally 
{ 
Console
 
.
 	
CursorVisible
	 
=
 
true
 
;
 
Console
 
.
 	

ResetColor
	 
(
 
)
 
;
 
Console
 
.
 	
Clear
	 
(
 
)
 
;
 
Console
 
.
 	
	WriteLine
	 
(
 
	exception
 
?
 
.
 
ToString
 &
(
& '
)
' (
??
) +
$str
, D
)
D E
;
E F
} 
void 
PlaceDefenseShips
 
(
 
)
 
{ 
placing
 
=
	 

true
 
;
 
foreach
 
(
	 

Ship

 
ship
 
in
 
Enum
 
.
 
	GetValues
 %
<
% &
Ship
& *
>
* +
(
+ ,
)
, -
)
- .
{
 
renderMessage
 
=
 
(
 
)
 
=>
 
{
 
Console
 

.

 
	WriteLine
 
(
 
)
 
;
 
Console
 

.

 
	WriteLine
 
(
 
$"
 
$str
 $
{
$ %
ship
% )
}
) *
$str
* 7
"
7 8
)
8 9
;
9 :
Console
 

.

 
	WriteLine
 
(
 
)
 
;
 
Console
 

.

 
	WriteLine
 
(
 
$str
 9
)
9 :
;
: ;
Console
 

.

 
	WriteLine
 
(
 
$str
 ;
)
; <
;
< =
Console
 

.

 
	WriteLine
 
(
 
$str
 K
)
K L
;
L M
}
 
;
 
int
 
size
 

=
 
(
 
int
 
)
 
ship
 
.
 
GetTag
 
(
 
$str
 $
)
$ %
.
% &
Value
& +
!
+ ,
;
, -
	placement
 
=
 
(
 
ship
 
,
 
size
 
,
 
$num
 
,
 
$num
 
,
  
true
! %
)
% &
;
& '
while
 
(
 	
true
	 
)
 
{
 
RenderMainView
 
(
 
)
 
;
 
switch
 	
(

 
Console
 
.
 
ReadKey
 
(
 
true
 
)
  
.
  !
Key
! $
)
$ %
{
 
case
 

ConsoleKey
	 
.
 
UpArrow
 
:
 
	placement
 
.
 
Row
 
=
 
Math
 
.
 
Max
 
(
 
	placement
 '
.
' (
Row
( +
-
, -
$num
. /
,
/ 0
$num
1 2
)
2 3
;
3 4
break
 

;

 
case
   

ConsoleKey
  	 
.
   
	DownArrow
   
:
   
	placement
¡¡ 
.
¡¡ 
Row
¡¡ 
=
¡¡ 
Math
¡¡ 
.
¡¡ 
Min
¡¡ 
(
¡¡ 
	placement
¡¡ '
.
¡¡' (
Row
¡¡( +
+
¡¡, -
$num
¡¡. /
,
¡¡/ 0
boardHeight
¡¡1 <
-
¡¡= >
(
¡¡? @
	placement
¡¡@ I
.
¡¡I J
Vertical
¡¡J R
?
¡¡S T
size
¡¡U Y
:
¡¡Z [
$num
¡¡\ ]
)
¡¡] ^
)
¡¡^ _
;
¡¡_ `
	placement
¢¢ 
.
¢¢ 
Column
¢¢ 
=
¢¢ 
Math
¢¢ 
.
¢¢ 
Min
¢¢  
(
¢¢  !
	placement
¢¢! *
.
¢¢* +
Column
¢¢+ 1
,
¢¢1 2

boardWidth
¢¢3 =
-
¢¢> ?
(
¢¢@ A
!
¢¢A B
	placement
¢¢B K
.
¢¢K L
Vertical
¢¢L T
?
¢¢U V
size
¢¢W [
:
¢¢\ ]
$num
¢¢^ _
)
¢¢_ `
)
¢¢` a
;
¢¢a b
break
££ 

;
££
 
case
¤¤ 

ConsoleKey
¤¤	 
.
¤¤ 
	LeftArrow
¤¤ 
:
¤¤ 
	placement
¥¥ 
.
¥¥ 
Column
¥¥ 
=
¥¥ 
Math
¥¥ 
.
¥¥ 
Max
¥¥  
(
¥¥  !
	placement
¥¥! *
.
¥¥* +
Column
¥¥+ 1
-
¥¥2 3
$num
¥¥4 5
,
¥¥5 6
$num
¥¥7 8
)
¥¥8 9
;
¥¥9 :
break
¦¦ 

;
¦¦
 
case
§§ 

ConsoleKey
§§	 
.
§§ 

RightArrow
§§ 
:
§§ 
	placement
¨¨ 
.
¨¨ 
Row
¨¨ 
=
¨¨ 
Math
¨¨ 
.
¨¨ 
Min
¨¨ 
(
¨¨ 
	placement
¨¨ '
.
¨¨' (
Row
¨¨( +
,
¨¨+ ,
boardHeight
¨¨- 8
-
¨¨9 :
(
¨¨; <
	placement
¨¨< E
.
¨¨E F
Vertical
¨¨F N
?
¨¨O P
size
¨¨Q U
:
¨¨V W
$num
¨¨X Y
)
¨¨Y Z
)
¨¨Z [
;
¨¨[ \
	placement
©© 
.
©© 
Column
©© 
=
©© 
Math
©© 
.
©© 
Min
©©  
(
©©  !
	placement
©©! *
.
©©* +
Column
©©+ 1
+
©©2 3
$num
©©4 5
,
©©5 6

boardWidth
©©7 A
-
©©B C
(
©©D E
!
©©E F
	placement
©©F O
.
©©O P
Vertical
©©P X
?
©©Y Z
size
©©[ _
:
©©` a
$num
©©b c
)
©©c d
)
©©d e
;
©©e f
break
ªª 

;
ªª
 
case
«« 

ConsoleKey
««	 
.
«« 
Spacebar
«« 
:
«« 
	placement
¬¬ 
.
¬¬ 
Vertical
¬¬ 
=
¬¬ 
!
¬¬ 
	placement
¬¬ $
.
¬¬$ %
Vertical
¬¬% -
;
¬¬- .
	placement
­­ 
.
­­ 
Row
­­ 
=
­­ 
Math
­­ 
.
­­ 
Min
­­  
(
­­  !
	placement
­­! *
.
­­* +
Row
­­+ .
,
­­. /
boardHeight
­­0 ;
-
­­< =
(
­­> ?
	placement
­­? H
.
­­H I
Vertical
­­I Q
?
­­R S
size
­­T X
:
­­Y Z
$num
­­[ \
)
­­\ ]
)
­­] ^
;
­­^ _
	placement
®® 
.
®® 
Column
®® 
=
®® 
Math
®® 
.
®® 
Min
®®  
(
®®  !
	placement
®®! *
.
®®* +
Column
®®+ 1
,
®®1 2

boardWidth
®®3 =
-
®®? @
(
®®A B
!
®®B C
	placement
®®C L
.
®®L M
Vertical
®®M U
?
®®V W
size
®®X \
:
®®] ^
$num
®®_ `
)
®®` a
)
®®a b
;
®®b c
break
¯¯ 

;
¯¯
 
case
°° 

ConsoleKey
°°	 
.
°° 
Enter
°° 
:
°° 
if
±± 
(
±± 	
IsValidPlacement
±±	 
(
±± 
)
±± 
)
±± 
{
²² 
for
³³ 	
(
³³
 
int
³³ 
i
³³ 
=
³³ 
$num
³³ 
;
³³ 
i
³³ 
<
³³ 
	placement
³³ #
.
³³# $
Size
³³$ (
;
³³( )
i
³³* +
++
³³+ -
)
³³- .
{
´´ 
defenseShips
µµ 
[
µµ 
	placement
µµ 
.
µµ 
Row
µµ !
+
µµ" #
(
µµ$ %
	placement
µµ% .
.
µµ. /
Vertical
µµ/ 7
?
µµ8 9
i
µµ: ;
:
µµ< =
$num
µµ> ?
)
µµ? @
,
µµ@ A
	placement
µµB K
.
µµK L
Column
µµL R
+
µµS T
(
µµU V
!
µµV W
	placement
µµW `
.
µµ` a
Vertical
µµa i
?
µµj k
i
µµl m
:
µµn o
$num
µµp q
)
µµq r
]
µµr s
=
µµt u
ship
µµv z
;
µµz {
}
¶¶ 
goto
·· 

Continue
·· 
;
·· 
}
¸¸ 
break
¹¹ 

;
¹¹
 
case
ºº 

ConsoleKey
ºº	 
.
ºº 
Escape
ºº 
:
ºº 
escape
»» 
=
»» 
true
»» 
;
»» 
return
¼¼ 
;
¼¼ 
}
½½ 
}
¾¾ 
Continue
¿¿ 	
:
¿¿	 

continue
ÀÀ 

;
ÀÀ
 
}
ÁÁ 
placing
ÂÂ 
=
ÂÂ	 

false
ÂÂ 
;
ÂÂ 
}ÃÃ 
voidÅÅ 
ChooseOffense
ÅÅ 
(
ÅÅ 
)
ÅÅ 
{ÆÆ 
while
ÇÇ 
(
ÇÇ 
true
ÇÇ 
)
ÇÇ 
{
ÈÈ 
RenderMainView
ÉÉ 
(
ÉÉ 
)
ÉÉ 
;
ÉÉ 
switch
ÊÊ 
(
ÊÊ	 

Console
ÊÊ
 
.
ÊÊ 
ReadKey
ÊÊ 
(
ÊÊ 
true
ÊÊ 
)
ÊÊ 
.
ÊÊ  
Key
ÊÊ  #
)
ÊÊ# $
{
ËË 
case
ÌÌ 

ConsoleKey
ÌÌ 
.
ÌÌ 
UpArrow
ÌÌ 
:
ÌÌ 
	selection
ÍÍ 
.
ÍÍ 
Row
ÍÍ 
=
ÍÍ 
Math
ÍÍ 
.
ÍÍ 
Max
ÍÍ 
(
ÍÍ 
$num
ÍÍ 
,
ÍÍ 
	selection
ÍÍ  )
.
ÍÍ) *
Row
ÍÍ* -
-
ÍÍ. /
$num
ÍÍ0 1
)
ÍÍ1 2
;
ÍÍ2 3
break
ÎÎ 	
;
ÎÎ	 

case
ÏÏ 

ConsoleKey
ÏÏ 
.
ÏÏ 
	DownArrow
ÏÏ 
:
ÏÏ 
	selection
ÐÐ 
.
ÐÐ 
Row
ÐÐ 
=
ÐÐ 
Math
ÐÐ 
.
ÐÐ 
Min
ÐÐ 
(
ÐÐ 
boardHeight
ÐÐ (
-
ÐÐ) *
$num
ÐÐ+ ,
,
ÐÐ, -
	selection
ÐÐ. 7
.
ÐÐ7 8
Row
ÐÐ8 ;
+
ÐÐ< =
$num
ÐÐ> ?
)
ÐÐ? @
;
ÐÐ@ A
break
ÑÑ 	
;
ÑÑ	 

case
ÒÒ 

ConsoleKey
ÒÒ 
.
ÒÒ 
	LeftArrow
ÒÒ 
:
ÒÒ 
	selection
ÓÓ 
.
ÓÓ 
Column
ÓÓ 
=
ÓÓ 
Math
ÓÓ 
.
ÓÓ 
Max
ÓÓ 
(
ÓÓ  
$num
ÓÓ  !
,
ÓÓ! "
	selection
ÓÓ# ,
.
ÓÓ, -
Column
ÓÓ- 3
-
ÓÓ4 5
$num
ÓÓ6 7
)
ÓÓ7 8
;
ÓÓ8 9
break
ÔÔ 	
;
ÔÔ	 

case
ÕÕ 

ConsoleKey
ÕÕ 
.
ÕÕ 

RightArrow
ÕÕ 
:
ÕÕ 
	selection
ÖÖ 
.
ÖÖ 
Column
ÖÖ 
=
ÖÖ 
Math
ÖÖ 
.
ÖÖ 
Min
ÖÖ 
(
ÖÖ  

boardWidth
ÖÖ  *
-
ÖÖ+ ,
$num
ÖÖ- .
,
ÖÖ. /
	selection
ÖÖ0 9
.
ÖÖ9 :
Column
ÖÖ: @
+
ÖÖA B
$num
ÖÖC D
)
ÖÖD E
;
ÖÖE F
break
×× 	
;
××	 

case
ØØ 

ConsoleKey
ØØ 
.
ØØ 
Enter
ØØ 
:
ØØ 
if
ÙÙ 
(
ÙÙ 
!
ÙÙ 	
offense
ÙÙ	 
[
ÙÙ 
	selection
ÙÙ 
.
ÙÙ 
Row
ÙÙ 
,
ÙÙ 
	selection
ÙÙ  )
.
ÙÙ) *
Column
ÙÙ* 0
]
ÙÙ0 1
)
ÙÙ1 2
{
ÚÚ 
offense
ÛÛ 
[
ÛÛ 
	selection
ÛÛ 
.
ÛÛ 
Row
ÛÛ 
,
ÛÛ 
	selection
ÛÛ %
.
ÛÛ% &
Column
ÛÛ& ,
]
ÛÛ, -
=
ÛÛ. /
true
ÛÛ0 4
;
ÛÛ4 5
placing
ÜÜ 
=
ÜÜ 
false
ÜÜ 
;
ÜÜ 
return
ÝÝ 
;
ÝÝ 
}
ÞÞ 
break
ßß 	
;
ßß	 

case
àà 

ConsoleKey
àà 
.
àà 
Escape
àà 
:
àà 
escape
áá 

=
áá 
true
áá 
;
áá 
placing
ââ 
=
ââ 
false
ââ 
;
ââ 
return
ãã 

;
ãã
 
}
ää 
}
åå 
}ææ 
voidèè #
RandomlyChooseDefense
èè 
(
èè 
)
èè 
{éé 
if
êê 
(
êê 
Random
êê 
.
êê 
Shared
êê 
.
êê 
Next
êê 
(
êê 
$num
êê 
)
êê 
is
êê 
$num
êê 
)
êê  
{
ëë 
for
ìì 
(
ìì 
int
ìì 

r
ìì 
=
ìì 
$num
ìì 
;
ìì 
r
ìì 
<
ìì 
boardHeight
ìì !
;
ìì! "
r
ìì# $
++
ìì$ &
)
ìì& '
{
íí 
for
îî 
(
îî 
int
îî 
c
îî 
=
îî 
$num
îî 
;
îî 
c
îî 
<
îî 
boardHeight
îî "
;
îî" #
c
îî$ %
++
îî% '
)
îî' (
{
ïï 
if
ðð 
(
ðð 
!
ðð 	
defense
ðð	 
[
ðð 
r
ðð 
,
ðð 
c
ðð 
]
ðð 
&&
ðð 
defenseShips
ðð &
[
ðð& '
r
ðð' (
,
ðð( )
c
ðð* +
]
ðð+ ,
is
ðð- /
not
ðð0 3
$num
ðð4 5
)
ðð5 6
{
ññ 
defense
òò 
[
òò 
r
òò 
,
òò 
c
òò 
]
òò 
=
òò 
true
òò 
;
òò 
return
óó 
;
óó 
}
ôô 
}
õõ 
}
öö 
}
÷÷ 
else
øø 
{
ùù 
	ListArray
úú 
<
úú 
(
úú 
int
úú 
Row
úú 
,
úú 
int
úú 
Column
úú  
)
úú  !
>
úú! "
openlocations
úú# 0
=
úú1 2
new
úú3 6
(
úú6 7
)
úú7 8
;
úú8 9
for
ûû 
(
ûû 
int
ûû 

r
ûû 
=
ûû 
$num
ûû 
;
ûû 
r
ûû 
<
ûû 
boardHeight
ûû !
;
ûû! "
r
ûû# $
++
ûû$ &
)
ûû& '
{
üü 
for
ýý 
(
ýý 
int
ýý 
c
ýý 
=
ýý 
$num
ýý 
;
ýý 
c
ýý 
<
ýý 
boardHeight
ýý "
;
ýý" #
c
ýý$ %
++
ýý% '
)
ýý' (
{
þþ 
if
ÿÿ 
(
ÿÿ 
!
ÿÿ 	
defense
ÿÿ	 
[
ÿÿ 
r
ÿÿ 
,
ÿÿ 
c
ÿÿ 
]
ÿÿ 
)
ÿÿ 
{
 
openlocations
 
.
 
Add
 
(
 
(
 
r
 
,
 
c
 
)
 
)
 
;
 
}
 
}
 
}
 
var
 
(
 
row
 

,

 
column
 
)
 
=
 
openlocations
 #
[
# $
Random
$ *
.
* +
Shared
+ 1
.
1 2
Next
2 6
(
6 7
openlocations
7 D
.
D E
Count
E J
)
J K
]
K L
;
L M
defense
 	
[
	 

row

 
,
 
column
 
]
 
=
 
true
 
;
 
}
 
} 
bool 
IsValidPlacement
 
(
 
)
 
{ 
for
 
(
 
int
 	
i

 
=
 
$num
 
;
 
i
 
<
 
	placement
 
.
 
Size
 #
;
# $
i
% &
++
& (
)
( )
{
 
if
 
(
 
defenseShips
 
[
 
	placement
 
.
 
Row
  
+
! "
(
# $
	placement
$ -
.
- .
Vertical
. 6
?
7 8
i
9 :
:
; <
$num
= >
)
> ?
,
? @
	placement
A J
.
J K
Column
K Q
+
R S
(
T U
!
U V
	placement
V _
.
_ `
Vertical
` h
?
i j
i
k l
:
m n
$num
o p
)
p q
]
q r
is
s u
not
v y
$num
z {
)
{ |
{
 
return
 	
false

 
;
 
}
 
}
 
return
 
true
 
;
 
} 
void #
RandomizeOffenseShips
 
(
 
)
 
{ 
foreach
 
(
	 

Ship

 
ship
 
in
 
Enum
 
.
 
	GetValues
 %
<
% &
Ship
& *
>
* +
(
+ ,
)
, -
)
- .
{
 
int
 
size
 

=
 
(
 
int
 
)
 
ship
 
.
 
GetTag
 
(
 
$str
 $
)
$ %
.
% &
Value
& +
!
+ ,
;
, -
	ListArray
 
<
 
(
 
int
 
Row
 
,
 
int
 
Column
  
,
  !
bool
" &
Vertical
' /
)
/ 0
>
0 1
	locations
2 ;
=
< =
new
> A
(
A B
)
B C
;
C D
for
 
(
 
int
 

r
 
=
 
$num
 
;
 
r
 
<
 
boardHeight
 !
-
" #
size
$ (
;
( )
r
* +
++
+ -
)
- .
{
 
for
 
(
 
int
 
c
 
=
 
$num
 
;
 
c
 
<
 

boardWidth
 !
;
! "
c
# $
++
$ &
)
& '
{
 
bool
   
vertical
  	 
=
   
true
   
;
   
bool
¡¡ 

horizontal
¡¡	 
=
¡¡ 
true
¡¡ 
;
¡¡ 
for
¢¢ 
(
¢¢ 	
int
¢¢	 
i
¢¢ 
=
¢¢ 
$num
¢¢ 
;
¢¢ 
i
¢¢ 
<
¢¢ 
size
¢¢ 
;
¢¢ 
i
¢¢ 
++
¢¢ !
)
¢¢! "
{
££ 
if
¤¤ 
(
¤¤ 	
r
¤¤	 

+
¤¤ 
size
¤¤ 
>
¤¤ 
boardHeight
¤¤ 
||
¤¤  "
offenseShips
¤¤# /
[
¤¤/ 0
r
¤¤0 1
+
¤¤2 3
i
¤¤4 5
,
¤¤5 6
c
¤¤7 8
]
¤¤8 9
is
¤¤: <
not
¤¤= @
$num
¤¤A B
)
¤¤B C
{
¥¥ 
vertical
¦¦ 
=
¦¦ 
false
¦¦ 
;
¦¦ 
}
§§ 
if
¨¨ 
(
¨¨ 	
c
¨¨	 

+
¨¨ 
size
¨¨ 
>
¨¨ 

boardWidth
¨¨ 
||
¨¨ !
offenseShips
¨¨" .
[
¨¨. /
r
¨¨/ 0
,
¨¨0 1
c
¨¨2 3
+
¨¨4 5
i
¨¨6 7
]
¨¨7 8
is
¨¨9 ;
not
¨¨< ?
$num
¨¨@ A
)
¨¨A B
{
©© 

horizontal
ªª 
=
ªª 
false
ªª 
;
ªª 
}
«« 
}
¬¬ 
if
­­ 
(
­­ 
vertical
­­ 
)
­­ 
{
®® 
	locations
¯¯ 
.
¯¯ 
Add
¯¯ 
(
¯¯ 
(
¯¯ 
r
¯¯ 
,
¯¯ 
c
¯¯ 
,
¯¯ 
true
¯¯ 
)
¯¯ 
)
¯¯  
;
¯¯  !
}
°° 
if
±± 
(
±± 

horizontal
±± 
)
±± 
{
²² 
	locations
³³ 
.
³³ 
Add
³³ 
(
³³ 
(
³³ 
r
³³ 
,
³³ 
c
³³ 
,
³³ 
false
³³ 
)
³³  
)
³³  !
;
³³! "
}
´´ 
}
µµ 
}
¶¶ 
var
·· 
(
·· 
Row
·· 

,
··
 
Column
·· 
,
·· 
Vertical
·· 
)
·· 
=
·· 
	locations
··  )
[
··) *
Random
··* 0
.
··0 1
Shared
··1 7
.
··7 8
Next
··8 <
(
··< =
$num
··= >
,
··> ?
	locations
··@ I
.
··I J
Count
··J O
)
··O P
]
··P Q
;
··Q R
for
¸¸ 
(
¸¸ 
int
¸¸ 

i
¸¸ 
=
¸¸ 
$num
¸¸ 
;
¸¸ 
i
¸¸ 
<
¸¸ 
size
¸¸ 
;
¸¸ 
i
¸¸ 
++
¸¸ 
)
¸¸  
{
¹¹ 
offenseShips
ºº 
[
ºº 
Row
ºº 
+
ºº 
(
ºº 
Vertical
ºº 
?
ºº  !
i
ºº" #
:
ºº$ %
$num
ºº& '
)
ºº' (
,
ºº( )
Column
ºº* 0
+
ºº1 2
(
ºº3 4
!
ºº4 5
Vertical
ºº5 =
?
ºº> ?
i
ºº@ A
:
ººB C
$num
ººD E
)
ººE F
]
ººF G
=
ººH I
ship
ººJ N
;
ººN O
}
»» 
}
¼¼ 
}½½ 
bool¿¿ 
Won
¿¿ 
(
¿¿ 	
Ship
¿¿	 
[
¿¿ 
,
¿¿ 
]
¿¿ 
	shipBoard
¿¿ 
,
¿¿ 
bool
¿¿  
[
¿¿  !
,
¿¿! "
]
¿¿" #
	shotBoard
¿¿$ -
)
¿¿- .
{ÀÀ 
for
ÁÁ 
(
ÁÁ 
int
ÁÁ 	
r
ÁÁ
 
=
ÁÁ 
$num
ÁÁ 
;
ÁÁ 
r
ÁÁ 
<
ÁÁ 
boardHeight
ÁÁ  
;
ÁÁ  !
r
ÁÁ" #
++
ÁÁ# %
)
ÁÁ% &
{
ÂÂ 
for
ÃÃ 
(
ÃÃ 
int
ÃÃ 

c
ÃÃ 
=
ÃÃ 
$num
ÃÃ 
;
ÃÃ 
c
ÃÃ 
<
ÃÃ 

boardWidth
ÃÃ  
;
ÃÃ  !
c
ÃÃ" #
++
ÃÃ# %
)
ÃÃ% &
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
	shipBoard
ÅÅ 
[
ÅÅ 
r
ÅÅ 
,
ÅÅ 
c
ÅÅ 
]
ÅÅ 
is
ÅÅ 
not
ÅÅ 
$num
ÅÅ 
&&
ÅÅ  "
!
ÅÅ# $
	shotBoard
ÅÅ$ -
[
ÅÅ- .
r
ÅÅ. /
,
ÅÅ/ 0
c
ÅÅ1 2
]
ÅÅ2 3
)
ÅÅ3 4
{
ÆÆ 
return
ÇÇ 

false
ÇÇ 
;
ÇÇ 
}
ÈÈ 
}
ÉÉ 
}
ÊÊ 
return
ËË 
true
ËË 
;
ËË 
}ÌÌ 
voidÎÎ 
RenderMainView
ÎÎ 
(
ÎÎ 
bool
ÎÎ 
showEnemyShips
ÎÎ '
=
ÎÎ( )
false
ÎÎ* /
)
ÎÎ/ 0
{ÏÏ 
Console
ÐÐ 
.
ÐÐ 	
CursorVisible
ÐÐ	 
=
ÐÐ 
false
ÐÐ 
;
ÐÐ 
if
ÑÑ 
(
ÑÑ 
OperatingSystem
ÑÑ 
.
ÑÑ 
	IsWindows
ÑÑ 
(
ÑÑ 
)
ÑÑ  
&&
ÑÑ! #
Console
ÑÑ$ +
.
ÑÑ+ ,
BufferHeight
ÑÑ, 8
!=
ÑÑ9 ;
Console
ÑÑ< C
.
ÑÑC D
WindowHeight
ÑÑD P
)
ÑÑP Q
{
ÒÒ 
Console
ÓÓ 	
.
ÓÓ	 

BufferHeight
ÓÓ
 
=
ÓÓ 
Console
ÓÓ  
.
ÓÓ  !
WindowHeight
ÓÓ! -
;
ÓÓ- .
}
ÔÔ 
if
ÕÕ 
(
ÕÕ 
OperatingSystem
ÕÕ 
.
ÕÕ 
	IsWindows
ÕÕ 
(
ÕÕ 
)
ÕÕ  
&&
ÕÕ! #
Console
ÕÕ$ +
.
ÕÕ+ ,
BufferWidth
ÕÕ, 7
!=
ÕÕ8 :
Console
ÕÕ; B
.
ÕÕB C
WindowWidth
ÕÕC N
)
ÕÕN O
{
ÖÖ 
Console
×× 	
.
××	 

BufferWidth
××
 
=
×× 
Console
×× 
.
××  
WindowWidth
××  +
;
××+ ,
}
ØØ 
if
ÙÙ 
(
ÙÙ 
consoleSize
ÙÙ 
!=
ÙÙ 
ConsoleSize
ÙÙ 
(
ÙÙ  
)
ÙÙ  !
)
ÙÙ! "
{
ÚÚ 
Console
ÛÛ 	
.
ÛÛ	 

Clear
ÛÛ
 
(
ÛÛ 
)
ÛÛ 
;
ÛÛ 
consoleSize
ÜÜ 
=
ÜÜ 
ConsoleSize
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
ÝÝ 
Console
ßß 
.
ßß 	
SetCursorPosition
ßß	 
(
ßß 
$num
ßß 
,
ßß 
$num
ßß 
)
ßß  
;
ßß  !
Console
àà 
.
àà 	
	WriteLine
àà	 
(
àà 
)
àà 
;
àà 
Console
áá 
.
áá 	
	WriteLine
áá	 
(
áá 
$str
áá !
)
áá! "
;
áá" #
Console
ââ 
.
ââ 	
	WriteLine
ââ	 
(
ââ 
)
ââ 
;
ââ 
for
ãã 
(
ãã 
int
ãã 	
r
ãã
 
=
ãã 
$num
ãã 
;
ãã 
r
ãã 
<
ãã 
boardHeight
ãã  
*
ãã! "
$num
ãã# $
+
ãã% &
$num
ãã' (
;
ãã( )
r
ãã* +
++
ãã+ -
)
ãã- .
{
ää 
int
åå 
br
åå 
=
åå	 

(
åå 
r
åå 
-
åå 
$num
åå 
)
åå 
/
åå 
$num
åå 
;
åå 
Console
ææ 	
.
ææ	 

Write
ææ
 
(
ææ 
$str
ææ 
)
ææ 
;
ææ 
for
çç 
(
çç 
int
çç 

c
çç 
=
çç 
$num
çç 
;
çç 
c
çç 
<
çç 

boardWidth
çç  
*
çç! "
$num
çç# $
+
çç% &
$num
çç' (
;
çç( )
c
çç* +
++
çç+ -
)
çç- .
{
èè 
int
éé 
bc
éé 	
=
éé
 
(
éé 
c
éé 
-
éé 
$num
éé 
)
éé 
/
éé 
$num
éé 
;
éé 
bool
êê 
v
êê 	
=
êê
 
br
êê 
+
êê 
$num
êê 
<
êê 
boardHeight
êê  
&&
êê! #
defenseShips
êê$ 0
[
êê0 1
br
êê1 3
,
êê3 4
bc
êê5 7
]
êê7 8
==
êê9 ;
defenseShips
êê< H
[
êêH I
br
êêI K
+
êêL M
$num
êêN O
,
êêO P
bc
êêQ S
]
êêS T
;
êêT U
bool
ëë 
h
ëë 	
=
ëë
 
bc
ëë 
+
ëë 
$num
ëë 
<
ëë 

boardWidth
ëë 
&&
ëë  "
defenseShips
ëë# /
[
ëë/ 0
br
ëë0 2
,
ëë2 3
bc
ëë4 6
]
ëë6 7
==
ëë8 :
defenseShips
ëë; G
[
ëëG H
br
ëëH J
,
ëëJ K
bc
ëëL N
+
ëëO P
$num
ëëQ R
]
ëëR S
;
ëëS T
if
íí 
(
íí 
placing
íí 
&&
íí 
	placement
îî 
.
îî 
Vertical
îî 
&&
îî 
bc
ïï 
==
ïï 	
	placement
ïï
 
.
ïï 
Column
ïï 
&&
ïï 
br
ðð 
>=
ðð 	
	placement
ðð
 
.
ðð 
Row
ðð 
&&
ðð 
br
ññ 
<
ññ 
	placement
ññ	 
.
ññ 
Row
ññ 
+
ññ 
	placement
ññ "
.
ññ" #
Size
ññ# '
&&
ññ( *
(
òò 
c
òò 
-
òò 
$num
òò	 

)
òò
 
%
òò 
$num
òò 
is
òò 
$num
òò 
&&
òò 
!
óó 
(
óó 
br
óó 
==
óó	 
	placement
óó 
.
óó 
Row
óó 
+
óó 
	placement
óó %
.
óó% &
Size
óó& *
-
óó+ ,
$num
óó- .
&&
óó/ 1
(
óó2 3
r
óó3 4
-
óó5 6
$num
óó7 8
)
óó8 9
%
óó: ;
$num
óó< =
is
óó> @
$num
óóA B
)
óóB C
&&
óóD F
r
ôô 
is
ôô 
not
ôô	 
$num
ôô 
)
ôô 
{
õõ 
Console
öö 
.
öö 
BackgroundColor
öö 
=
öö 
IsValidPlacement
öö .
(
öö. /
)
öö/ 0
?
öö1 2
ConsoleColor
öö3 ?
.
öö? @
	DarkGreen
öö@ I
:
ööJ K
ConsoleColor
ööL X
.
ööX Y
DarkRed
ööY `
;
öö` a
}
÷÷ 
else
øø 
if
øø 

(
øø 
placing
øø 
&&
øø 
!
ùù 
	placement
ùù 
.
ùù 
Vertical
ùù 
&&
ùù 
br
úú 
==
úú 	
	placement
úú
 
.
úú 
Row
úú 
&&
úú 
bc
ûû 
>=
ûû 	
	placement
ûû
 
.
ûû 
Column
ûû 
&&
ûû 
bc
üü 
<
üü 
	placement
üü	 
.
üü 
Column
üü 
+
üü 
	placement
üü %
.
üü% &
Size
üü& *
&&
üü+ -
(
ýý 
r
ýý 
-
ýý 
$num
ýý	 

)
ýý
 
%
ýý 
$num
ýý 
is
ýý 
$num
ýý 
&&
ýý 
!
þþ 
(
þþ 
bc
þþ 
==
þþ	 
	placement
þþ 
.
þþ 
Column
þþ 
+
þþ 
	placement
þþ (
.
þþ( )
Size
þþ) -
-
þþ. /
$num
þþ0 1
&&
þþ2 4
(
þþ5 6
c
þþ6 7
-
þþ8 9
$num
þþ: ;
)
þþ; <
%
þþ= >
$num
þþ? @
is
þþA C
$num
þþD E
)
þþE F
&&
þþG I
c
ÿÿ 
is
ÿÿ 
not
ÿÿ	 
$num
ÿÿ 
)
ÿÿ 
{
 
Console
 
.
 
BackgroundColor
 
=
 
IsValidPlacement
 .
(
. /
)
/ 0
?
1 2
ConsoleColor
3 ?
.
? @
	DarkGreen
@ I
:
J K
ConsoleColor
L X
.
X Y
DarkRed
Y `
;
` a
}
 
else
 
if
 

(
 
defenseShips
 
[
 
br
 
,
 
bc
 
]
  
is
! #
not
$ '
$num
( )
&&
* ,
(
 
(
 
r
 
-
 	
$num

 
)
 
%
 
$num
 
is
 
$num
 
||
 
(
 
(
 
r
 
-
 
$num
  
)
  !
%
" #
$num
$ %
is
& (
$num
) *
&&
+ -
v
. /
)
/ 0
)
0 1
&&
2 4
(
 
(
 
c
 
-
 	
$num

 
)
 
%
 
$num
 
is
 
$num
 
||
 
(
 
(
 
c
 
-
 
$num
  
)
  !
%
" #
$num
$ %
is
& (
$num
) *
&&
+ -
h
. /
)
/ 0
)
0 1
)
1 2
{
 
Console
 
.
 
BackgroundColor
 
=
 
ConsoleColor
 *
.
* +
DarkGray
+ 3
;
3 4
}
 
Console
 

.

 
Write
 
(
 
RenderBoardTile
  
(
  !
r
! "
,
" #
c
$ %
,
% &
defense
' .
,
. /
defenseShips
0 <
)
< =
)
= >
;
> ?
if
 
(
 
Console
 
.
 
BackgroundColor
 
is
 !
not
" %
ConsoleColor
& 2
.
2 3
Black
3 8
)
8 9
{
 
Console
 
.
 
BackgroundColor
 
=
 
ConsoleColor
 *
.
* +
Black
+ 0
;
0 1
}
 
}
 
Console
 	
.
	 

Write

 
(
 
$str
 
)
 
;
 
for
 
(
 
int
 

c
 
=
 
$num
 
;
 
c
 
<
 

boardWidth
  
*
! "
$num
# $
+
% &
$num
' (
;
( )
c
* +
++
+ -
)
- .
{
 
int
 
bc
 	
=

 
(
 
c
 
-
 
$num
 
)
 
/
 
$num
 
;
 
bool
 
v
 	
=

 
br
 
+
 
$num
 
<
 
boardHeight
  
&&
! #
offenseShips
$ 0
[
0 1
br
1 3
,
3 4
bc
5 7
]
7 8
==
9 ;
offenseShips
< H
[
H I
br
I K
+
L M
$num
N O
,
O P
bc
Q S
]
S T
;
T U
bool
 
h
 	
=

 
bc
 
+
 
$num
 
<
 

boardWidth
 
&&
  "
offenseShips
# /
[
/ 0
br
0 2
,
2 3
bc
4 6
]
6 7
==
8 :
offenseShips
; G
[
G H
br
H J
,
J K
bc
L N
+
O P
$num
Q R
]
R S
;
S T
if
 
(
 
showEnemyShips
 
&&
 
offenseShips
 
[
 
br
 
,
 
bc
 
]
 
is
 
not
 
$num
  !
&&
" $
(
 
(
 
r
 
-
 	
$num

 
)
 
%
 
$num
 
is
 
$num
 
||
 
(
 
(
 
r
 
-
 
$num
  
)
  !
%
" #
$num
$ %
is
& (
$num
) *
&&
+ -
v
. /
)
/ 0
)
0 1
&&
2 4
(
 
(
 
c
 
-
 	
$num

 
)
 
%
 
$num
 
is
 
$num
 
||
 
(
 
(
 
c
 
-
 
$num
  
)
  !
%
" #
$num
$ %
is
& (
$num
) *
&&
+ -
h
. /
)
/ 0
)
0 1
)
1 2
{
 
Console
 
.
 
BackgroundColor
 
=
 
ConsoleColor
 *
.
* +
DarkGray
+ 3
;
3 4
}
 
else
 
if
 

(
 
	selecting
 
&&
 
	selection
 "
==
# %
(
& '
br
' )
,
) *
bc
+ -
)
- .
&&
/ 1
(
 
r
 
-
 
$num
	 

)

 
%
 
$num
 
is
 
$num
 
&&
 
(
 
c
 
-
 
$num
	 

)

 
%
 
$num
 
is
 
$num
 
)
 
{
 
Console
   
.
   
BackgroundColor
   
=
   
ConsoleColor
   *
.
  * +

DarkYellow
  + 5
;
  5 6
}
¡¡ 
Console
¢¢ 

.
¢¢
 
Write
¢¢ 
(
¢¢ 
RenderBoardTile
¢¢  
(
¢¢  !
r
¢¢! "
,
¢¢" #
c
¢¢$ %
,
¢¢% &
offense
¢¢' .
,
¢¢. /
offenseShips
¢¢0 <
)
¢¢< =
)
¢¢= >
;
¢¢> ?
if
££ 
(
££ 
Console
££ 
.
££ 
BackgroundColor
££ 
is
££ !
not
££" %
ConsoleColor
££& 2
.
££2 3
Black
££3 8
)
££8 9
{
¤¤ 
Console
¥¥ 
.
¥¥ 
BackgroundColor
¥¥ 
=
¥¥ 
ConsoleColor
¥¥ *
.
¥¥* +
Black
¥¥+ 0
;
¥¥0 1
}
¦¦ 
}
§§ 
Console
¨¨ 	
.
¨¨	 

	WriteLine
¨¨
 
(
¨¨ 
)
¨¨ 
;
¨¨ 
}
©© 
renderMessage
ªª 
?
ªª 
.
ªª 
Invoke
ªª 
(
ªª 
)
ªª 
;
ªª 
string
¬¬ 
RenderBoardTile
¬¬ 
(
¬¬ 
int
¬¬ 
r
¬¬ 
,
¬¬ 
int
¬¬ "
c
¬¬# $
,
¬¬$ %
bool
¬¬& *
[
¬¬* +
,
¬¬+ ,
]
¬¬, -
shots
¬¬. 3
,
¬¬3 4
Ship
¬¬5 9
[
¬¬9 :
,
¬¬: ;
]
¬¬; <
ships
¬¬= B
)
¬¬B C
{
­­ 
const
®® 
string
®® 
hit
®® 
=
®® 
$str
®® 
;
®® 
const
¯¯ 
string
¯¯ 
miss
¯¯ 
=
¯¯ 
$str
¯¯ 
;
¯¯ 
const
°° 
string
°° 
open
°° 
=
°° 
$str
°° 
;
°° 
const
±± 
int
±± 
w
±± 
=
±± 

boardWidth
±± 
*
±± 
$num
±± 
;
±± 
const
²² 
int
²² 
h
²² 
=
²² 
boardHeight
²² 
*
²² 
$num
²² 
;
²²  
return
³³ 
(
³³	 

r
³³
 
,
³³ 
c
³³ 
,
³³ 
r
³³ 
%
³³ 
$num
³³ 
,
³³ 
c
³³ 
%
³³ 
$num
³³ 
)
³³ 
switch
³³ $
{
´´ 
(
µµ 
$num
µµ 
,
µµ 
$num
µµ 
,
µµ 	
_
µµ
 
,
µµ 
_
µµ 
)
µµ 
=>
µµ 
$str
µµ 
,
µµ 
(
¶¶ 
h
¶¶ 
,
¶¶ 
$num
¶¶ 
,
¶¶ 	
_
¶¶
 
,
¶¶ 
_
¶¶ 
)
¶¶ 
=>
¶¶ 
$str
¶¶ 
,
¶¶ 
(
·· 
$num
·· 
,
·· 
w
·· 
,
·· 	
_
··
 
,
·· 
_
·· 
)
·· 
=>
·· 
$str
·· 
,
·· 
(
¸¸ 
h
¸¸ 
,
¸¸ 
w
¸¸ 
,
¸¸ 	
_
¸¸
 
,
¸¸ 
_
¸¸ 
)
¸¸ 
=>
¸¸ 
$str
¸¸ 
,
¸¸ 
(
¹¹ 
$num
¹¹ 
,
¹¹ 
_
¹¹ 
,
¹¹ 	
$num
¹¹
 
,
¹¹ 
$num
¹¹ 
)
¹¹ 
=>
¹¹ 
$str
¹¹ 
,
¹¹ 
(
ºº 
_
ºº 
,
ºº 
$num
ºº 
,
ºº 	
$num
ºº
 
,
ºº 
$num
ºº 
)
ºº 
=>
ºº 
$str
ºº 
,
ºº 
(
»» 
_
»» 
,
»» 
w
»» 
,
»» 	
$num
»»
 
,
»» 
_
»» 
)
»» 
=>
»» 
$str
»» 
,
»» 
(
¼¼ 
h
¼¼ 
,
¼¼ 
_
¼¼ 
,
¼¼ 	
_
¼¼
 
,
¼¼ 
$num
¼¼ 
)
¼¼ 
=>
¼¼ 
$str
¼¼ 
,
¼¼ 
(
½½ 
_
½½ 
,
½½ 
_
½½ 
,
½½ 	
$num
½½
 
,
½½ 
$num
½½ 
)
½½ 
=>
½½ 
$str
½½ 
,
½½ 
(
¾¾ 
_
¾¾ 
,
¾¾ 
_
¾¾ 
,
¾¾ 	
$num
¾¾
 
,
¾¾ 
$num
¾¾ 
)
¾¾ 
=>
¾¾ 
$str
¾¾ 
,
¾¾ 
(
¿¿ 
_
¿¿ 
,
¿¿ 
_
¿¿ 
,
¿¿ 	
$num
¿¿
 
,
¿¿ 
$num
¿¿ 
)
¿¿ 
=>
¿¿ 
$str
¿¿ 
,
¿¿ 
_
ÀÀ 
=>
ÀÀ 
shots
ÁÁ 	
[
ÁÁ	 

(
ÁÁ
 
r
ÁÁ 
-
ÁÁ 
$num
ÁÁ 
)
ÁÁ 
/
ÁÁ 
$num
ÁÁ 
,
ÁÁ 
(
ÁÁ 
c
ÁÁ 
-
ÁÁ 
$num
ÁÁ 
)
ÁÁ 
/
ÁÁ  
$num
ÁÁ! "
]
ÁÁ" #
?
ÂÂ 
(
ÂÂ 
ships
ÂÂ 
[
ÂÂ 
(
ÂÂ 
r
ÂÂ 
-
ÂÂ 
$num
ÂÂ 
)
ÂÂ 
/
ÂÂ 
$num
ÂÂ 
,
ÂÂ 
(
ÂÂ 
c
ÂÂ 
-
ÂÂ 
$num
ÂÂ  !
)
ÂÂ! "
/
ÂÂ# $
$num
ÂÂ% &
]
ÂÂ& '
is
ÂÂ( *
not
ÂÂ+ .
$num
ÂÂ/ 0
?
ÃÃ 
hit
ÃÃ 
:
ÄÄ 
miss
ÄÄ 
)
ÄÄ 
:
ÅÅ 
open
ÅÅ 
,
ÅÅ 
}
ÆÆ 
;
ÆÆ 
}
ÇÇ 
}ÈÈ 
voidÊÊ 
GetEnterOrEscape
ÊÊ 
(
ÊÊ 
)
ÊÊ 
{ËË 
GetEnterOrEscapeÌÌ 
:
ÌÌ 
switch
ÍÍ 
(
ÍÍ 	
Console
ÍÍ	 
.
ÍÍ 
ReadKey
ÍÍ 
(
ÍÍ 
true
ÍÍ 
)
ÍÍ 
.
ÍÍ 
Key
ÍÍ "
)
ÍÍ" #
{
ÎÎ 
case
ÏÏ 

ConsoleKey
ÏÏ 
.
ÏÏ 
Enter
ÏÏ 
:
ÏÏ 
break
ÏÏ 
;
ÏÏ 
case
ÐÐ 

ConsoleKey
ÐÐ 
.
ÐÐ 
Escape
ÐÐ 
:
ÐÐ 
escape
ÐÐ  
=
ÐÐ! "
true
ÐÐ# '
;
ÐÐ' (
break
ÐÐ) .
;
ÐÐ. /
default
ÑÑ 	
:
ÑÑ	 

goto
ÑÑ 
GetEnterOrEscape
ÑÑ  
;
ÑÑ  !
}
ÒÒ 
}ÓÓ 
(ÕÕ 
int
ÕÕ 
BufferHeight
ÕÕ 
,
ÕÕ 
int
ÕÕ 
BufferWidth
ÕÕ "
,
ÕÕ" #
int
ÕÕ$ '
WindowHeight
ÕÕ( 4
,
ÕÕ4 5
int
ÕÕ6 9
WindowWidth
ÕÕ: E
)
ÕÕE F
ConsoleSize
ÕÕG R
(
ÕÕR S
)
ÕÕS T
=>
ÕÕU W
(
ÖÖ 
Console
ÖÖ 	
.
ÖÖ	 

BufferHeight
ÖÖ
 
,
ÖÖ 
Console
ÖÖ 
.
ÖÖ  
BufferWidth
ÖÖ  +
,
ÖÖ+ ,
Console
ÖÖ- 4
.
ÖÖ4 5
WindowHeight
ÖÖ5 A
,
ÖÖA B
Console
ÖÖC J
.
ÖÖJ K
WindowWidth
ÖÖK V
)
ÖÖV W
;
ÖÖW X
enumØØ 
Ship
ØØ 	
{ÙÙ 
[
ÚÚ 
Tag
ÚÚ 
(
ÚÚ 
$str
ÚÚ 
,
ÚÚ 
$num
ÚÚ 
)
ÚÚ 
]
ÚÚ 
Carrier
ÚÚ 
=
ÚÚ 
$num
ÚÚ 
,
ÚÚ 
[
ÛÛ 
Tag
ÛÛ 
(
ÛÛ 
$str
ÛÛ 
,
ÛÛ 
$num
ÛÛ 
)
ÛÛ 
]
ÛÛ 

Battleship
ÛÛ 
=
ÛÛ 
$num
ÛÛ  
,
ÛÛ  !
[
ÜÜ 
Tag
ÜÜ 
(
ÜÜ 
$str
ÜÜ 
,
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
]
ÜÜ 
Cruiser
ÜÜ 
=
ÜÜ 
$num
ÜÜ 
,
ÜÜ 
[
ÝÝ 
Tag
ÝÝ 
(
ÝÝ 
$str
ÝÝ 
,
ÝÝ 
$num
ÝÝ 
)
ÝÝ 
]
ÝÝ 
	Submarine
ÝÝ 
=
ÝÝ 
$num
ÝÝ 
,
ÝÝ  
[
ÞÞ 
Tag
ÞÞ 
(
ÞÞ 
$str
ÞÞ 
,
ÞÞ 
$num
ÞÞ 
)
ÞÞ 
]
ÞÞ 
	Destroyer
ÞÞ 
=
ÞÞ 
$num
ÞÞ 
,
ÞÞ  
}ßß 
Ê»
QC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Checkers\Board.cs
	namespace 	
Checkers
 
; 
public 
class 
Board 
{ 
public 
List 
< 
Piece 
> 
Pieces 
{ 
get  
;  !
}" #
public 
Piece 
? 
	Aggressor 
{ 
get 
; 
set  #
;# $
}% &
public		 
Piece		 
?		 
this		 
[		 
int		 
x		 
,		 
int		 
y		  
]		  !
=>		" $
Pieces

 
.

 	
FirstOrDefault

	 
(

 
piece

 
=>

  
piece

! &
.

& '
X

' (
==

) +
x

, -
&&

. 0
piece

1 6
.

6 7
Y

7 8
==

9 ;
y

< =
)

= >
;

> ?
public 
Board 
( 
) 
{ 
	Aggressor 
= 
null 
; 
Pieces 
=	 

new 
List 
< 
Piece 
> 
{ 
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
Black, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
White, 1
}1 2
,2 3
new 
( 
) 	
{
 
NotationPosition 
= 
$str "
," #
Color$ )
=* +
White, 1
}1 2
,2 3
new   
(   
)   	
{  
 
NotationPosition   
=   
$str   "
,  " #
Color  $ )
=  * +
White  , 1
}  1 2
,  2 3
new!! 
(!! 
)!! 	
{!!
 
NotationPosition!! 
=!! 
$str!! "
,!!" #
Color!!$ )
=!!* +
White!!, 1
}!!1 2
,!!2 3
new"" 
("" 
)"" 	
{""
 
NotationPosition"" 
="" 
$str"" "
,""" #
Color""$ )
=""* +
White"", 1
}""1 2
,""2 3
new## 
(## 
)## 	
{##
 
NotationPosition## 
=## 
$str## "
,##" #
Color##$ )
=##* +
White##, 1
}##1 2
,##2 3
new$$ 
($$ 
)$$ 	
{$$
 
NotationPosition$$ 
=$$ 
$str$$ "
,$$" #
Color$$$ )
=$$* +
White$$, 1
}$$1 2
,$$2 3
new%% 
(%% 
)%% 	
{%%
 
NotationPosition%% 
=%% 
$str%% "
,%%" #
Color%%$ )
=%%* +
White%%, 1
}%%1 2
,%%2 3
new&& 
(&& 
)&& 	
{&&
 
NotationPosition&& 
=&& 
$str&& "
,&&" #
Color&&$ )
=&&* +
White&&, 1
}&&1 2
,&&2 3
new'' 
('' 
)'' 	
{''
 
NotationPosition'' 
='' 
$str'' "
,''" #
Color''$ )
=''* +
White'', 1
}''1 2
,''2 3
new(( 
((( 
)(( 	
{((
 
NotationPosition(( 
=(( 
$str(( "
,((" #
Color(($ )
=((* +
White((, 1
}((1 2
,((2 3
new)) 
()) 
))) 	
{))
 
NotationPosition)) 
=)) 
$str)) "
,))" #
Color))$ )
=))* +
White)), 1
}))1 2
}** 
;** 
}++ 
public-- 
static-- 
string-- $
ToPositionNotationString-- .
(--. /
int--/ 2
x--3 4
,--4 5
int--6 9
y--: ;
)--; <
{.. 
if// 
(// 
!// 
IsValidPosition// 
(// 
x// 
,// 
y// 
)// 
)// 
throw// #
new//$ '
ArgumentException//( 9
(//9 :
$str//: Q
)//Q R
;//R S
return00 
$"00	 
{00 
(00 
char00 
)00 
(00 
$char00 
+00 
x00 
)00 
}00 
{00 
y00 
+00  
$num00! "
}00" #
"00# $
;00$ %
}11 
public33 
static33 
(33 
int33 
X33 
,33 
int33 
Y33 
)33 !
ParsePositionNotation33 3
(333 4
string334 :
notation33; C
)33C D
{44 
if55 
(55 
notation55 
is55 
null55 
)55 
throw55 
new55 !!
ArgumentNullException55" 7
(557 8
nameof558 >
(55> ?
notation55? G
)55G H
)55H I
;55I J
notation66 

=66 
notation66 
.66 
Trim66 
(66 
)66 
.66 
ToUpper66 $
(66$ %
)66% &
;66& '
if77 
(77 
notation77 
.77 
Length77 
is77 
not77 
$num77 
||77 !
notation88 
[88 
$num88 
]88 
<88 
$char88 
||88 
$char88 
<88 
notation88 &
[88& '
$num88' (
]88( )
||88* ,
notation99 
[99 
$num99 
]99 
<99 
$char99 
||99 
$char99 
<99 
notation99 &
[99& '
$num99' (
]99( )
)99) *
throw:: 
new::	 
FormatException:: 
(:: 
$@"::  
{::  !
nameof::! '
(::' (
notation::( 0
)::0 1
}::1 2
$str::2 5
{::5 6
notation::6 >
}::> ?
$str::? N
"::N O
)::O P
;::P Q
return;; 
(;;	 

notation;;
 
[;; 
$num;; 
];; 
-;; 
$char;; 
,;; 
notation;; %
[;;% &
$num;;& '
];;' (
-;;) *
$char;;+ .
);;. /
;;;/ 0
}<< 
public>> 
static>> 
bool>> 
IsValidPosition>> #
(>># $
int>>$ '
x>>( )
,>>) *
int>>+ .
y>>/ 0
)>>0 1
=>>>2 4
$num?? 
<=?? 
x?? 
&&??	 
x?? 
<?? 
$num?? 
&&?? 
$num@@ 
<=@@ 
y@@ 
&&@@	 
y@@ 
<@@ 
$num@@ 
;@@ 
publicBB 
(BB 	
PieceBB	 
ABB 
,BB 
PieceBB 
BBB 
)BB !
GetClosestRivalPiecesBB 0
(BB0 1

PieceColorBB1 ;
priorityColorBB< I
)BBI J
{CC 
doubleDD 
minDistanceSquaredDD	 
=DD 
doubleDD $
.DD$ %
MaxValueDD% -
;DD- .
(EE 
PieceEE 
AEE	 

,EE
 
PieceEE 
BEE 
)EE 
closestRivalsEE "
=EE# $
(EE% &
nullEE& *
!EE* +
,EE+ ,
nullEE- 1
!EE1 2
)EE2 3
;EE3 4
foreachFF 	
(FF
 
PieceFF 
aFF 
inFF 
PiecesFF 
.FF 
WhereFF "
(FF" #
pieceFF# (
=>FF) +
pieceFF, 1
.FF1 2
ColorFF2 7
==FF8 :
priorityColorFF; H
)FFH I
)FFI J
{GG 
foreachHH 

(HH 
PieceHH 
bHH 
inHH 
PiecesHH 
.HH 
WhereHH #
(HH# $
pieceHH$ )
=>HH* ,
pieceHH- 2
.HH2 3
ColorHH3 8
!=HH9 ;
priorityColorHH< I
)HHI J
)HHJ K
{II 
(JJ 
intJJ 
XJJ	 

,JJ
 
intJJ 
YJJ 
)JJ 
vectorJJ 
=JJ 
(JJ 
aJJ 
.JJ 
XJJ  
-JJ! "
bJJ# $
.JJ$ %
XJJ% &
,JJ& '
aJJ( )
.JJ) *
YJJ* +
-JJ, -
bJJ. /
.JJ/ 0
YJJ0 1
)JJ1 2
;JJ2 3
doubleKK 

distanceSquaredKK 
=KK 
vectorKK #
.KK# $
XKK$ %
*KK& '
vectorKK( .
.KK. /
XKK/ 0
+KK1 2
vectorKK3 9
.KK9 :
YKK: ;
*KK< =
vectorKK> D
.KKD E
YKKE F
;KKF G
ifLL 
(LL 
distanceSquaredLL 
<LL 
minDistanceSquaredLL ,
)LL, -
{MM 
minDistanceSquaredNN 
=NN 
distanceSquaredNN )
;NN) *
closestRivalsOO 
=OO 
(OO 
aOO 
,OO 
bOO 
)OO 
;OO 
}PP 
}QQ 
}RR 
returnSS 
closestRivalsSS	 
;SS 
}TT 
publicVV 
ListVV 
<VV 
MoveVV 
>VV 
GetPossibleMovesVV #
(VV# $

PieceColorVV$ .
colorVV/ 4
)VV4 5
{WW 
ListXX 
<XX 
MoveXX 
>XX 
movesXX 
=XX 
newXX 
(XX 
)XX 
;XX 
ifYY 
(YY 
	AggressorYY 
isYY 
notYY 
nullYY 
)YY 
{ZZ 
if[[ 
([[ 
	Aggressor[[ 
.[[ 
Color[[ 
!=[[ 
color[[ 
)[[  
{\\ 
throw]] 	
new]]
 
	Exception]] 
(]] 
$"]] 
{]] 
nameof]] !
(]]! "
	Aggressor]]" +
)]]+ ,
}]], -
$str]]- =
{]]= >
nameof]]> D
(]]D E
	Aggressor]]E N
)]]N O
}]]O P
$str]]P Q
{]]Q R
nameof]]R X
(]]X Y
	Aggressor]]Y b
.]]b c
Color]]c h
)]]h i
}]]i j
$str]]j n
{]]n o
nameof]]o u
(]]u v
color]]v {
)]]{ |
}]]| }
"]]} ~
)]]~ 
;	]] Ä
}^^ 
moves__ 
.__ 	
AddRange__	 
(__ 
GetPossibleMoves__ "
(__" #
	Aggressor__# ,
)__, -
.__- .
Where__. 3
(__3 4
move__4 8
=>__9 ;
move__< @
.__@ A
PieceToCapture__A O
is__P R
not__S V
null__W [
)__[ \
)__\ ]
;__] ^
}`` 
elseaa 
{bb 
foreachcc 

(cc 
Piececc 
piececc 
incc 
Piecescc !
.cc! "
Wherecc" '
(cc' (
piececc( -
=>cc. 0
piececc1 6
.cc6 7
Colorcc7 <
==cc= ?
colorcc@ E
)ccE F
)ccF G
{dd 
movesee 	
.ee	 

AddRangeee
 
(ee 
GetPossibleMovesee #
(ee# $
pieceee$ )
)ee) *
)ee* +
;ee+ ,
}ff 
}gg 
returnhh 
moveshh	 
.hh 
Anyhh 
(hh 
movehh 
=>hh 
movehh 
.hh  
PieceToCapturehh  .
ishh/ 1
nothh2 5
nullhh6 :
)hh: ;
?ii 
movesii 

.ii
 
Whereii 
(ii 
moveii 
=>ii 
moveii 
.ii 
PieceToCaptureii ,
isii- /
notii0 3
nullii4 8
)ii8 9
.ii9 :
ToListii: @
(ii@ A
)iiA B
:jj 
movesjj 

;jj
 
}kk 
publicmm 
Listmm 
<mm 
Movemm 
>mm 
GetPossibleMovesmm #
(mm# $
Piecemm$ )
piecemm* /
)mm/ 0
{nn 
Listoo 
<oo 
Moveoo 
>oo 
movesoo 
=oo 
newoo 
(oo 
)oo 
;oo  
ValidateDiagonalMovepp 
(pp 
-pp 
$numpp 
,pp 
-pp 
$numpp 
)pp 
;pp  
ValidateDiagonalMoveqq 
(qq 
-qq 
$numqq 
,qq 
$numqq 
)qq 
;qq  
ValidateDiagonalMoverr 
(rr 
$numrr 
,rr 
-rr 
$numrr 
)rr 
;rr  
ValidateDiagonalMovess 
(ss 
$numss 
,ss 
$numss 
)ss 
;ss 
returntt 
movestt	 
.tt 
Anytt 
(tt 
movett 
=>tt 
movett 
.tt  
PieceToCapturett  .
istt/ 1
nottt2 5
nulltt6 :
)tt: ;
?uu 
movesuu 

.uu
 
Whereuu 
(uu 
moveuu 
=>uu 
moveuu 
.uu 
PieceToCaptureuu ,
isuu- /
notuu0 3
nulluu4 8
)uu8 9
.uu9 :
ToListuu: @
(uu@ A
)uuA B
:vv 
movesvv 

;vv
 
voidxx  
ValidateDiagonalMovexx 
(xx 
intxx 
dxxx  "
,xx" #
intxx$ '
dyxx( *
)xx* +
{yy 
ifzz 
(zz 
!zz 
piecezz 
.zz 
Promotedzz 
&&zz 
piecezz 
.zz  
Colorzz  %
iszz& (
Blackzz) .
&&zz/ 1
dyzz2 4
iszz5 7
-zz8 9
$numzz9 :
)zz: ;
returnzz< B
;zzB C
if{{ 
({{ 
!{{ 
piece{{ 
.{{ 
Promoted{{ 
&&{{ 
piece{{ 
.{{  
Color{{  %
is{{& (
White{{) .
&&{{/ 1
dy{{2 4
is{{5 7
$num{{8 9
){{9 :
return{{; A
;{{A B
(|| 
int|| 
X|| 	
,||	 

int|| 
Y|| 
)|| 
target|| 
=|| 
(|| 
piece|| !
.||! "
X||" #
+||$ %
dx||& (
,||( )
piece||* /
.||/ 0
Y||0 1
+||2 3
dy||4 6
)||6 7
;||7 8
if}} 
(}} 
!}} 
IsValidPosition}} 
(}} 
target}} 
.}} 
X}}  
,}}  !
target}}" (
.}}( )
Y}}) *
)}}* +
)}}+ ,
return}}- 3
;}}3 4

PieceColor~~ 
?~~ 
targetColor~~ 
=~~ 
this~~ !
[~~! "
target~~" (
.~~( )
X~~) *
,~~* +
target~~, 2
.~~2 3
Y~~3 4
]~~4 5
?~~5 6
.~~6 7
Color~~7 <
;~~< =
if 
( 
targetColor 
is 
null 
) 
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
!
ÅÅ 	
IsValidPosition
ÅÅ	 
(
ÅÅ 
target
ÅÅ 
.
ÅÅ  
X
ÅÅ  !
,
ÅÅ! "
target
ÅÅ# )
.
ÅÅ) *
Y
ÅÅ* +
)
ÅÅ+ ,
)
ÅÅ, -
return
ÅÅ. 4
;
ÅÅ4 5
Move
ÇÇ 
newMove
ÇÇ	 
=
ÇÇ 
new
ÇÇ 
(
ÇÇ 
piece
ÇÇ 
,
ÇÇ 
target
ÇÇ $
)
ÇÇ$ %
;
ÇÇ% &
moves
ÉÉ 	
.
ÉÉ	 

Add
ÉÉ
 
(
ÉÉ 
newMove
ÉÉ 
)
ÉÉ 
;
ÉÉ 
}
ÑÑ 
else
ÖÖ 
if
ÖÖ 

(
ÖÖ 
targetColor
ÖÖ 
!=
ÖÖ 
piece
ÖÖ  
.
ÖÖ  !
Color
ÖÖ! &
)
ÖÖ& '
{
ÜÜ 
(
áá 
int
áá 
X
áá	 

,
áá
 
int
áá 
Y
áá 
)
áá 
jump
áá 
=
áá 
(
áá 
piece
áá  
.
áá  !
X
áá! "
+
áá# $
$num
áá% &
*
áá' (
dx
áá) +
,
áá+ ,
piece
áá- 2
.
áá2 3
Y
áá3 4
+
áá5 6
$num
áá7 8
*
áá9 :
dy
áá; =
)
áá= >
;
áá> ?
if
àà 
(
àà 
!
àà 	
IsValidPosition
àà	 
(
àà 
jump
àà 
.
àà 
X
àà 
,
àà  
jump
àà! %
.
àà% &
Y
àà& '
)
àà' (
)
àà( )
return
àà* 0
;
àà0 1

PieceColor
ââ 
?
ââ 
	jumpColor
ââ 
=
ââ 
this
ââ  
[
ââ  !
jump
ââ! %
.
ââ% &
X
ââ& '
,
ââ' (
jump
ââ) -
.
ââ- .
Y
ââ. /
]
ââ/ 0
?
ââ0 1
.
ââ1 2
Color
ââ2 7
;
ââ7 8
if
ää 
(
ää 
	jumpColor
ää 
is
ää 
not
ää 
null
ää 
)
ää 
return
ää %
;
ää% &
Move
ãã 
attack
ãã	 
=
ãã 
new
ãã 
(
ãã 
piece
ãã 
,
ãã 
jump
ãã !
,
ãã! "
this
ãã# '
[
ãã' (
target
ãã( .
.
ãã. /
X
ãã/ 0
,
ãã0 1
target
ãã2 8
.
ãã8 9
Y
ãã9 :
]
ãã: ;
)
ãã; <
;
ãã< =
moves
åå 	
.
åå	 

Add
åå
 
(
åå 
attack
åå 
)
åå 
;
åå 
}
çç 
}
éé 
}
èè 
public
íí 
Move
íí 
?
íí 
ValidateMove
íí 
(
íí 

PieceColor
íí %
color
íí& +
,
íí+ ,
(
íí- .
int
íí. 1
X
íí2 3
,
íí3 4
int
íí5 8
Y
íí9 :
)
íí: ;
from
íí< @
,
íí@ A
(
ííB C
int
ííC F
X
ííG H
,
ííH I
int
ííJ M
Y
ííN O
)
ííO P
to
ííQ S
)
ííS T
{
ìì 
Piece
îî 
?
îî 
piece
îî	 
=
îî 
this
îî 
[
îî 
from
îî 
.
îî 
X
îî 
,
îî 
from
îî "
.
îî" #
Y
îî# $
]
îî$ %
;
îî% &
if
ïï 
(
ïï 
piece
ïï 
is
ïï 
null
ïï 
)
ïï 
{
ññ 
return
óó 	
null
óó
 
;
óó 
}
òò 
foreach
ôô 	
(
ôô
 
Move
ôô 
move
ôô 
in
ôô 
GetPossibleMoves
ôô (
(
ôô( )
color
ôô) .
)
ôô. /
)
ôô/ 0
{
öö 
if
õõ 
(
õõ 
(
õõ 
move
õõ 
.
õõ 
PieceToMove
õõ 
.
õõ 
X
õõ 
,
õõ 
move
õõ  
.
õõ  !
PieceToMove
õõ! ,
.
õõ, -
Y
õõ- .
)
õõ. /
==
õõ0 2
from
õõ3 7
&&
õõ8 :
move
õõ; ?
.
õõ? @
To
õõ@ B
==
õõC E
to
õõF H
)
õõH I
{
úú 
return
ùù 

move
ùù 
;
ùù 
}
ûû 
}
üü 
return
†† 
null
††	 
;
†† 
}
°° 
public
££ 
static
££ 
bool
££ 
	IsTowards
££ 
(
££ 
Move
££ "
move
££# '
,
££' (
Piece
££) .
piece
££/ 4
)
££4 5
{
§§ 
(
•• 
int
•• 
Dx
•• 	
,
••	 

int
•• 
Dy
•• 
)
•• 
a
•• 
=
•• 
(
•• 
move
•• 
.
•• 
PieceToMove
•• (
.
••( )
X
••) *
-
••+ ,
piece
••- 2
.
••2 3
X
••3 4
,
••4 5
move
••6 :
.
••: ;
PieceToMove
••; F
.
••F G
Y
••G H
-
••I J
piece
••K P
.
••P Q
Y
••Q R
)
••R S
;
••S T
int
¶¶ 
a_distanceSquared
¶¶ 
=
¶¶ 
a
¶¶ 
.
¶¶ 
Dx
¶¶ 
*
¶¶  
a
¶¶! "
.
¶¶" #
Dx
¶¶# %
+
¶¶& '
a
¶¶( )
.
¶¶) *
Dy
¶¶* ,
*
¶¶- .
a
¶¶/ 0
.
¶¶0 1
Dy
¶¶1 3
;
¶¶3 4
(
ßß 
int
ßß 
Dx
ßß 	
,
ßß	 

int
ßß 
Dy
ßß 
)
ßß 
b
ßß 
=
ßß 
(
ßß 
move
ßß 
.
ßß 
To
ßß 
.
ßß  
X
ßß  !
-
ßß" #
piece
ßß$ )
.
ßß) *
X
ßß* +
,
ßß+ ,
move
ßß- 1
.
ßß1 2
To
ßß2 4
.
ßß4 5
Y
ßß5 6
-
ßß7 8
piece
ßß9 >
.
ßß> ?
Y
ßß? @
)
ßß@ A
;
ßßA B
int
®® 
b_distanceSquared
®® 
=
®® 
b
®® 
.
®® 
Dx
®® 
*
®®  
b
®®! "
.
®®" #
Dx
®®# %
+
®®& '
b
®®( )
.
®®) *
Dy
®®* ,
*
®®- .
b
®®/ 0
.
®®0 1
Dy
®®1 3
;
®®3 4
return
©© 
b_distanceSquared
©©	 
<
©© 
a_distanceSquared
©© .
;
©©. /
}
™™ 
}´´ ¸5
PC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Checkers\Game.cs
	namespace 	
Checkers
 
; 
public 
class 
Game 
{ 
private 
const	 
int 
PiecesPerColor !
=" #
$num$ &
;& '
public 

PieceColor 
Turn 
{ 
get 
; 
private &
set' *
;* +
}, -
public 
Board 
Board 
{ 
get 
; 
} 
public		 

PieceColor		 
?		 
Winner		 
{		 
get		  
;		  !
private		" )
set		* -
;		- .
}		/ 0
public

 
List

 
<

 
Player

 
>

 
Players

 
{

 
get

 "
;

" #
}

$ %
public 
Game 
( 
int 
humanPlayerCount !
)! "
{ 
if 
( 
humanPlayerCount 
< 
$num 
|| 
$num 
<  !
humanPlayerCount" 2
)2 3
throw4 9
new: ='
ArgumentOutOfRangeException> Y
(Y Z
nameofZ `
(` a
humanPlayerCounta q
)q r
)r s
;s t
Board 
= 	
new
 
Board 
( 
) 
; 
Players 	
=
 
new 
( 
) 
{ 
new 
Player 
( 
humanPlayerCount 
>= !
$num" #
,# $
Black% *
)* +
,+ ,
new 
Player 
( 
humanPlayerCount 
>= !
$num" #
,# $
White% *
)* +
,+ ,
} 
; 
Turn 
= 
Black	 
; 
Winner 
=	 

null 
; 
} 
public 
void 
PerformMove 
( 
Move 
move "
)" #
{ 
( 
move 
. 
PieceToMove 
. 
X 
, 
move 
. 
PieceToMove '
.' (
Y( )
)) *
=+ ,
move- 1
.1 2
To2 4
;4 5
if 
( 
( 
move 
. 
PieceToMove 
. 
Color 
is  
Black! &
&&' )
move* .
.. /
To/ 1
.1 2
Y2 3
is4 6
$num7 8
)8 9
||: <
( 
move 
. 	
PieceToMove	 
. 
Color 
is 
White #
&&$ &
move' +
.+ ,
To, .
.. /
Y/ 0
is1 3
$num4 5
)5 6
)6 7
{ 
move 
. 
PieceToMove 
. 
Promoted 
= 
true #
;# $
}   
if!! 
(!! 
move!! 

.!!
 
PieceToCapture!! 
is!! 
not!!  
null!!! %
)!!% &
{"" 
Board## 
.## 	
Pieces##	 
.## 
Remove## 
(## 
move## 
.## 
PieceToCapture## *
)##* +
;##+ ,
}$$ 
if%% 
(%% 
move%% 

.%%
 
PieceToCapture%% 
is%% 
not%%  
null%%! %
&&%%& (
Board&& 
.&& 	
GetPossibleMoves&&	 
(&& 
move&& 
.&& 
PieceToMove&& *
)&&* +
.&&+ ,
Any&&, /
(&&/ 0
m&&0 1
=>&&2 4
m&&5 6
.&&6 7
PieceToCapture&&7 E
is&&F H
not&&I L
null&&M Q
)&&Q R
)&&R S
{'' 
Board(( 
.(( 	
	Aggressor((	 
=(( 
move(( 
.(( 
PieceToMove(( %
;((% &
})) 
else** 
{++ 
Board,, 
.,, 	
	Aggressor,,	 
=,, 
null,, 
;,, 
Turn-- 
=-- 	
Turn--
 
is-- 
Black-- 
?-- 
White-- 
:--  !
Black--" '
;--' (
}.. 
CheckForWinner// 
(// 
)// 
;// 
}00 
public22 
void22 
CheckForWinner22 
(22 
)22 
{33 
if44 
(44 
!44 
Board44 
.44 
Pieces44 
.44 
Any44 
(44 
piece44 
=>44  
piece44! &
.44& '
Color44' ,
is44- /
Black440 5
)445 6
)446 7
{55 
Winner66 	
=66
 
White66 
;66 
}77 
if88 
(88 
!88 
Board88 
.88 
Pieces88 
.88 
Any88 
(88 
piece88 
=>88  
piece88! &
.88& '
Color88' ,
is88- /
White880 5
)885 6
)886 7
{99 
Winner:: 	
=::
 
Black:: 
;:: 
};; 
if<< 
(<< 
Winner<< 
is<< 
null<< 
&&<< 
Board<< 
.<< 
GetPossibleMoves<< .
(<<. /
Turn<</ 3
)<<3 4
.<<4 5
Count<<5 :
is<<; =
$num<<> ?
)<<? @
{== 
Winner>> 	
=>>
 
Turn>> 
is>> 
Black>> 
?>> 
White>> !
:>>" #
Black>>$ )
;>>) *
}?? 
}@@ 
publicBB 
intBB 

TakenCountBB 
(BB 

PieceColorBB !
colourBB" (
)BB( )
=>BB* ,
PiecesPerColorCC 
-CC 
BoardCC 
.CC 
PiecesCC 
.CC  
CountCC  %
(CC% &
pieceCC& +
=>CC, .
pieceCC/ 4
.CC4 5
ColorCC5 :
==CC; =
colourCC> D
)CCD E
;CCE F
}DD Ü
PC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Checkers\Move.cs
	namespace 	
Checkers
 
; 
public 
class 
Move 
{ 
public 
Piece 
PieceToMove 
{ 
get 
;  
set! $
;$ %
}& '
public 
( 	
int	 
X 
, 
int 
Y 
) 
To 
{ 
get 
;  
set! $
;$ %
}& '
public		 
Piece		 
?		 
PieceToCapture		 
{		 
get		  #
;		# $
set		% (
;		( )
}		* +
public 
Move 
( 
Piece 
pieceToMove 
, 
(  !
int! $
X% &
,& '
int( +
Y, -
)- .
to/ 1
,1 2
Piece3 8
?8 9
pieceToCapture: H
=I J
nullK O
)O P
{ 
PieceToMove 
= 
pieceToMove 
; 
To 
= 
to 	
;	 

PieceToCapture 
= 
pieceToCapture !
;! "
} 
} ‚

QC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Checkers\Piece.cs
	namespace 	
Checkers
 
; 
public 
class 
Piece 
{ 
public 
int 
X 
{ 
get 
; 
set 
; 
} 
public 
int 
Y 
{ 
get 
; 
set 
; 
} 
public		 
string		 
NotationPosition		 
{

 
get 
=> 
Board	 
. $
ToPositionNotationString '
(' (
X( )
,) *
Y+ ,
), -
;- .
set 
=> 
(	 

X
 
, 
Y 
) 
= 
Board 
. !
ParsePositionNotation -
(- .
value. 3
)3 4
;4 5
} 
public 

PieceColor 
Color 
{ 
get 
; 
init  $
;$ %
}& '
public 
bool 
Promoted 
{ 
get 
; 
set  
;  !
}" #
} Ó
VC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Checkers\PieceColor.cs
	namespace 	
Checkers
 
; 
public 
enum 

PieceColor 
{ 
Black 
= 
$num	 

,
 
White 
= 
$num	 

,
 
} ®
RC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Checkers\Player.cs
	namespace 	
Checkers
 
; 
public 
class 
Player 
{ 
public 
bool 
IsHuman 
{ 
get 
; 
} 
public 

PieceColor 
Color 
{ 
get 
; 
}  !
public 
Player 
( 
bool 
isHuman 
, 

PieceColor '
color( -
)- .
{		 
IsHuman

 	
=


 
isHuman

 
;

 
Color 
= 	
color
 
; 
} 
} î≈
SC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Checkers\Program.cs
	Exception 	
?	 

	exception 
= 
null 
; 
Encoding 
encoding	 
= 
Console 
. 
OutputEncoding *
;* +
try 
{ 
Console 
. 	
OutputEncoding	 
= 
Encoding "
." #
UTF8# '
;' (
Game 
game 

= '
ShowIntroScreenAndGetOption (
(( )
)) *
;* +
Console		 
.		 	
Clear			 
(		 
)		 
;		 
RunGameLoop

 
(

 
game

 
)

 
;

 
RenderGameState 
( 
game 
, 
promptPressKey %
:% &
true' +
)+ ,
;, -
Console 
. 	
ReadKey	 
( 
true 
) 
; 
} 
catch 
( 
	Exception 
e 
) 
{ 
	exception 

= 
e 
; 
throw 
; 
} 
finally 
{ 
Console 
. 	
OutputEncoding	 
= 
encoding "
;" #
Console 
. 	
CursorVisible	 
= 
true 
; 
Console 
. 	
Clear	 
( 
) 
; 
Console 
. 	
	WriteLine	 
( 
	exception 
? 
. 
ToString &
(& '
)' (
??) +
$str, B
)B C
;C D
} 
Game '
ShowIntroScreenAndGetOption  
(  !
)! "
{ 
Console 
. 	
Clear	 
( 
) 
; 
Console 
. 	
	WriteLine	 
( 
) 
; 
Console 
. 	
	WriteLine	 
( 
$str 
)  
;  !
Console   
.   	
	WriteLine  	 
(   
)   
;   
Console!! 
.!! 	
	WriteLine!!	 
(!! 
$str!! c
)!!c d
;!!d e
Console"" 
."" 	
	WriteLine""	 
("" 
$str"" b
)""b c
;""c d
Console## 
.## 	
	WriteLine##	 
(## 
$str## a
)##a b
;##b c
Console$$ 
.$$ 	
	WriteLine$$	 
($$ 
$str$$ "
)$$" #
;$$# $
Console%% 
.%% 	
	WriteLine%%	 
(%% 
)%% 
;%% 
Console&& 
.&& 	
	WriteLine&&	 
(&& 
$str&& c
)&&c d
;&&d e
Console'' 
.'' 	
	WriteLine''	 
('' 
$str'' d
)''d e
;''e f
Console(( 
.(( 	
	WriteLine((	 
((( 
$str(( a
)((a b
;((b c
Console)) 
.)) 	
	WriteLine))	 
()) 
$str))  
)))  !
;))! "
Console** 
.** 	
	WriteLine**	 
(** 
)** 
;** 
Console++ 
.++ 	
	WriteLine++	 
(++ 
$str++ e
)++e f
;++f g
Console,, 
.,, 	
	WriteLine,,	 
(,, 
$str,, e
),,e f
;,,f g
Console-- 
.-- 	
	WriteLine--	 
(-- 
$str-- 0
)--0 1
;--1 2
Console.. 
... 	
	WriteLine..	 
(.. 
).. 
;.. 
Console// 
.// 	
	WriteLine//	 
(// 
$str// c
)//c d
;//d e
Console00 
.00 	
	WriteLine00	 
(00 
$str00 F
)00F G
;00G H
Console11 
.11 	
	WriteLine11	 
(11 
)11 
;11 
Console22 
.22 	
	WriteLine22	 
(22 
$str22 L
)22L M
;22M N
Console33 
.33 	
	WriteLine33	 
(33 
$str33 A
)33A B
;33B C
Console44 
.44 	
	WriteLine44	 
(44 
$str44 >
)44> ?
;44? @
Console55 
.55 	
Write55	 
(55 
$str55 7
)557 8
;558 9
int77 
?77 
humanPlayerCount77 
=77 
null77 
;77 
while88 
(88 
humanPlayerCount88 
is88 
null88  
)88  !
{99 
Console:: 	
.::	 

CursorVisible::
 
=:: 
false:: 
;::  
switch;; 
(;;	 

Console;;
 
.;; 
ReadKey;; 
(;; 
true;; 
);; 
.;;  
Key;;  #
);;# $
{<< 
case== 

ConsoleKey== 
.== 
D0== 
or== 

ConsoleKey== #
.==# $
NumPad0==$ +
:==+ ,
humanPlayerCount==- =
===> ?
$num==@ A
;==A B
break==C H
;==H I
case>> 

ConsoleKey>> 
.>> 
D1>> 
or>> 

ConsoleKey>> #
.>># $
NumPad1>>$ +
:>>+ ,
humanPlayerCount>>- =
=>>> ?
$num>>@ A
;>>A B
break>>C H
;>>H I
case?? 

ConsoleKey?? 
.?? 
D2?? 
or?? 

ConsoleKey?? #
.??# $
NumPad2??$ +
:??+ ,
humanPlayerCount??- =
=??> ?
$num??@ A
;??A B
break??C H
;??H I
}@@ 
}AA 
returnBB 
newBB 
GameBB 
(BB 
humanPlayerCountBB !
.BB! "
ValueBB" '
)BB' (
;BB( )
}CC 
voidEE 
RunGameLoopEE 
(EE 
GameEE 
gameEE 
)EE 
{FF 
whileGG 
(GG 
gameGG 
.GG 
WinnerGG 
isGG 
nullGG 
)GG 
{HH 
PlayerII 
currentPlayerII	 
=II 
gameII 
.II 
PlayersII %
.II% &
FirstII& +
(II+ ,
playerII, 2
=>II3 5
playerII6 <
.II< =
ColorII= B
==IIC E
gameIIF J
.IIJ K
TurnIIK O
)IIO P
;IIP Q
ifJJ 
(JJ 
currentPlayerJJ 
.JJ 
IsHumanJJ 
)JJ 
{KK 
whileLL 
(LL	 

gameLL
 
.LL 
TurnLL 
==LL 
currentPlayerLL $
.LL$ %
ColorLL% *
)LL* +
{MM 
(NN 
intNN 
XNN	 

,NN
 
intNN 
YNN 
)NN 
?NN 
selectionStartNN "
=NN# $
nullNN% )
;NN) *
(OO 
intOO 
XOO	 

,OO
 
intOO 
YOO 
)OO 
?OO 
fromOO 
=OO 
gameOO 
.OO  
BoardOO  %
.OO% &
	AggressorOO& /
isOO0 2
notOO3 6
nullOO7 ;
?OO< =
(OO> ?
gameOO? C
.OOC D
BoardOOD I
.OOI J
	AggressorOOJ S
.OOS T
XOOT U
,OOU V
gameOOW [
.OO[ \
BoardOO\ a
.OOa b
	AggressorOOb k
.OOk l
YOOl m
)OOm n
:OOo p
nullOOq u
;OOu v
ListPP 
<PP 	
MovePP	 
>PP 
movesPP 
=PP 
gamePP 
.PP 
BoardPP !
.PP! "
GetPossibleMovesPP" 2
(PP2 3
gamePP3 7
.PP7 8
TurnPP8 <
)PP< =
;PP= >
ifQQ 
(QQ 
movesQQ 
.QQ 
SelectQQ 
(QQ 
moveQQ 
=>QQ 
moveQQ !
.QQ! "
PieceToMoveQQ" -
)QQ- .
.QQ. /
DistinctQQ/ 7
(QQ7 8
)QQ8 9
.QQ9 :
CountQQ: ?
(QQ? @
)QQ@ A
isQQB D
$numQQE F
)QQF G
{RR 
MoveSS 	
mustSS
 
=SS 
movesSS 
.SS 
FirstSS 
(SS 
)SS 
;SS 
fromTT 	
=TT
 
(TT 
mustTT 
.TT 
PieceToMoveTT 
.TT 
XTT 
,TT  
mustTT! %
.TT% &
PieceToMoveTT& 1
.TT1 2
YTT2 3
)TT3 4
;TT4 5
selectionStartUU 
=UU 
mustUU 
.UU 
ToUU 
;UU 
}VV 
whileWW 	
(WW
 
fromWW 
isWW 
nullWW 
)WW 
{XX 
fromYY 	
=YY
 
HumanMoveSelectionYY 
(YY 
gameYY #
)YY# $
;YY$ %
selectionStartZZ 
=ZZ 
fromZZ 
;ZZ 
}[[ 
(\\ 
int\\ 
X\\	 

,\\
 
int\\ 
Y\\ 
)\\ 
?\\ 
to\\ 
=\\ 
HumanMoveSelection\\ +
(\\+ ,
game\\, 0
,\\0 1
selectionStart\\2 @
:\\@ A
selectionStart\\B P
,\\P Q
from\\R V
:\\V W
from\\X \
)\\\ ]
;\\] ^
Piece]] 	
?]]	 

piece]] 
=]] 
null]] 
;]] 
piece^^ 	
=^^
 
game^^ 
.^^ 
Board^^ 
[^^ 
from^^ 
.^^ 
Value^^ !
.^^! "
X^^" #
,^^# $
from^^% )
.^^) *
Value^^* /
.^^/ 0
Y^^0 1
]^^1 2
;^^2 3
if__ 
(__ 
piece__ 
is__ 
null__ 
||__ 
piece__ 
.__ 
Color__ $
!=__% '
game__( ,
.__, -
Turn__- 1
)__1 2
{`` 
fromaa 	
=aa
 
nullaa 
;aa 
tobb 
=bb 	
nullbb
 
;bb 
}cc 
ifdd 
(dd 
fromdd 
isdd 
notdd 
nulldd 
&&dd 
todd 
isdd !
notdd" %
nulldd& *
)dd* +
{ee 
Moveff 	
?ff	 

moveff 
=ff 
gameff 
.ff 
Boardff 
.ff 
ValidateMoveff )
(ff) *
gameff* .
.ff. /
Turnff/ 3
,ff3 4
fromff5 9
.ff9 :
Valueff: ?
,ff? @
toffA C
.ffC D
ValueffD I
)ffI J
;ffJ K
ifgg 
(gg 	
movegg	 
isgg 
notgg 
nullgg 
&&gg 
(hh 
gamehh 
.hh 
Boardhh 
.hh 
	Aggressorhh 
ishh 
nullhh #
||hh$ &
movehh' +
.hh+ ,
PieceToMovehh, 7
==hh8 :
gamehh; ?
.hh? @
Boardhh@ E
.hhE F
	AggressorhhF O
)hhO P
)hhP Q
{ii 
gamejj 

.jj
 
PerformMovejj 
(jj 
movejj 
)jj 
;jj 
}kk 
}ll 
}mm 
}nn 
elseoo 
{pp 
Listqq 
<qq 
Moveqq 
>qq 
movesqq 
=qq 
gameqq 
.qq 
Boardqq  
.qq  !
GetPossibleMovesqq! 1
(qq1 2
gameqq2 6
.qq6 7
Turnqq7 ;
)qq; <
;qq< =
Listrr 
<rr 
Moverr 
>rr 
capturesrr 
=rr 
movesrr 
.rr 
Whererr $
(rr$ %
moverr% )
=>rr* ,
moverr- 1
.rr1 2
PieceToCapturerr2 @
isrrA C
notrrD G
nullrrH L
)rrL M
.rrM N
ToListrrN T
(rrT U
)rrU V
;rrV W
ifss 
(ss 
capturesss 
.ss 
Countss 
>ss 
$numss 
)ss 
{tt 
gameuu 
.uu 	
PerformMoveuu	 
(uu 
capturesuu 
[uu 
Randomuu $
.uu$ %
Shareduu% +
.uu+ ,
Nextuu, 0
(uu0 1
capturesuu1 9
.uu9 :
Countuu: ?
)uu? @
]uu@ A
)uuA B
;uuB C
}vv 
elseww 
ifww 

(ww
 
!ww 
gameww 
.ww 
Boardww 
.ww 
Piecesww 
.ww 
Anyww !
(ww! "
pieceww" '
=>ww( *
pieceww+ 0
.ww0 1
Colorww1 6
==ww7 9
gameww: >
.ww> ?
Turnww? C
&&wwD F
!wwG H
piecewwH M
.wwM N
PromotedwwN V
)wwV W
)wwW X
{xx 
varyy 
(yy 	
ayy	 

,yy
 
byy 
)yy 
=yy 
gameyy 
.yy 
Boardyy 
.yy !
GetClosestRivalPiecesyy 1
(yy1 2
gameyy2 6
.yy6 7
Turnyy7 ;
)yy; <
;yy< =
Movezz 
?zz 	
priorityMovezz
 
=zz 
moveszz 
.zz 
FirstOrDefaultzz -
(zz- .
movezz. 2
=>zz3 5
movezz6 :
.zz: ;
PieceToMovezz; F
==zzG I
azzJ K
&&zzL N
BoardzzO T
.zzT U
	IsTowardszzU ^
(zz^ _
movezz_ c
,zzc d
bzze f
)zzf g
)zzg h
;zzh i
game{{ 
.{{ 	
PerformMove{{	 
({{ 
priorityMove{{ !
??{{" $
moves{{% *
[{{* +
Random{{+ 1
.{{1 2
Shared{{2 8
.{{8 9
Next{{9 =
({{= >
moves{{> C
.{{C D
Count{{D I
){{I J
]{{J K
){{K L
;{{L M
}|| 
else}} 
{~~ 
game 
. 	
PerformMove	 
( 
moves 
[ 
Random !
.! "
Shared" (
.( )
Next) -
(- .
moves. 3
.3 4
Count4 9
)9 :
]: ;
); <
;< =
}
ÄÄ 
}
ÅÅ 
RenderGameState
ÉÉ 
(
ÉÉ 
game
ÉÉ 
,
ÉÉ 
playerMoved
ÉÉ #
:
ÉÉ# $
currentPlayer
ÉÉ% 2
,
ÉÉ2 3
promptPressKey
ÉÉ4 B
:
ÉÉB C
true
ÉÉD H
)
ÉÉH I
;
ÉÉI J
Console
ÑÑ 	
.
ÑÑ	 

ReadKey
ÑÑ
 
(
ÑÑ 
true
ÑÑ 
)
ÑÑ 
;
ÑÑ 
}
ÖÖ 
}ÜÜ 
voidàà 
RenderGameState
àà 
(
àà 
Game
àà 
game
àà 
,
àà 
Player
àà  &
?
àà& '
playerMoved
àà( 3
=
àà4 5
null
àà6 :
,
àà: ;
(
àà< =
int
àà= @
X
ààA B
,
ààB C
int
ààD G
Y
ààH I
)
ààI J
?
ààJ K
	selection
ààL U
=
ààV W
null
ààX \
,
àà\ ]
(
àà^ _
int
àà_ b
X
ààc d
,
ààd e
int
ààf i
Y
ààj k
)
ààk l
?
ààl m
from
ààn r
=
ààs t
null
ààu y
,
àày z
bool
àà{ 
promptPressKeyààÄ é
=ààè ê
falseààë ñ
)ààñ ó
{ââ 
const
ää 
char
ää 

BlackPiece
ää 
=
ää 
$char
ää 
;
ää 
const
ãã 
char
ãã 
	BlackKing
ãã 
=
ãã 
$char
ãã 
;
ãã 
const
åå 
char
åå 

WhitePiece
åå 
=
åå 
$char
åå 
;
åå 
const
çç 
char
çç 
	WhiteKing
çç 
=
çç 
$char
çç 
;
çç 
const
éé 
char
éé 
Vacant
éé 
=
éé 
$char
éé 
;
éé 
Console
êê 
.
êê 	
CursorVisible
êê	 
=
êê 
false
êê 
;
êê 
Console
ëë 
.
ëë 	
SetCursorPosition
ëë	 
(
ëë 
$num
ëë 
,
ëë 
$num
ëë 
)
ëë  
;
ëë  !
StringBuilder
íí 
sb
íí 
=
íí 
new
íí 
(
íí 
)
íí 
;
íí 
sb
ìì 
.
ìì 

AppendLine
ìì 
(
ìì 
)
ìì 
;
ìì 
sb
îî 
.
îî 

AppendLine
îî 
(
îî 
$str
îî 
)
îî 
;
îî 
sb
ïï 
.
ïï 

AppendLine
ïï 
(
ïï 
)
ïï 
;
ïï 
sb
ññ 
.
ññ 

AppendLine
ññ 
(
ññ 
$"
ññ 
$str
ññ *
"
ññ* +
)
ññ+ ,
;
ññ, -
sb
óó 
.
óó 

AppendLine
óó 
(
óó 
$"
óó 
$str
óó 
{
óó 
B
óó 
(
óó 
$num
óó 
,
óó 
$num
óó 
)
óó  
}
óó  !
$str
óó! "
{
óó" #
B
óó# $
(
óó$ %
$num
óó% &
,
óó& '
$num
óó( )
)
óó) *
}
óó* +
$str
óó+ ,
{
óó, -
B
óó- .
(
óó. /
$num
óó/ 0
,
óó0 1
$num
óó2 3
)
óó3 4
}
óó4 5
$str
óó5 6
{
óó6 7
B
óó7 8
(
óó8 9
$num
óó9 :
,
óó: ;
$num
óó< =
)
óó= >
}
óó> ?
$str
óó? @
{
óó@ A
B
óóA B
(
óóB C
$num
óóC D
,
óóD E
$num
óóF G
)
óóG H
}
óóH I
$str
óóI J
{
óóJ K
B
óóK L
(
óóL M
$num
óóM N
,
óóN O
$num
óóP Q
)
óóQ R
}
óóR S
$str
óóS T
{
óóT U
B
óóU V
(
óóV W
$num
óóW X
,
óóX Y
$num
óóZ [
)
óó[ \
}
óó\ ]
$str
óó] ^
{
óó^ _
B
óó_ `
(
óó` a
$num
óóa b
,
óób c
$num
óód e
)
óóe f
}
óóf g
$str
óóg k
{
óók l

BlackPiece
óól v
}
óóv w
$str
óów 
"óó Ä
)óóÄ Å
;óóÅ Ç
sb
òò 
.
òò 

AppendLine
òò 
(
òò 
$"
òò 
$str
òò 
{
òò 
B
òò 
(
òò 
$num
òò 
,
òò 
$num
òò 
)
òò  
}
òò  !
$str
òò! "
{
òò" #
B
òò# $
(
òò$ %
$num
òò% &
,
òò& '
$num
òò( )
)
òò) *
}
òò* +
$str
òò+ ,
{
òò, -
B
òò- .
(
òò. /
$num
òò/ 0
,
òò0 1
$num
òò2 3
)
òò3 4
}
òò4 5
$str
òò5 6
{
òò6 7
B
òò7 8
(
òò8 9
$num
òò9 :
,
òò: ;
$num
òò< =
)
òò= >
}
òò> ?
$str
òò? @
{
òò@ A
B
òòA B
(
òòB C
$num
òòC D
,
òòD E
$num
òòF G
)
òòG H
}
òòH I
$str
òòI J
{
òòJ K
B
òòK L
(
òòL M
$num
òòM N
,
òòN O
$num
òòP Q
)
òòQ R
}
òòR S
$str
òòS T
{
òòT U
B
òòU V
(
òòV W
$num
òòW X
,
òòX Y
$num
òòZ [
)
òò[ \
}
òò\ ]
$str
òò] ^
{
òò^ _
B
òò_ `
(
òò` a
$num
òòa b
,
òòb c
$num
òòd e
)
òòe f
}
òòf g
$str
òòg k
{
òòk l
	BlackKing
òòl u
}
òòu v
$stròòv É
"òòÉ Ñ
)òòÑ Ö
;òòÖ Ü
sb
ôô 
.
ôô 

AppendLine
ôô 
(
ôô 
$"
ôô 
$str
ôô 
{
ôô 
B
ôô 
(
ôô 
$num
ôô 
,
ôô 
$num
ôô 
)
ôô  
}
ôô  !
$str
ôô! "
{
ôô" #
B
ôô# $
(
ôô$ %
$num
ôô% &
,
ôô& '
$num
ôô( )
)
ôô) *
}
ôô* +
$str
ôô+ ,
{
ôô, -
B
ôô- .
(
ôô. /
$num
ôô/ 0
,
ôô0 1
$num
ôô2 3
)
ôô3 4
}
ôô4 5
$str
ôô5 6
{
ôô6 7
B
ôô7 8
(
ôô8 9
$num
ôô9 :
,
ôô: ;
$num
ôô< =
)
ôô= >
}
ôô> ?
$str
ôô? @
{
ôô@ A
B
ôôA B
(
ôôB C
$num
ôôC D
,
ôôD E
$num
ôôF G
)
ôôG H
}
ôôH I
$str
ôôI J
{
ôôJ K
B
ôôK L
(
ôôL M
$num
ôôM N
,
ôôN O
$num
ôôP Q
)
ôôQ R
}
ôôR S
$str
ôôS T
{
ôôT U
B
ôôU V
(
ôôV W
$num
ôôW X
,
ôôX Y
$num
ôôZ [
)
ôô[ \
}
ôô\ ]
$str
ôô] ^
{
ôô^ _
B
ôô_ `
(
ôô` a
$num
ôôa b
,
ôôb c
$num
ôôd e
)
ôôe f
}
ôôf g
$str
ôôg k
{
ôôk l

WhitePiece
ôôl v
}
ôôv w
$str
ôôw 
"ôô Ä
)ôôÄ Å
;ôôÅ Ç
sb
öö 
.
öö 

AppendLine
öö 
(
öö 
$"
öö 
$str
öö 
{
öö 
B
öö 
(
öö 
$num
öö 
,
öö 
$num
öö 
)
öö  
}
öö  !
$str
öö! "
{
öö" #
B
öö# $
(
öö$ %
$num
öö% &
,
öö& '
$num
öö( )
)
öö) *
}
öö* +
$str
öö+ ,
{
öö, -
B
öö- .
(
öö. /
$num
öö/ 0
,
öö0 1
$num
öö2 3
)
öö3 4
}
öö4 5
$str
öö5 6
{
öö6 7
B
öö7 8
(
öö8 9
$num
öö9 :
,
öö: ;
$num
öö< =
)
öö= >
}
öö> ?
$str
öö? @
{
öö@ A
B
ööA B
(
ööB C
$num
ööC D
,
ööD E
$num
ööF G
)
ööG H
}
ööH I
$str
ööI J
{
ööJ K
B
ööK L
(
ööL M
$num
ööM N
,
ööN O
$num
ööP Q
)
ööQ R
}
ööR S
$str
ööS T
{
ööT U
B
ööU V
(
ööV W
$num
ööW X
,
ööX Y
$num
ööZ [
)
öö[ \
}
öö\ ]
$str
öö] ^
{
öö^ _
B
öö_ `
(
öö` a
$num
ööa b
,
ööb c
$num
ööd e
)
ööe f
}
ööf g
$str
öög k
{
öök l
	WhiteKing
ööl u
}
ööu v
$strööv É
"ööÉ Ñ
)ööÑ Ö
;ööÖ Ü
sb
õõ 
.
õõ 

AppendLine
õõ 
(
õõ 
$"
õõ 
$str
õõ 
{
õõ 
B
õõ 
(
õõ 
$num
õõ 
,
õõ 
$num
õõ 
)
õõ  
}
õõ  !
$str
õõ! "
{
õõ" #
B
õõ# $
(
õõ$ %
$num
õõ% &
,
õõ& '
$num
õõ( )
)
õõ) *
}
õõ* +
$str
õõ+ ,
{
õõ, -
B
õõ- .
(
õõ. /
$num
õõ/ 0
,
õõ0 1
$num
õõ2 3
)
õõ3 4
}
õõ4 5
$str
õõ5 6
{
õõ6 7
B
õõ7 8
(
õõ8 9
$num
õõ9 :
,
õõ: ;
$num
õõ< =
)
õõ= >
}
õõ> ?
$str
õõ? @
{
õõ@ A
B
õõA B
(
õõB C
$num
õõC D
,
õõD E
$num
õõF G
)
õõG H
}
õõH I
$str
õõI J
{
õõJ K
B
õõK L
(
õõL M
$num
õõM N
,
õõN O
$num
õõP Q
)
õõQ R
}
õõR S
$str
õõS T
{
õõT U
B
õõU V
(
õõV W
$num
õõW X
,
õõX Y
$num
õõZ [
)
õõ[ \
}
õõ\ ]
$str
õõ] ^
{
õõ^ _
B
õõ_ `
(
õõ` a
$num
õõa b
,
õõb c
$num
õõd e
)
õõe f
}
õõf g
$str
õõg j
"
õõj k
)
õõk l
;
õõl m
sb
úú 
.
úú 

AppendLine
úú 
(
úú 
$"
úú 
$str
úú 
{
úú 
B
úú 
(
úú 
$num
úú 
,
úú 
$num
úú 
)
úú  
}
úú  !
$str
úú! "
{
úú" #
B
úú# $
(
úú$ %
$num
úú% &
,
úú& '
$num
úú( )
)
úú) *
}
úú* +
$str
úú+ ,
{
úú, -
B
úú- .
(
úú. /
$num
úú/ 0
,
úú0 1
$num
úú2 3
)
úú3 4
}
úú4 5
$str
úú5 6
{
úú6 7
B
úú7 8
(
úú8 9
$num
úú9 :
,
úú: ;
$num
úú< =
)
úú= >
}
úú> ?
$str
úú? @
{
úú@ A
B
úúA B
(
úúB C
$num
úúC D
,
úúD E
$num
úúF G
)
úúG H
}
úúH I
$str
úúI J
{
úúJ K
B
úúK L
(
úúL M
$num
úúM N
,
úúN O
$num
úúP Q
)
úúQ R
}
úúR S
$str
úúS T
{
úúT U
B
úúU V
(
úúV W
$num
úúW X
,
úúX Y
$num
úúZ [
)
úú[ \
}
úú\ ]
$str
úú] ^
{
úú^ _
B
úú_ `
(
úú` a
$num
úúa b
,
úúb c
$num
úúd e
)
úúe f
}
úúf g
$str
úúg q
"
úúq r
)
úúr s
;
úús t
sb
ùù 
.
ùù 

AppendLine
ùù 
(
ùù 
$"
ùù 
$str
ùù 
{
ùù 
B
ùù 
(
ùù 
$num
ùù 
,
ùù 
$num
ùù 
)
ùù  
}
ùù  !
$str
ùù! "
{
ùù" #
B
ùù# $
(
ùù$ %
$num
ùù% &
,
ùù& '
$num
ùù( )
)
ùù) *
}
ùù* +
$str
ùù+ ,
{
ùù, -
B
ùù- .
(
ùù. /
$num
ùù/ 0
,
ùù0 1
$num
ùù2 3
)
ùù3 4
}
ùù4 5
$str
ùù5 6
{
ùù6 7
B
ùù7 8
(
ùù8 9
$num
ùù9 :
,
ùù: ;
$num
ùù< =
)
ùù= >
}
ùù> ?
$str
ùù? @
{
ùù@ A
B
ùùA B
(
ùùB C
$num
ùùC D
,
ùùD E
$num
ùùF G
)
ùùG H
}
ùùH I
$str
ùùI J
{
ùùJ K
B
ùùK L
(
ùùL M
$num
ùùM N
,
ùùN O
$num
ùùP Q
)
ùùQ R
}
ùùR S
$str
ùùS T
{
ùùT U
B
ùùU V
(
ùùV W
$num
ùùW X
,
ùùX Y
$num
ùùZ [
)
ùù[ \
}
ùù\ ]
$str
ùù] ^
{
ùù^ _
B
ùù_ `
(
ùù` a
$num
ùùa b
,
ùùb c
$num
ùùd e
)
ùùe f
}
ùùf g
$str
ùùg k
{
ùùk l
game
ùùl p
.
ùùp q

TakenCount
ùùq {
(
ùù{ |
Whiteùù| Å
)ùùÅ Ç
,ùùÇ É
$numùùÉ Ñ
}ùùÑ Ö
$strùùÖ à
{ùùà â

WhitePieceùùâ ì
}ùùì î
"ùùî ï
)ùùï ñ
;ùùñ ó
sb
ûû 
.
ûû 

AppendLine
ûû 
(
ûû 
$"
ûû 
$str
ûû 
{
ûû 
B
ûû 
(
ûû 
$num
ûû 
,
ûû 
$num
ûû 
)
ûû  
}
ûû  !
$str
ûû! "
{
ûû" #
B
ûû# $
(
ûû$ %
$num
ûû% &
,
ûû& '
$num
ûû( )
)
ûû) *
}
ûû* +
$str
ûû+ ,
{
ûû, -
B
ûû- .
(
ûû. /
$num
ûû/ 0
,
ûû0 1
$num
ûû2 3
)
ûû3 4
}
ûû4 5
$str
ûû5 6
{
ûû6 7
B
ûû7 8
(
ûû8 9
$num
ûû9 :
,
ûû: ;
$num
ûû< =
)
ûû= >
}
ûû> ?
$str
ûû? @
{
ûû@ A
B
ûûA B
(
ûûB C
$num
ûûC D
,
ûûD E
$num
ûûF G
)
ûûG H
}
ûûH I
$str
ûûI J
{
ûûJ K
B
ûûK L
(
ûûL M
$num
ûûM N
,
ûûN O
$num
ûûP Q
)
ûûQ R
}
ûûR S
$str
ûûS T
{
ûûT U
B
ûûU V
(
ûûV W
$num
ûûW X
,
ûûX Y
$num
ûûZ [
)
ûû[ \
}
ûû\ ]
$str
ûû] ^
{
ûû^ _
B
ûû_ `
(
ûû` a
$num
ûûa b
,
ûûb c
$num
ûûd e
)
ûûe f
}
ûûf g
$str
ûûg k
{
ûûk l
game
ûûl p
.
ûûp q

TakenCount
ûûq {
(
ûû{ |
Blackûû| Å
)ûûÅ Ç
,ûûÇ É
$numûûÉ Ñ
}ûûÑ Ö
$strûûÖ à
{ûûà â

BlackPieceûûâ ì
}ûûì î
"ûûî ï
)ûûï ñ
;ûûñ ó
sb
üü 
.
üü 

AppendLine
üü 
(
üü 
$"
üü 
$str
üü *
"
üü* +
)
üü+ ,
;
üü, -
sb
†† 
.
†† 

AppendLine
†† 
(
†† 
$"
†† 
$str
†† '
"
††' (
)
††( )
;
††) *
sb
°° 
.
°° 

AppendLine
°° 
(
°° 
)
°° 
;
°° 
if
¢¢ 
(
¢¢ 
	selection
¢¢ 
is
¢¢ 
not
¢¢ 
null
¢¢ 
)
¢¢ 
{
££ 
sb
§§ 
.
§§ 
Replace
§§ 
(
§§ 
$str
§§ 
,
§§ 
$"
§§ 
$str
§§ 
{
§§ 
ToChar
§§ 
(
§§ 
game
§§ #
.
§§# $
Board
§§$ )
[
§§) *
	selection
§§* 3
.
§§3 4
Value
§§4 9
.
§§9 :
X
§§: ;
,
§§; <
	selection
§§= F
.
§§F G
Value
§§G L
.
§§L M
Y
§§M N
]
§§N O
)
§§O P
}
§§P Q
$str
§§Q R
"
§§R S
)
§§S T
;
§§T U
}
•• 
if
¶¶ 
(
¶¶ 
from
¶¶ 	
is
¶¶
 
not
¶¶ 
null
¶¶ 
)
¶¶ 
{
ßß 
char
®® 
fromChar
®® 
=
®® 
ToChar
®® 
(
®® 
game
®® 
.
®® 
Board
®® #
[
®®# $
from
®®$ (
.
®®( )
Value
®®) .
.
®®. /
X
®®/ 0
,
®®0 1
from
®®2 6
.
®®6 7
Value
®®7 <
.
®®< =
Y
®®= >
]
®®> ?
)
®®? @
;
®®@ A
sb
©© 
.
©© 
Replace
©© 
(
©© 
$str
©© 
,
©© 
$"
©© 
$str
©© 
{
©© 
fromChar
©©  
}
©©  !
$str
©©! "
"
©©" #
)
©©# $
;
©©$ %
sb
™™ 
.
™™ 
Replace
™™ 
(
™™ 
$str
™™ 
,
™™ 
$"
™™ 
{
™™ 
fromChar
™™ 
}
™™  
$str
™™  !
"
™™! "
)
™™" #
;
™™# $
sb
´´ 
.
´´ 
Replace
´´ 
(
´´ 
$str
´´ 
,
´´ 
$"
´´ 
$str
´´ 
{
´´ 
fromChar
´´  
}
´´  !
"
´´! "
)
´´" #
;
´´# $
}
¨¨ 

PieceColor
≠≠ 
?
≠≠ 
wc
≠≠ 
=
≠≠ 
game
≠≠ 
.
≠≠ 
Winner
≠≠ 
;
≠≠ 

PieceColor
ÆÆ 
?
ÆÆ 
mc
ÆÆ 
=
ÆÆ 
playerMoved
ÆÆ 
?
ÆÆ 
.
ÆÆ 
Color
ÆÆ $
;
ÆÆ$ %

PieceColor
ØØ 
?
ØØ 
tc
ØØ 
=
ØØ 
game
ØØ 
.
ØØ 
Turn
ØØ 
;
ØØ 
string
≤≤ 
w
≤≤ 	
=
≤≤
 
$"
≤≤ 
$str
≤≤ 
{
≤≤ 
wc
≤≤ 
}
≤≤ 
$str
≤≤ !
"
≤≤! "
;
≤≤" #
string
≥≥ 
m
≥≥ 	
=
≥≥
 
$"
≥≥ 
$str
≥≥ 
{
≥≥ 
mc
≥≥ 
}
≥≥ 
$str
≥≥ !
"
≥≥! "
;
≥≥" #
string
¥¥ 
t
¥¥ 	
=
¥¥
 
$"
¥¥ 
$str
¥¥ 
{
¥¥ 
tc
¥¥ 
}
¥¥ 
$str
¥¥ !
"
¥¥! "
;
¥¥" #
sb
µµ 
.
µµ 

AppendLine
µµ 
(
µµ 
game
∂∂ 
.
∂∂ 
Winner
∂∂ 
is
∂∂ 
not
∂∂ 
null
∂∂ 
?
∂∂ 
w
∂∂ 
:
∂∂ 
playerMoved
∑∑ 
is
∑∑ 
not
∑∑ 
null
∑∑ 
?
∑∑ 
m
∑∑ 
:
∑∑ 
t
∏∏ 
)
∏∏ 
;
∏∏ 
string
ππ 
p
ππ 	
=
ππ
 
$str
ππ ,
;
ππ, -
string
∫∫ 
s
∫∫ 	
=
∫∫
 
$str
∫∫ ,
;
∫∫, -
sb
ªª 
.
ªª 

AppendLine
ªª 
(
ªª 
promptPressKey
ªª 
?
ªª 
p
ªª  !
:
ªª" #
s
ªª$ %
)
ªª% &
;
ªª& '
Console
ºº 
.
ºº 	
Write
ºº	 
(
ºº 
sb
ºº 
)
ºº 
;
ºº 
char
ææ 
B
ææ 
(
ææ 
int
ææ 
x
ææ 
,
ææ 
int
ææ 
y
ææ 
)
ææ 
=>
ææ 
(
øø 
x
øø 
,
øø 
y
øø 
)
øø 
==
øø	 
	selection
øø 
?
øø 
$char
øø 
:
øø 
(
¿¿ 
x
¿¿ 
,
¿¿ 
y
¿¿ 
)
¿¿ 
==
¿¿	 
from
¿¿ 
?
¿¿ 
$char
¿¿ 
:
¿¿ 
ToChar
¡¡ 
(
¡¡ 	
game
¡¡	 
.
¡¡ 
Board
¡¡ 
[
¡¡ 
x
¡¡ 
,
¡¡ 
y
¡¡ 
]
¡¡ 
)
¡¡ 
;
¡¡ 
static
√√ 
char
√√ 
ToChar
√√ 
(
√√ 
Piece
√√ 
?
√√ 
piece
√√  
)
√√  !
=>
√√" $
piece
ƒƒ 
is
ƒƒ 

null
ƒƒ 
?
ƒƒ 
Vacant
ƒƒ 
:
ƒƒ 
(
≈≈ 
piece
≈≈ 
.
≈≈ 	
Color
≈≈	 
,
≈≈ 
piece
≈≈ 
.
≈≈ 
Promoted
≈≈ 
)
≈≈ 
switch
≈≈  &
{
∆∆ 
(
«« 
Black
«« 	
,
««	 

false
«« 
)
«« 
=>
«« 

BlackPiece
«« 
,
««  
(
»» 
Black
»» 	
,
»»	 

true
»» 
)
»» 
=>
»» 
	BlackKing
»» 
,
»» 
(
…… 
White
…… 	
,
……	 

false
…… 
)
…… 
=>
…… 

WhitePiece
…… 
,
……  
(
   
White
   	
,
  	 

true
   
)
   
=>
   
	WhiteKing
   
,
   
_
ÀÀ 
=>
ÀÀ 
throw
ÀÀ 
new
ÀÀ %
NotImplementedException
ÀÀ )
(
ÀÀ) *
)
ÀÀ* +
,
ÀÀ+ ,
}
ÃÃ 
;
ÃÃ 
}ÕÕ 
(œœ 
int
œœ 
X
œœ 
,
œœ 
int
œœ 
Y
œœ 
)
œœ 
?
œœ  
HumanMoveSelection
œœ "
(
œœ" #
Game
œœ# '
game
œœ( ,
,
œœ, -
(
œœ. /
int
œœ/ 2
X
œœ3 4
,
œœ4 5
int
œœ6 9
y
œœ: ;
)
œœ; <
?
œœ< =
selectionStart
œœ> L
=
œœM N
null
œœO S
,
œœS T
(
œœU V
int
œœV Y
X
œœZ [
,
œœ[ \
int
œœ] `
Y
œœa b
)
œœb c
?
œœc d
from
œœe i
=
œœj k
null
œœl p
)
œœp q
{–– 
(
—— 
int
—— 
X
—— 
,
—— 
int
——	 
Y
—— 
)
—— 
	selection
—— 
=
—— 
selectionStart
—— *
??
——+ -
(
——. /
$num
——/ 0
,
——0 1
$num
——2 3
)
——3 4
;
——4 5
while
““ 
(
““ 
true
““ 
)
““ 
{
”” 
RenderGameState
‘‘ 
(
‘‘ 
game
‘‘ 
,
‘‘ 
	selection
‘‘ !
:
‘‘! "
	selection
‘‘# ,
,
‘‘, -
from
‘‘. 2
:
‘‘2 3
from
‘‘4 8
)
‘‘8 9
;
‘‘9 :
switch
’’ 
(
’’	 

Console
’’
 
.
’’ 
ReadKey
’’ 
(
’’ 
true
’’ 
)
’’ 
.
’’  
Key
’’  #
)
’’# $
{
÷÷ 
case
◊◊ 

ConsoleKey
◊◊ 
.
◊◊ 
	DownArrow
◊◊ 
:
◊◊ 
	selection
◊◊ (
.
◊◊( )
Y
◊◊) *
=
◊◊+ ,
Math
◊◊- 1
.
◊◊1 2
Max
◊◊2 5
(
◊◊5 6
$num
◊◊6 7
,
◊◊7 8
	selection
◊◊9 B
.
◊◊B C
Y
◊◊C D
-
◊◊E F
$num
◊◊G H
)
◊◊H I
;
◊◊I J
break
◊◊K P
;
◊◊P Q
case
ÿÿ 

ConsoleKey
ÿÿ 
.
ÿÿ 
UpArrow
ÿÿ 
:
ÿÿ 
	selection
ÿÿ (
.
ÿÿ( )
Y
ÿÿ) *
=
ÿÿ+ ,
Math
ÿÿ- 1
.
ÿÿ1 2
Min
ÿÿ2 5
(
ÿÿ5 6
$num
ÿÿ6 7
,
ÿÿ7 8
	selection
ÿÿ9 B
.
ÿÿB C
Y
ÿÿC D
+
ÿÿE F
$num
ÿÿG H
)
ÿÿH I
;
ÿÿI J
break
ÿÿK P
;
ÿÿP Q
case
ŸŸ 

ConsoleKey
ŸŸ 
.
ŸŸ 
	LeftArrow
ŸŸ 
:
ŸŸ 
	selection
ŸŸ (
.
ŸŸ( )
X
ŸŸ) *
=
ŸŸ+ ,
Math
ŸŸ- 1
.
ŸŸ1 2
Max
ŸŸ2 5
(
ŸŸ5 6
$num
ŸŸ6 7
,
ŸŸ7 8
	selection
ŸŸ9 B
.
ŸŸB C
X
ŸŸC D
-
ŸŸE F
$num
ŸŸG H
)
ŸŸH I
;
ŸŸI J
break
ŸŸK P
;
ŸŸP Q
case
⁄⁄ 

ConsoleKey
⁄⁄ 
.
⁄⁄ 

RightArrow
⁄⁄ 
:
⁄⁄ 
	selection
⁄⁄ (
.
⁄⁄( )
X
⁄⁄) *
=
⁄⁄+ ,
Math
⁄⁄- 1
.
⁄⁄1 2
Min
⁄⁄2 5
(
⁄⁄5 6
$num
⁄⁄6 7
,
⁄⁄7 8
	selection
⁄⁄9 B
.
⁄⁄B C
X
⁄⁄C D
+
⁄⁄E F
$num
⁄⁄G H
)
⁄⁄H I
;
⁄⁄I J
break
⁄⁄K P
;
⁄⁄P Q
case
€€ 

ConsoleKey
€€ 
.
€€ 
Enter
€€ 
:
€€ 
return
€€ %
	selection
€€& /
;
€€/ 0
case
‹‹ 

ConsoleKey
‹‹ 
.
‹‹ 
Escape
‹‹ 
:
‹‹ 
return
‹‹ %
null
‹‹& *
;
‹‹* +
}
›› 
}
ﬁﬁ 
}ﬂﬂ ë
SC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Checkers\Statics.cs
public 
static 
class 
Statics 
{ 
public 
const 

PieceColor 
Black 
=  

PieceColor! +
.+ ,
Black, 1
;1 2
public 
const 

PieceColor 
White 
=  

PieceColor! +
.+ ,
White, 1
;1 2
} T
RC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Checkers\_using.cs
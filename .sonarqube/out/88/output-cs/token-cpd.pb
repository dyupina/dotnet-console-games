”ı
RC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Yahtzee\Program.cs
	Exception 	
?	 

	exception 
= 
null 
; 
const 
string 
welcome 
= 
$str 2
;2 3
const 
string 
rollDice 
= 
$str 2
;2 3
const 
string 
rollDiceSmall 
= 
$str 2
;2 3
const 
string 
blank 
= 
$str$ 2
;$$2 3
const&& 
string&& 
chooseDice2&& 
=&& 
$str'* 2
;**2 3
const,, 
string,, 
chooseDice1,, 
=,, 
$str-0 2
;002 3
const22 
string22 
selectScore22 
=22 
$str38 2
;882 3
const:: 
string:: 
selectScoreInvalid:: 
=::  !
$str;@ 2
;@@2 3
constBB 
stringBB 
yahtzeeBonusBB 
=BB 
$strCH 2
;HH2 3
constJJ 
stringJJ 
upperBonusSuccessJJ 
=JJ  
$strKP 2
;PP2 3
constRR 
stringRR 
upperBonusFailRR 
=RR 
$strSX 2
;XX2 3
constZZ 
stringZZ 
gameCompleteZZ 
=ZZ 
$str[` 2
;``2 3
constbb 
intbb 	
minWidthbb
 
=bb 
$numbb 
;bb 
constcc 
intcc 	
	minHeightcc
 
=cc 
$numcc 
;cc 
Randomee 
randomee 
=ee 
newee 
(ee 
)ee 
;ee 
intff 
[ff 
]ff 
diceff 

=ff 
{ff 
$numff 
,ff 
$numff 
,ff 
$numff 
,ff 
$numff 
,ff 
$numff 
}ff 
;ff 
boolgg 
[gg 
]gg 
lockedgg 
=gg 
newgg 
boolgg 
[gg 
dicegg 
.gg 
Lengthgg $
]gg$ %
;gg% &
inthh 
diceSelectionhh 
=hh 
$numhh 
;hh 
intii 
scoreSelectionii 
=ii 
$numii 
;ii 
intjj 
?jj 
[jj 
]jj 
scoresjj 
=jj 
newjj 
intjj 
?jj 
[jj 
$numjj 
]jj 
;jj 
boolkk 
escapekk 
=kk 
falsekk 
;kk 
trymm 
{nn 
ifoo 
(oo 
OperatingSystemoo 
.oo 
	IsWindowsoo 
(oo 
)oo  
)oo  !
{pp 
tryqq 
{rr 
intss 
widthss 
=ss 
Consoless 
.ss 
WindowWidthss "
;ss" #
inttt 
heighttt 
=tt 
Consolett 
.tt 
WindowHeighttt $
;tt$ %
ifuu 
(uu 
widthuu 
<uu 
minWidthuu 
||uu 
heightuu !
<uu" #
	minHeightuu$ -
)uu- .
{vv 
Consoleww 
.ww 
SetWindowSizeww 
(ww 
minWidthww "
,ww" #
	minHeightww$ -
)ww- .
;ww. /
Consolexx 
.xx 
SetBufferSizexx 
(xx 
minWidthxx "
,xx" #
	minHeightxx$ -
)xx- .
;xx. /
}yy 
}zz 
catch{{ 
{|| 
}~~ 
} 
Restart
ÄÄ 
:
ÄÄ 	
Array
ÅÅ 
.
ÅÅ 
Fill
ÅÅ 
(
ÅÅ 
scores
ÅÅ 
,
ÅÅ 
null
ÅÅ 
)
ÅÅ 
;
ÅÅ 
Console
ÇÇ 
.
ÇÇ 	
BackgroundColor
ÇÇ	 
=
ÇÇ 
ConsoleColor
ÇÇ '
.
ÇÇ' (
Black
ÇÇ( -
;
ÇÇ- .
Console
ÉÉ 
.
ÉÉ 	
ForegroundColor
ÉÉ	 
=
ÉÉ 
ConsoleColor
ÉÉ '
.
ÉÉ' (
White
ÉÉ( -
;
ÉÉ- .
Console
ÑÑ 
.
ÑÑ 	
Clear
ÑÑ	 
(
ÑÑ 
)
ÑÑ 
;
ÑÑ 
Render
ÖÖ 
(
ÖÖ 
false
ÖÖ 
,
ÖÖ 
false
ÖÖ 
,
ÖÖ 
false
ÖÖ 
)
ÖÖ 
;
ÖÖ 
Console
ÜÜ 
.
ÜÜ 	
Write
ÜÜ	 
(
ÜÜ 
welcome
ÜÜ 
)
ÜÜ 
;
ÜÜ 
PressToContinue
áá 
(
áá 

ConsoleKey
áá 
.
áá 
Enter
áá !
)
áá! "
;
áá" #
while
àà 
(
àà 
!
àà 	
escape
àà	 
&&
àà 
scores
àà 
.
àà 
Contains
àà "
(
àà" #
null
àà# '
)
àà' (
)
àà( )
{
ââ 
	PlayRound
ää 
(
ää 
)
ää 
;
ää 
if
ãã 
(
ãã 
escape
ãã 
)
ãã 
return
ãã 
;
ãã 
if
åå 
(
åå 
	IsYahtzee
åå 
(
åå 
)
åå 
&&
åå 
scores
åå 
[
åå 
$num
åå 
]
åå 
>
åå  !
$num
åå" #
)
åå# $
{
çç 
scores
éé 	
[
éé	 

$num
éé
 
]
éé 
=
éé 
scores
éé 
[
éé 
$num
éé 
]
éé 
is
éé 
null
éé "
?
éé# $
$num
éé% (
:
éé) *
scores
éé+ 1
[
éé1 2
$num
éé2 4
]
éé4 5
+
éé6 7
$num
éé8 ;
;
éé; <
Render
èè 	
(
èè	 

false
èè
 
,
èè 
false
èè 
,
èè 
false
èè 
)
èè 
;
èè 
Console
êê 

.
êê
 
Write
êê 
(
êê 
yahtzeeBonus
êê 
)
êê 
;
êê 
PressToContinue
ëë 
(
ëë 

ConsoleKey
ëë 
.
ëë 
Enter
ëë #
)
ëë# $
;
ëë$ %
if
íí 
(
íí 
escape
íí 
)
íí 
return
íí 
;
íí 
}
ìì 
ScoreSelection
îî 
(
îî 
)
îî 
;
îî 
}
ïï 
if
ññ 
(
ññ 
escape
ññ 
)
ññ 
return
ññ 
;
ññ 
Render
óó 
(
óó 
false
óó 
,
óó 
false
óó 
,
óó 
false
óó 
)
óó 
;
óó 
Console
òò 
.
òò 	
Write
òò	 
(
òò 
gameComplete
òò 
)
òò 
;
òò 
PlayAgainCheck
ôô 
:
ôô 
switch
öö 
(
öö 	
Console
öö	 
.
öö 
ReadKey
öö 
(
öö 
true
öö 
)
öö 
.
öö 
Key
öö "
)
öö" #
{
õõ 
case
úú 

ConsoleKey
úú 
.
úú 
Enter
úú 
:
úú 
goto
úú 
Restart
úú %
;
úú% &
case
ùù 

ConsoleKey
ùù 
.
ùù 
Escape
ùù 
:
ùù 
escape
ùù  
=
ùù! "
true
ùù# '
;
ùù' (
break
ùù) .
;
ùù. /
default
ûû 	
:
ûû	 

goto
ûû 
PlayAgainCheck
ûû 
;
ûû 
}
üü 
}†† 
catch°° 
(
°° 
	Exception
°° 
e
°° 
)
°° 
{¢¢ 
	exception
££ 

=
££ 
e
££ 
;
££ 
throw
§§ 
;
§§ 
}•• 
finally¶¶ 
{ßß 
Console
®® 
.
®® 	

ResetColor
®®	 
(
®® 
)
®® 
;
®® 
Console
©© 
.
©© 	
Clear
©©	 
(
©© 
)
©© 
;
©© 
Console
™™ 
.
™™ 	
	WriteLine
™™	 
(
™™ 
	exception
™™ 
?
™™ 
.
™™ 
ToString
™™ &
(
™™& '
)
™™' (
??
™™) +
$str
™™, A
)
™™A B
;
™™B C
}´´ 
void≠≠ 
Render
≠≠ 
(
≠≠ 
bool
≠≠ 
selectingDice
≠≠ 
,
≠≠ 
bool
≠≠  $
selectingScore
≠≠% 3
,
≠≠3 4
bool
≠≠5 9
successiveRoll
≠≠: H
)
≠≠H I
{ÆÆ 
Console
ØØ 
.
ØØ 	
CursorVisible
ØØ	 
=
ØØ 
false
ØØ 
;
ØØ 
EnsureConsoleSize
∞∞ 
(
∞∞ 
)
∞∞ 
;
∞∞ 
if
±± 
(
±± 
escape
±± 
)
±± 
return
±± 
;
±± 
Console
≤≤ 
.
≤≤ 	
CursorVisible
≤≤	 
=
≤≤ 
false
≤≤ 
;
≤≤ 
Console
≥≥ 
.
≥≥ 	
SetCursorPosition
≥≥	 
(
≥≥ 
$num
≥≥ 
,
≥≥ 
$num
≥≥ 
)
≥≥  
;
≥≥  !
Console
¥¥ 
.
¥¥ 	
	WriteLine
¥¥	 
(
¥¥ 
)
¥¥ 
;
¥¥ 
Console
µµ 
.
µµ 	
	WriteLine
µµ	 
(
µµ 
$str
µµ 
)
µµ 
;
µµ  
Console
∂∂ 
.
∂∂ 	
	WriteLine
∂∂	 
(
∂∂ 
$"
∂∂ 
$str
∂∂ 6
"
∂∂6 7
)
∂∂7 8
;
∂∂8 9
Console
∑∑ 
.
∑∑ 	
	WriteLine
∑∑	 
(
∑∑ 
$"
∑∑ 
$str
∑∑ 6
"
∑∑6 7
)
∑∑7 8
;
∑∑8 9,
RenderSelectableScoreSheetLine
∏∏ 
(
∏∏  
selectingScore
∏∏  .
,
∏∏. /
$num
∏∏0 2
,
∏∏2 3
$str
∏∏4 I
)
∏∏I J
;
∏∏J K,
RenderSelectableScoreSheetLine
ππ 
(
ππ  
selectingScore
ππ  .
,
ππ. /
$num
ππ0 2
,
ππ2 3
$str
ππ4 I
)
ππI J
;
ππJ K,
RenderSelectableScoreSheetLine
∫∫ 
(
∫∫  
selectingScore
∫∫  .
,
∫∫. /
$num
∫∫0 2
,
∫∫2 3
$str
∫∫4 I
)
∫∫I J
;
∫∫J K,
RenderSelectableScoreSheetLine
ªª 
(
ªª  
selectingScore
ªª  .
,
ªª. /
$num
ªª0 2
,
ªª2 3
$str
ªª4 I
)
ªªI J
;
ªªJ K,
RenderSelectableScoreSheetLine
ºº 
(
ºº  
selectingScore
ºº  .
,
ºº. /
$num
ºº0 2
,
ºº2 3
$str
ºº4 I
)
ººI J
;
ººJ K,
RenderSelectableScoreSheetLine
ΩΩ 
(
ΩΩ  
selectingScore
ΩΩ  .
,
ΩΩ. /
$num
ΩΩ0 2
,
ΩΩ2 3
$str
ΩΩ4 I
)
ΩΩI J
;
ΩΩJ K
Console
ææ 
.
ææ 	
	WriteLine
ææ	 
(
ææ 
$"
ææ 
$str
ææ /
{
ææ/ 0
RenderScore
ææ0 ;
(
ææ; <
scores
ææ< B
[
ææB C
$num
ææC E
]
ææE F
)
ææF G
}
ææG H
$str
ææH K
"
ææK L
)
ææL M
;
ææM N
Console
øø 
.
øø 	
	WriteLine
øø	 
(
øø 
$"
øø 
$str
øø 6
"
øø6 7
)
øø7 8
;
øø8 9,
RenderSelectableScoreSheetLine
¿¿ 
(
¿¿  
selectingScore
¿¿  .
,
¿¿. /
$num
¿¿0 2
,
¿¿2 3
$str
¿¿4 I
)
¿¿I J
;
¿¿J K,
RenderSelectableScoreSheetLine
¡¡ 
(
¡¡  
selectingScore
¡¡  .
,
¡¡. /
$num
¡¡0 2
,
¡¡2 3
$str
¡¡4 I
)
¡¡I J
;
¡¡J K,
RenderSelectableScoreSheetLine
¬¬ 
(
¬¬  
selectingScore
¬¬  .
,
¬¬. /
$num
¬¬0 2
,
¬¬2 3
$str
¬¬4 I
)
¬¬I J
;
¬¬J K,
RenderSelectableScoreSheetLine
√√ 
(
√√  
selectingScore
√√  .
,
√√. /
$num
√√0 2
,
√√2 3
$str
√√4 I
)
√√I J
;
√√J K,
RenderSelectableScoreSheetLine
ƒƒ 
(
ƒƒ  
selectingScore
ƒƒ  .
,
ƒƒ. /
$num
ƒƒ0 2
,
ƒƒ2 3
$str
ƒƒ4 I
)
ƒƒI J
;
ƒƒJ K,
RenderSelectableScoreSheetLine
≈≈ 
(
≈≈  
selectingScore
≈≈  .
,
≈≈. /
$num
≈≈0 2
,
≈≈2 3
$str
≈≈4 I
)
≈≈I J
;
≈≈J K,
RenderSelectableScoreSheetLine
∆∆ 
(
∆∆  
selectingScore
∆∆  .
,
∆∆. /
$num
∆∆0 2
,
∆∆2 3
$str
∆∆4 I
)
∆∆I J
;
∆∆J K
Console
«« 
.
«« 	
	WriteLine
««	 
(
«« 
$"
«« 
$str
«« /
{
««/ 0
RenderScore
««0 ;
(
««; <
scores
««< B
[
««B C
$num
««C E
]
««E F
)
««F G
}
««G H
$str
««H K
"
««K L
)
««L M
;
««M N
Console
»» 
.
»» 	
	WriteLine
»»	 
(
»» 
$"
»» 
$str
»» /
{
»»/ 0
RenderScore
»»0 ;
(
»»; <
scores
»»< B
[
»»B C
$num
»»C E
]
»»E F
)
»»F G
}
»»G H
$str
»»H K
"
»»K L
)
»»L M
;
»»M N
Console
…… 
.
…… 	
	WriteLine
……	 
(
…… 
$"
…… 
$str
…… 6
"
……6 7
)
……7 8
;
……8 9
Console
   
.
   	
	WriteLine
  	 
(
   
$str
   6
)
  6 7
;
  7 8
Console
ÀÀ 
.
ÀÀ 	
Write
ÀÀ	 
(
ÀÀ 
$str
ÀÀ 
)
ÀÀ 
;
ÀÀ 
for
ÃÃ 
(
ÃÃ 
int
ÃÃ 	
i
ÃÃ
 
=
ÃÃ 
$num
ÃÃ 
;
ÃÃ 
i
ÃÃ 
<
ÃÃ 
dice
ÃÃ 
.
ÃÃ 
Length
ÃÃ  
;
ÃÃ  !
i
ÃÃ" #
++
ÃÃ# %
)
ÃÃ% &
{
ÕÕ 
Console
ŒŒ 	
.
ŒŒ	 

Write
ŒŒ
 
(
ŒŒ 
$"
ŒŒ 
$str
ŒŒ 
{
ŒŒ 
dice
ŒŒ 
[
ŒŒ 
i
ŒŒ 
]
ŒŒ 
.
ŒŒ 
ToString
ŒŒ %
(
ŒŒ% &
CultureInfo
ŒŒ& 1
.
ŒŒ1 2
InvariantCulture
ŒŒ2 B
)
ŒŒB C
}
ŒŒC D
$str
ŒŒD F
"
ŒŒF G
)
ŒŒG H
;
ŒŒH I
}
œœ 
Console
–– 
.
–– 	
	WriteLine
––	 
(
–– 
)
–– 
;
–– 
Console
—— 
.
—— 	
	WriteLine
——	 
(
—— 
$str
—— 6
)
——6 7
;
——7 8
if
““ 
(
““ 
selectingDice
““ 
)
““ 
{
”” 
Console
‘‘ 	
.
‘‘	 

Write
‘‘
 
(
‘‘ 
$str
‘‘ 
)
‘‘ 
;
‘‘ 
for
’’ 
(
’’ 
int
’’ 

i
’’ 
=
’’ 
$num
’’ 
;
’’ 
i
’’ 
<
’’ 
dice
’’ 
.
’’ 
Length
’’ !
;
’’! "
i
’’# $
++
’’$ &
)
’’& '
{
÷÷ 
Console
◊◊ 

.
◊◊
 
Write
◊◊ 
(
◊◊ 
!
◊◊ 
locked
◊◊ 
[
◊◊ 
i
◊◊ 
]
◊◊ 
?
◊◊ 
$str
◊◊ &
:
◊◊' (
$str
◊◊) 0
)
◊◊0 1
;
◊◊1 2
}
ÿÿ 
Console
ŸŸ 	
.
ŸŸ	 

	WriteLine
ŸŸ
 
(
ŸŸ 
)
ŸŸ 
;
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 
!
⁄⁄ 
successiveRoll
⁄⁄ 
)
⁄⁄ 
{
€€ 
Console
‹‹ 

.
‹‹
 
Write
‹‹ 
(
‹‹ 
$str
‹‹ 
)
‹‹ 
;
‹‹ 
Console
›› 

.
››
 
ForegroundColor
›› 
=
›› 
ConsoleColor
›› )
.
››) *
Yellow
››* 0
;
››0 1
for
ﬁﬁ 
(
ﬁﬁ 
int
ﬁﬁ 
i
ﬁﬁ 
=
ﬁﬁ 
$num
ﬁﬁ 
;
ﬁﬁ 
i
ﬁﬁ 
<
ﬁﬁ 
dice
ﬁﬁ 
.
ﬁﬁ 
Length
ﬁﬁ "
;
ﬁﬁ" #
i
ﬁﬁ$ %
++
ﬁﬁ% '
)
ﬁﬁ' (
{
ﬂﬂ 
Console
‡‡ 
.
‡‡ 
Write
‡‡ 
(
‡‡ 
i
‡‡ 
==
‡‡ 
diceSelection
‡‡ $
?
‡‡% &
$str
‡‡' /
:
‡‡0 1
$str
‡‡2 9
)
‡‡9 :
;
‡‡: ;
}
·· 
Console
‚‚ 

.
‚‚
 
ForegroundColor
‚‚ 
=
‚‚ 
ConsoleColor
‚‚ )
.
‚‚) *
White
‚‚* /
;
‚‚/ 0
}
„„ 
}
‰‰ 
}ÂÂ 
voidÁÁ ,
RenderSelectableScoreSheetLine
ÁÁ #
(
ÁÁ# $
bool
ÁÁ$ (
selectingScore
ÁÁ) 7
,
ÁÁ7 8
int
ÁÁ9 <
index
ÁÁ= B
,
ÁÁB C
string
ÁÁD J
line
ÁÁK O
)
ÁÁO P
{ËË 
Console
ÈÈ 
.
ÈÈ 	
Write
ÈÈ	 
(
ÈÈ 
$"
ÈÈ 
$str
ÈÈ 
"
ÈÈ 
)
ÈÈ 
;
ÈÈ 
if
ÍÍ 
(
ÍÍ 
selectingScore
ÍÍ 
&&
ÍÍ 
scoreSelection
ÍÍ %
==
ÍÍ& (
index
ÍÍ) .
)
ÍÍ. /
{
ÎÎ 
Console
ÏÏ 	
.
ÏÏ	 

ForegroundColor
ÏÏ
 
=
ÏÏ 
ConsoleColor
ÏÏ (
.
ÏÏ( )
Yellow
ÏÏ) /
;
ÏÏ/ 0
Console
ÌÌ 	
.
ÌÌ	 

Write
ÌÌ
 
(
ÌÌ 
$char
ÌÌ 
)
ÌÌ 
;
ÌÌ 
}
ÓÓ 
else
ÔÔ 
{
 
Console
ÒÒ 	
.
ÒÒ	 

Write
ÒÒ
 
(
ÒÒ 
$str
ÒÒ 
)
ÒÒ 
;
ÒÒ 
}
ÚÚ 
Console
ÛÛ 
.
ÛÛ 	
Write
ÛÛ	 
(
ÛÛ 
$"
ÛÛ 
$str
ÛÛ 
{
ÛÛ 
line
ÛÛ 
}
ÛÛ 
$str
ÛÛ 
{
ÛÛ 
RenderScore
ÛÛ %
(
ÛÛ% &
scores
ÛÛ& ,
[
ÛÛ, -
index
ÛÛ- 2
]
ÛÛ2 3
)
ÛÛ3 4
}
ÛÛ4 5
$str
ÛÛ5 6
"
ÛÛ6 7
)
ÛÛ7 8
;
ÛÛ8 9
Console
ÙÙ 
.
ÙÙ 	
ForegroundColor
ÙÙ	 
=
ÙÙ 
ConsoleColor
ÙÙ '
.
ÙÙ' (
White
ÙÙ( -
;
ÙÙ- .
Console
ıı 
.
ıı 	
	WriteLine
ıı	 
(
ıı 
$"
ıı 
$str
ıı 
"
ıı 
)
ıı 
;
ıı 
}ˆˆ 
string¯¯ 
RenderScore
¯¯ 
(
¯¯ 
int
¯¯ 
?
¯¯ 
score
¯¯ 
)
¯¯ 
=>
¯¯ !
score
˘˘ 
switch
˘˘ 
{
˙˙ 
null
˚˚ 
=>
˚˚	 
$str
˚˚ 
,
˚˚ 
<
¸¸ 
$num
¸¸ 
=>
¸¸	 
$str
¸¸ 
+
¸¸ 
score
¸¸ 
.
¸¸ 
Value
¸¸ 
.
¸¸  
ToString
¸¸  (
(
¸¸( )
CultureInfo
¸¸) 4
.
¸¸4 5
InvariantCulture
¸¸5 E
)
¸¸E F
,
¸¸F G
<
˝˝ 
$num
˝˝ 
=>
˝˝	 
$str
˝˝ 
+
˝˝ 
score
˝˝ 
.
˝˝ 
Value
˝˝ 
.
˝˝  
ToString
˝˝  (
(
˝˝( )
CultureInfo
˝˝) 4
.
˝˝4 5
InvariantCulture
˝˝5 E
)
˝˝E F
,
˝˝F G
<
˛˛ 
$num
˛˛ 
=>
˛˛	 
$str
˛˛ 
+
˛˛ 
score
˛˛ 
.
˛˛ 
Value
˛˛ 
.
˛˛  
ToString
˛˛  (
(
˛˛( )
CultureInfo
˛˛) 4
.
˛˛4 5
InvariantCulture
˛˛5 E
)
˛˛E F
,
˛˛F G
_
ˇˇ 
=>
ˇˇ	 
score
ˇˇ 
.
ˇˇ 
Value
ˇˇ 
.
ˇˇ  
ToString
ˇˇ  (
(
ˇˇ( )
CultureInfo
ˇˇ) 4
.
ˇˇ4 5
InvariantCulture
ˇˇ5 E
)
ˇˇE F
,
ˇˇF G
}
ÄÄ 
;
ÄÄ 
voidÇÇ 
RollDice
ÇÇ 
(
ÇÇ 
bool
ÇÇ 
selectingDice
ÇÇ  
)
ÇÇ  !
{ÉÉ 
TimeSpan
ÑÑ 	
rollTime
ÑÑ
 
=
ÑÑ 
TimeSpan
ÑÑ 
.
ÑÑ 
FromSeconds
ÑÑ )
(
ÑÑ) *
$num
ÑÑ* -
)
ÑÑ- .
;
ÑÑ. /
DateTime
ÖÖ 	
start
ÖÖ
 
=
ÖÖ 
DateTime
ÖÖ 
.
ÖÖ 
Now
ÖÖ 
;
ÖÖ 
while
ÜÜ 
(
ÜÜ 
DateTime
ÜÜ 
.
ÜÜ 
Now
ÜÜ 
-
ÜÜ 
start
ÜÜ 
<
ÜÜ 
rollTime
ÜÜ '
)
ÜÜ' (
{
áá 
while
àà 
(
àà 	
Console
àà	 
.
àà 
KeyAvailable
àà 
)
àà 
{
ââ 
if
ää 
(
ää 
Console
ää 
.
ää 
ReadKey
ää 
(
ää 
true
ää 
)
ää 
.
ää 
Key
ää  
is
ää! #

ConsoleKey
ää$ .
.
ää. /
Escape
ää/ 5
)
ää5 6
{
ãã 
escape
åå 

=
åå 
true
åå 
;
åå 
return
çç 

;
çç
 
}
éé 
}
èè 
for
êê 
(
êê 
int
êê 

i
êê 
=
êê 
$num
êê 
;
êê 
i
êê 
<
êê 
dice
êê 
.
êê 
Length
êê !
;
êê! "
i
êê# $
++
êê$ &
)
êê& '
{
ëë 
if
íí 
(
íí 
!
íí 
locked
íí 
[
íí 
i
íí 
]
íí 
)
íí 
{
ìì 
dice
îî 
[
îî 	
i
îî	 

]
îî
 
=
îî 
random
îî 
.
îî 
Next
îî 
(
îî 
$num
îî 
,
îî 
$num
îî 
)
îî 
;
îî  
}
ïï 
}
ññ 
Render
óó 
(
óó 	
selectingDice
óó	 
,
óó 
false
óó 
,
óó 
false
óó $
)
óó$ %
;
óó% &
Console
òò 	
.
òò	 

Write
òò
 
(
òò 
blank
òò 
)
òò 
;
òò 
}
ôô 
}öö 
voidúú 
	PlayRound
úú 
(
úú 
)
úú 
{ùù 
Array
ûû 
.
ûû 
Fill
ûû 
(
ûû 
locked
ûû 
,
ûû 
false
ûû 
)
ûû 
;
ûû 
Render
üü 
(
üü 
false
üü 
,
üü 
false
üü 
,
üü 
false
üü 
)
üü 
;
üü 
Console
†† 
.
†† 	
Write
††	 
(
†† 
rollDice
†† 
)
†† 
;
†† 
PressToContinue
°° 
(
°° 

ConsoleKey
°° 
.
°° 
Spacebar
°° $
)
°°$ %
;
°°% &
if
¢¢ 
(
¢¢ 
escape
¢¢ 
)
¢¢ 
return
¢¢ 
;
¢¢ 
RollDice
££ 	
(
££	 

false
££
 
)
££ 
;
££ 
if
§§ 
(
§§ 
escape
§§ 
)
§§ 
return
§§ 
;
§§ 
Array
•• 
.
•• 
Fill
•• 
(
•• 
locked
•• 
,
•• 
true
•• 
)
•• 
;
•• 
DiceSelection
¶¶ 
(
¶¶ 
chooseDice2
¶¶ 
)
¶¶ 
;
¶¶ 
if
ßß 
(
ßß 
!
ßß 
locked
ßß 
.
ßß 
Contains
ßß 
(
ßß 
false
ßß 
)
ßß 
||
ßß 
escape
ßß  &
)
ßß& '
return
ßß( .
;
ßß. /
Render
®® 
(
®® 
true
®® 
,
®® 
false
®® 
,
®® 
true
®® 
)
®® 
;
®® 
Console
©© 
.
©© 	
Write
©©	 
(
©© 
rollDiceSmall
©© 
)
©© 
;
©© 
PressToContinue
™™ 
(
™™ 

ConsoleKey
™™ 
.
™™ 
Spacebar
™™ $
)
™™$ %
;
™™% &
if
´´ 
(
´´ 
escape
´´ 
)
´´ 
return
´´ 
;
´´ 
RollDice
¨¨ 	
(
¨¨	 

false
¨¨
 
)
¨¨ 
;
¨¨ 
if
≠≠ 
(
≠≠ 
escape
≠≠ 
)
≠≠ 
return
≠≠ 
;
≠≠ 
Array
ÆÆ 
.
ÆÆ 
Fill
ÆÆ 
(
ÆÆ 
locked
ÆÆ 
,
ÆÆ 
true
ÆÆ 
)
ÆÆ 
;
ÆÆ 
DiceSelection
ØØ 
(
ØØ 
chooseDice1
ØØ 
)
ØØ 
;
ØØ 
if
∞∞ 
(
∞∞ 
!
∞∞ 
locked
∞∞ 
.
∞∞ 
Contains
∞∞ 
(
∞∞ 
false
∞∞ 
)
∞∞ 
||
∞∞ 
escape
∞∞  &
)
∞∞& '
return
∞∞( .
;
∞∞. /
Render
±± 
(
±± 
true
±± 
,
±± 
false
±± 
,
±± 
true
±± 
)
±± 
;
±± 
Console
≤≤ 
.
≤≤ 	
Write
≤≤	 
(
≤≤ 
rollDiceSmall
≤≤ 
)
≤≤ 
;
≤≤ 
PressToContinue
≥≥ 
(
≥≥ 

ConsoleKey
≥≥ 
.
≥≥ 
Spacebar
≥≥ $
)
≥≥$ %
;
≥≥% &
if
¥¥ 
(
¥¥ 
escape
¥¥ 
)
¥¥ 
return
¥¥ 
;
¥¥ 
RollDice
µµ 	
(
µµ	 

false
µµ
 
)
µµ 
;
µµ 
if
∂∂ 
(
∂∂ 
escape
∂∂ 
)
∂∂ 
return
∂∂ 
;
∂∂ 
}∑∑ 
voidππ 
DiceSelection
ππ 
(
ππ 
string
ππ 
message
ππ !
)
ππ! "
{∫∫ 
diceSelection
ªª 
=
ªª 
$num
ªª 
;
ªª 
GetInputºº 
:
ºº 	
Render
ΩΩ 
(
ΩΩ 
true
ΩΩ 
,
ΩΩ 
false
ΩΩ 
,
ΩΩ 
false
ΩΩ 
)
ΩΩ 
;
ΩΩ 
Console
ææ 
.
ææ 	
Write
ææ	 
(
ææ 
message
ææ 
)
ææ 
;
ææ 
switch
øø 
(
øø 	
Console
øø	 
.
øø 
ReadKey
øø 
(
øø 
true
øø 
)
øø 
.
øø 
Key
øø "
)
øø" #
{
¿¿ 
case
¡¡ 

ConsoleKey
¡¡ 
.
¡¡ 
	LeftArrow
¡¡ 
:
¡¡ 
diceSelection
¡¡ *
=
¡¡+ ,
Math
¡¡- 1
.
¡¡1 2
Max
¡¡2 5
(
¡¡5 6
diceSelection
¡¡6 C
-
¡¡D E
$num
¡¡F G
,
¡¡G H
$num
¡¡I J
)
¡¡J K
;
¡¡K L
goto
¡¡M Q
GetInput
¡¡R Z
;
¡¡Z [
case
¬¬ 

ConsoleKey
¬¬ 
.
¬¬ 

RightArrow
¬¬ 
:
¬¬ 
diceSelection
¬¬ +
=
¬¬, -
Math
¬¬. 2
.
¬¬2 3
Min
¬¬3 6
(
¬¬6 7
diceSelection
¬¬7 D
+
¬¬E F
$num
¬¬G H
,
¬¬H I
dice
¬¬J N
.
¬¬N O
Length
¬¬O U
-
¬¬V W
$num
¬¬X Y
)
¬¬Y Z
;
¬¬Z [
goto
¬¬\ `
GetInput
¬¬a i
;
¬¬i j
case
√√ 

ConsoleKey
√√ 
.
√√ 
UpArrow
√√ 
:
√√ 
locked
√√ !
[
√√! "
diceSelection
√√" /
]
√√/ 0
=
√√1 2
!
√√3 4
locked
√√4 :
[
√√: ;
diceSelection
√√; H
]
√√H I
;
√√I J
goto
√√K O
GetInput
√√P X
;
√√X Y
case
ƒƒ 

ConsoleKey
ƒƒ 
.
ƒƒ 
Enter
ƒƒ 
:
ƒƒ 
break
ƒƒ 
;
ƒƒ 
case
≈≈ 

ConsoleKey
≈≈ 
.
≈≈ 
Escape
≈≈ 
:
≈≈ 
escape
≈≈  
=
≈≈! "
true
≈≈# '
;
≈≈' (
return
≈≈) /
;
≈≈/ 0
default
∆∆ 	
:
∆∆	 

goto
∆∆ 
GetInput
∆∆ 
;
∆∆ 
}
«« 
}»» 
void   
ScoreSelection
   
(
   
)
   
{ÀÀ 
scoreSelection
ÃÃ 
=
ÃÃ 
$num
ÃÃ 
;
ÃÃ 
GetInputÕÕ 
:
ÕÕ 	
Render
ŒŒ 
(
ŒŒ 
false
ŒŒ 
,
ŒŒ 
true
ŒŒ 
,
ŒŒ 
false
ŒŒ 
)
ŒŒ 
;
ŒŒ 
Console
œœ 
.
œœ 	
Write
œœ	 
(
œœ 
selectScore
œœ 
)
œœ 
;
œœ 
switch
–– 
(
–– 	
Console
––	 
.
–– 
ReadKey
–– 
(
–– 
true
–– 
)
–– 
.
–– 
Key
–– "
)
––" #
{
—— 
case
““ 

ConsoleKey
““ 
.
““ 
UpArrow
““ 
:
““ 
scoreSelection
”” 
=
”” 
Math
”” 
.
”” 
Max
”” 
(
”” 
scoreSelection
”” +
-
””, -
$num
””. /
,
””/ 0
$num
””1 2
)
””2 3
;
””3 4
if
‘‘ 
(
‘‘ 
scoreSelection
‘‘ 
is
‘‘ 
$num
‘‘ 
)
‘‘ 
scoreSelection
‘‘ +
-=
‘‘, .
$num
‘‘/ 0
;
‘‘0 1
goto
’’ 
GetInput
’’ 
;
’’ 
case
÷÷ 

ConsoleKey
÷÷ 
.
÷÷ 
	DownArrow
÷÷ 
:
÷÷ 
scoreSelection
◊◊ 
=
◊◊ 
Math
◊◊ 
.
◊◊ 
Min
◊◊ 
(
◊◊ 
scoreSelection
◊◊ +
+
◊◊, -
$num
◊◊. /
,
◊◊/ 0
$num
◊◊1 3
)
◊◊3 4
;
◊◊4 5
if
ÿÿ 
(
ÿÿ 
scoreSelection
ÿÿ 
is
ÿÿ 
$num
ÿÿ 
)
ÿÿ 
scoreSelection
ÿÿ +
+=
ÿÿ, .
$num
ÿÿ/ 0
;
ÿÿ0 1
goto
ŸŸ 
GetInput
ŸŸ 
;
ŸŸ 
case
⁄⁄ 

ConsoleKey
⁄⁄ 
.
⁄⁄ 
Enter
⁄⁄ 
:
⁄⁄ 
if
€€ 
(
€€ 
scores
€€ 
[
€€ 
scoreSelection
€€ 
]
€€ 
is
€€  
null
€€! %
)
€€% &
{
‹‹ 
scores
›› 

[
››
 
scoreSelection
›› 
]
›› 
=
›› 
scoreSelection
›› +
switch
››, 2
{
ﬁﬁ 
$num
ﬂﬂ 
=>
ﬂﬂ 

dice
ﬂﬂ 
.
ﬂﬂ 
Count
ﬂﬂ 
(
ﬂﬂ 
v
ﬂﬂ 
=>
ﬂﬂ 
v
ﬂﬂ 
is
ﬂﬂ 
$num
ﬂﬂ  !
)
ﬂﬂ! "
,
ﬂﬂ" #
$num
‡‡ 
=>
‡‡ 

dice
‡‡ 
.
‡‡ 
Count
‡‡ 
(
‡‡ 
v
‡‡ 
=>
‡‡ 
v
‡‡ 
is
‡‡ 
$num
‡‡  !
)
‡‡! "
*
‡‡# $
$num
‡‡% &
,
‡‡& '
$num
·· 
=>
·· 

dice
·· 
.
·· 
Count
·· 
(
·· 
v
·· 
=>
·· 
v
·· 
is
·· 
$num
··  !
)
··! "
*
··# $
$num
··% &
,
··& '
$num
‚‚ 
=>
‚‚ 

dice
‚‚ 
.
‚‚ 
Count
‚‚ 
(
‚‚ 
v
‚‚ 
=>
‚‚ 
v
‚‚ 
is
‚‚ 
$num
‚‚  !
)
‚‚! "
*
‚‚# $
$num
‚‚% &
,
‚‚& '
$num
„„ 
=>
„„ 

dice
„„ 
.
„„ 
Count
„„ 
(
„„ 
v
„„ 
=>
„„ 
v
„„ 
is
„„ 
$num
„„  !
)
„„! "
*
„„# $
$num
„„% &
,
„„& '
$num
‰‰ 
=>
‰‰ 

dice
‰‰ 
.
‰‰ 
Count
‰‰ 
(
‰‰ 
v
‰‰ 
=>
‰‰ 
v
‰‰ 
is
‰‰ 
$num
‰‰  !
)
‰‰! "
*
‰‰# $
$num
‰‰% &
,
‰‰& '
$num
ÂÂ 
=>
ÂÂ 


Is3OfAKind
ÂÂ 
(
ÂÂ 
)
ÂÂ 
?
ÂÂ 
dice
ÂÂ 
.
ÂÂ 
Sum
ÂÂ "
(
ÂÂ" #
)
ÂÂ# $
:
ÂÂ% &
$num
ÂÂ' (
,
ÂÂ( )
$num
ÊÊ 
=>
ÊÊ 


Is4OfAKind
ÊÊ 
(
ÊÊ 
)
ÊÊ 
?
ÊÊ 
dice
ÊÊ 
.
ÊÊ 
Sum
ÊÊ "
(
ÊÊ" #
)
ÊÊ# $
:
ÊÊ% &
$num
ÊÊ' (
,
ÊÊ( )
$num
ÁÁ 
=>
ÁÁ 

IsFullHouse
ÁÁ 
(
ÁÁ 
)
ÁÁ 
?
ÁÁ 
$num
ÁÁ 
:
ÁÁ 
$num
ÁÁ  !
,
ÁÁ! "
$num
ËË 
=>
ËË 

IsSmallStraight
ËË 
(
ËË 
)
ËË 
?
ËË 
$num
ËË !
:
ËË" #
$num
ËË$ %
,
ËË% &
$num
ÈÈ 
=>
ÈÈ 

IsLargeStraight
ÈÈ 
(
ÈÈ 
)
ÈÈ 
?
ÈÈ 
$num
ÈÈ !
:
ÈÈ" #
$num
ÈÈ$ %
,
ÈÈ% &
$num
ÍÍ 
=>
ÍÍ 

	IsYahtzee
ÍÍ 
(
ÍÍ 
)
ÍÍ 
?
ÍÍ 
$num
ÍÍ 
:
ÍÍ 
$num
ÍÍ 
,
ÍÍ  
$num
ÎÎ 
=>
ÎÎ 

dice
ÎÎ 
.
ÎÎ 
Sum
ÎÎ 
(
ÎÎ 
)
ÎÎ 
,
ÎÎ 
_
ÏÏ 
=>
ÏÏ 

throw
ÏÏ 
new
ÏÏ 
	Exception
ÏÏ 
(
ÏÏ 
$str
ÏÏ 8
)
ÏÏ8 9
,
ÏÏ9 :
}
ÌÌ 
;
ÌÌ 
if
ÓÓ 
(
ÓÓ 
scores
ÓÓ 
[
ÓÓ 
$num
ÓÓ 
]
ÓÓ 
is
ÓÓ 
null
ÓÓ 
&&
ÓÓ 
!
ÓÓ 
scores
ÓÓ %
[
ÓÓ% &
..
ÓÓ& (
$num
ÓÓ( *
]
ÓÓ* +
.
ÓÓ+ ,
Contains
ÓÓ, 4
(
ÓÓ4 5
null
ÓÓ5 9
)
ÓÓ9 :
)
ÓÓ: ;
{
ÔÔ 
scores
 
[
 
$num
 
]
 
=
 
scores
 
[
 
..
 
$num
 
]
 
.
 
Sum
 "
(
" #
)
# $
>=
% '
$num
( *
?
+ ,
$num
- /
:
0 1
$num
2 3
;
3 4
Render
ÒÒ 
(
ÒÒ 
false
ÒÒ 
,
ÒÒ 
false
ÒÒ 
,
ÒÒ 
false
ÒÒ 
)
ÒÒ  
;
ÒÒ  !
Console
ÚÚ 
.
ÚÚ 
Write
ÚÚ 
(
ÚÚ 
scores
ÚÚ 
[
ÚÚ 
$num
ÚÚ 
]
ÚÚ 
is
ÚÚ  
$num
ÚÚ! "
?
ÚÚ# $
upperBonusFail
ÚÚ% 3
:
ÚÚ4 5
upperBonusSuccess
ÚÚ6 G
)
ÚÚG H
;
ÚÚH I
PressToContinue
ÛÛ 
(
ÛÛ 

ConsoleKey
ÛÛ 
.
ÛÛ  
Enter
ÛÛ  %
)
ÛÛ% &
;
ÛÛ& '
if
ÙÙ 
(
ÙÙ 	
escape
ÙÙ	 
)
ÙÙ 
return
ÙÙ 
;
ÙÙ 
}
ıı 
if
ˆˆ 
(
ˆˆ 
scores
ˆˆ 
[
ˆˆ 
$num
ˆˆ 
]
ˆˆ 
is
ˆˆ 
null
ˆˆ 
&&
ˆˆ 
!
ˆˆ 
scores
ˆˆ %
[
ˆˆ% &
..
ˆˆ& (
$num
ˆˆ( *
]
ˆˆ* +
.
ˆˆ+ ,
Contains
ˆˆ, 4
(
ˆˆ4 5
null
ˆˆ5 9
)
ˆˆ9 :
)
ˆˆ: ;
{
˜˜ 
scores
¯¯ 
[
¯¯ 
$num
¯¯ 
]
¯¯ 
=
¯¯ 
$num
¯¯ 
;
¯¯ 
}
˘˘ 
if
˙˙ 
(
˙˙ 
!
˙˙ 	
scores
˙˙	 
[
˙˙ 
..
˙˙ 
$num
˙˙ 
]
˙˙ 
.
˙˙ 
Contains
˙˙ 
(
˙˙ 
null
˙˙ #
)
˙˙# $
)
˙˙$ %
{
˚˚ 
scores
¸¸ 
[
¸¸ 
$num
¸¸ 
]
¸¸ 
=
¸¸ 
scores
¸¸ 
.
¸¸ 
Sum
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
}
˝˝ 
break
˛˛ 	
;
˛˛	 

}
ˇˇ 
else
ÄÄ 
{
ÅÅ 
Render
ÇÇ 

(
ÇÇ
 
false
ÇÇ 
,
ÇÇ 
true
ÇÇ 
,
ÇÇ 
false
ÇÇ 
)
ÇÇ 
;
ÇÇ 
Console
ÉÉ 
.
ÉÉ 
Write
ÉÉ 
(
ÉÉ  
selectScoreInvalid
ÉÉ $
)
ÉÉ$ %
;
ÉÉ% &
PressToContinue
ÑÑ 
(
ÑÑ 

ConsoleKey
ÑÑ 
.
ÑÑ 
Enter
ÑÑ $
)
ÑÑ$ %
;
ÑÑ% &
if
ÖÖ 
(
ÖÖ 
escape
ÖÖ 
)
ÖÖ 
return
ÖÖ 
;
ÖÖ 
goto
ÜÜ 
GetInput
ÜÜ	 
;
ÜÜ 
}
áá 
case
àà 

ConsoleKey
àà 
.
àà 
Escape
àà 
:
àà 
escape
ââ 	
=
ââ
 
true
ââ 
;
ââ 
return
ää 	
;
ää	 

default
ãã 	
:
ãã	 

goto
åå 
GetInput
åå 
;
åå 
}
çç 
}éé 
voidêê 
PressToContinue
êê 
(
êê 

ConsoleKey
êê 
key
êê  #
)
êê# $
{ëë 
GetInputíí 
:
íí 	

ConsoleKey
ìì 
input
ìì 
=
ìì 
Console
ìì 
.
ìì 
ReadKey
ìì #
(
ìì# $
true
ìì$ (
)
ìì( )
.
ìì) *
Key
ìì* -
;
ìì- .
if
îî 
(
îî 
input
îî 

is
îî 

ConsoleKey
îî 
.
îî 
Escape
îî 
)
îî  
{
ïï 
escape
ññ 
=
ññ	 

true
ññ 
;
ññ 
return
óó 
;
óó 	
}
òò 
if
ôô 
(
ôô 
input
ôô 

!=
ôô 
key
ôô 
)
ôô 
{
öö 
goto
õõ 
GetInput
õõ 
;
õõ 
}
úú 
}ùù 
boolüü 
IsFullHouse
üü 
(
üü 
)
üü 
{†† 
int
°° 
[
°° 
]
°° 
values
°° 
=
°° 
new
°° 
int
°° 
[
°° 
$num
°° 
]
°° 
;
°° 
for
¢¢ 
(
¢¢ 
int
¢¢ 	
i
¢¢
 
=
¢¢ 
$num
¢¢ 
;
¢¢ 
i
¢¢ 
<
¢¢ 
dice
¢¢ 
.
¢¢ 
Length
¢¢  
;
¢¢  !
i
¢¢" #
++
¢¢# %
)
¢¢% &
{
££ 
values
§§ 
[
§§ 	
dice
§§	 
[
§§ 
i
§§ 
]
§§ 
-
§§ 
$num
§§ 
]
§§ 
++
§§ 
;
§§ 
}
•• 
return
¶¶ 
values
¶¶ 
.
¶¶ 
Contains
¶¶ 
(
¶¶ 
$num
¶¶ 
)
¶¶ 
&&
¶¶ 
values
¶¶ $
.
¶¶$ %
Contains
¶¶% -
(
¶¶- .
$num
¶¶. /
)
¶¶/ 0
;
¶¶0 1
}ßß 
bool©© 

Is3OfAKind
©© 
(
©© 
)
©© 
=>
©© 
GetMaxMatches
©© "
(
©©" #
)
©©# $
>=
©©% '
$num
©©( )
;
©©) *
bool´´ 

Is4OfAKind
´´ 
(
´´ 
)
´´ 
=>
´´ 
GetMaxMatches
´´ "
(
´´" #
)
´´# $
>=
´´% '
$num
´´( )
;
´´) *
bool≠≠ 
	IsYahtzee
≠≠ 
(
≠≠ 
)
≠≠ 
=>
≠≠ 
GetMaxMatches
≠≠ !
(
≠≠! "
)
≠≠" #
is
≠≠$ &
$num
≠≠' (
;
≠≠( )
intØØ 
GetMaxMatches
ØØ 
(
ØØ 
)
ØØ 
{∞∞ 
int
±± 
[
±± 
]
±± 
values
±± 
=
±± 
new
±± 
int
±± 
[
±± 
$num
±± 
]
±± 
;
±± 
for
≤≤ 
(
≤≤ 
int
≤≤ 	
i
≤≤
 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
i
≤≤ 
<
≤≤ 
dice
≤≤ 
.
≤≤ 
Length
≤≤  
;
≤≤  !
i
≤≤" #
++
≤≤# %
)
≤≤% &
{
≥≥ 
values
¥¥ 
[
¥¥ 	
dice
¥¥	 
[
¥¥ 
i
¥¥ 
]
¥¥ 
-
¥¥ 
$num
¥¥ 
]
¥¥ 
++
¥¥ 
;
¥¥ 
}
µµ 
return
∂∂ 
values
∂∂ 
.
∂∂ 
Max
∂∂ 
(
∂∂ 
)
∂∂ 
;
∂∂ 
}∑∑ 
boolππ 
IsSmallStraight
ππ 
(
ππ 
)
ππ 
=>
ππ 
GetMaxDiceInARow
ππ *
(
ππ* +
)
ππ+ ,
>=
ππ- /
$num
ππ0 1
;
ππ1 2
boolªª 
IsLargeStraight
ªª 
(
ªª 
)
ªª 
=>
ªª 
GetMaxDiceInARow
ªª *
(
ªª* +
)
ªª+ ,
>=
ªª- /
$num
ªª0 1
;
ªª1 2
intΩΩ 
GetMaxDiceInARow
ΩΩ 
(
ΩΩ 
)
ΩΩ 
{ææ 
int
øø 
[
øø 
]
øø 
values
øø 
=
øø 
new
øø 
int
øø 
[
øø 
$num
øø 
]
øø 
;
øø 
for
¿¿ 
(
¿¿ 
int
¿¿ 	
i
¿¿
 
=
¿¿ 
$num
¿¿ 
;
¿¿ 
i
¿¿ 
<
¿¿ 
dice
¿¿ 
.
¿¿ 
Length
¿¿  
;
¿¿  !
i
¿¿" #
++
¿¿# %
)
¿¿% &
{
¡¡ 
values
¬¬ 
[
¬¬ 	
dice
¬¬	 
[
¬¬ 
i
¬¬ 
]
¬¬ 
-
¬¬ 
$num
¬¬ 
]
¬¬ 
++
¬¬ 
;
¬¬ 
}
√√ 
int
ƒƒ 
	maxInARow
ƒƒ 
=
ƒƒ 
$num
ƒƒ 
;
ƒƒ 
int
≈≈ 
inARow
≈≈ 
=
≈≈ 
$num
≈≈ 
;
≈≈ 
for
∆∆ 
(
∆∆ 
int
∆∆ 	
i
∆∆
 
=
∆∆ 
$num
∆∆ 
;
∆∆ 
i
∆∆ 
<
∆∆ 
values
∆∆ 
.
∆∆ 
Length
∆∆ "
;
∆∆" #
i
∆∆$ %
++
∆∆% '
)
∆∆' (
{
«« 
if
»» 
(
»» 
values
»» 
[
»» 
i
»» 
]
»» 
>
»» 
$num
»» 
)
»» 
{
…… 
inARow
   	
++
  	 
;
   
}
ÀÀ 
else
ÃÃ 
{
ÕÕ 
	maxInARow
ŒŒ 
=
ŒŒ 
Math
ŒŒ 
.
ŒŒ 
Max
ŒŒ 
(
ŒŒ 
	maxInARow
ŒŒ !
,
ŒŒ! "
inARow
ŒŒ# )
)
ŒŒ) *
;
ŒŒ* +
inARow
œœ 	
=
œœ
 
$num
œœ 
;
œœ 
}
–– 
}
—— 
return
““ 
Math
““ 
.
““ 
Max
““ 
(
““ 
	maxInARow
““ 
,
““ 
inARow
““ "
)
““" #
;
““# $
}”” 
void’’ 
EnsureConsoleSize
’’ 
(
’’ 
)
’’ 
{÷÷ 
int
◊◊ 
width
◊◊ 

=
◊◊ 
Console
◊◊ 
.
◊◊ 
WindowWidth
◊◊  
;
◊◊  !
int
ÿÿ 
height
ÿÿ 
=
ÿÿ 
Console
ÿÿ 
.
ÿÿ 
WindowHeight
ÿÿ "
;
ÿÿ" #
while
ŸŸ 
(
ŸŸ 
!
ŸŸ 	
escape
ŸŸ	 
&&
ŸŸ 
(
ŸŸ 
width
ŸŸ 
<
ŸŸ 
minWidth
ŸŸ $
||
ŸŸ% '
height
ŸŸ( .
<
ŸŸ/ 0
	minHeight
ŸŸ1 :
)
ŸŸ: ;
)
ŸŸ; <
{
⁄⁄ 
Console
€€ 	
.
€€	 

Clear
€€
 
(
€€ 
)
€€ 
;
€€ 
Console
‹‹ 	
.
‹‹	 

	WriteLine
‹‹
 
(
‹‹ 
$str
‹‹ @
)
‹‹@ A
;
‹‹A B
bool
›› 
enter
›› 
=
›› 
false
›› 
;
›› 
while
ﬁﬁ 
(
ﬁﬁ 	
!
ﬁﬁ	 

escape
ﬁﬁ
 
&&
ﬁﬁ 
!
ﬁﬁ 
enter
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
switch
‡‡ 	
(
‡‡
 
Console
‡‡ 
.
‡‡ 
ReadKey
‡‡ 
(
‡‡ 
true
‡‡ 
)
‡‡  
.
‡‡  !
Key
‡‡! $
)
‡‡$ %
{
·· 
case
‚‚ 

ConsoleKey
‚‚	 
.
‚‚ 
Enter
‚‚ 
:
‚‚ 
enter
„„ 

=
„„ 
true
„„ 
;
„„ 
break
‰‰ 

;
‰‰
 
case
ÂÂ 

ConsoleKey
ÂÂ	 
.
ÂÂ 
Escape
ÂÂ 
:
ÂÂ 
escape
ÊÊ 
=
ÊÊ 
true
ÊÊ 
;
ÊÊ 
break
ÁÁ 

;
ÁÁ
 
}
ËË 
}
ÈÈ 
width
ÍÍ 
=
ÍÍ 	
Console
ÍÍ
 
.
ÍÍ 
WindowWidth
ÍÍ 
;
ÍÍ 
height
ÎÎ 
=
ÎÎ	 

Console
ÎÎ 
.
ÎÎ 
WindowHeight
ÎÎ 
;
ÎÎ  
Console
ÏÏ 	
.
ÏÏ	 

Clear
ÏÏ
 
(
ÏÏ 
)
ÏÏ 
;
ÏÏ 
}
ÌÌ 
}ÓÓ 
ôµ
WC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Wumpus World\Program.cs
( 
int 
X 
, 
int 
Y 
) 
PlayerLocation 
; 
Tile 
[ 
, 
] 
Map 
; 
bool		 
InvalidInput		 
=		 
false		 
;		 
Home

 
:

 
Console 
. 
Clear 
( 
) 
; 
Console 
. 
	WriteLine 
( 
$str #
)# $
;$ %
Console 
. 
	WriteLine 
( 
) 
; 
Console 
. 
	WriteLine 
( 
$str 
) 
; 
Console 
. 
	WriteLine 
( 
) 
; 
Console 
. 
	WriteLine 
( 
$str 2
+3 4
$str 3
+4 5
$str 
) 
; 
Console 
. 
	WriteLine 
( 
) 
; 
Console 
. 
	WriteLine 
( 
$str 6
)6 7
;7 8
Console 
. 
	WriteLine 
( 
$str +
)+ ,
;, -
Console 
. 
	WriteLine 
( 
$str #
)# $
;$ %
Console 
. 
	WriteLine 
( 
) 
; 
if 
( 
InvalidInput 
) 
{ 
Console 
. 	
	WriteLine	 
( 
$str 0
)0 1
;1 2
InvalidInput 
= 
false 
; 
} 
Console 
. 
Write 
( 
$str 
) 
; 
switch 
( 
Console 
. 
ReadLine 
( 
) 
) 
{   
case!! 
$str!! 
:!! 
Quit!! 
(!! 
)!! 
;!! 
goto!! 
Home!! 
;!!  
case"" 
$str"" 
:"" 
Info"" 
("" 
)"" 
;"" 
goto"" 
Home"" 
;""  
case## 
$str## 
:## 
GenerateCave## 
(## 
)## 
;## 
Play## !
(##! "
)##" #
;### $
goto##% )
Home##* .
;##. /
default$$ 
:$$ 	
InvalidInput$$
 
=$$ 
true$$ 
;$$ 
goto$$ #
Home$$$ (
;$$( )
}%% 
;%% 
void'' 
Info'' 	
(''	 

)''
 
{(( 
Console)) 
.)) 	
Clear))	 
()) 
))) 
;)) 
Console** 
.** 	
	WriteLine**	 
(** 
$str** $
)**$ %
;**% &
Console++ 
.++ 	
	WriteLine++	 
(++ 
)++ 
;++ 
Console,, 
.,, 	
	WriteLine,,	 
(,, 
$str,, 
),, 
;,, 
Console-- 
.-- 	
	WriteLine--	 
(-- 
)-- 
;-- 
Console.. 
... 	
	WriteLine..	 
(.. 
$str// 9
+//: ;
$str00 :
+00; <
$str11 6
+117 8
$str22 =
+22> ?
$str33 =
+33> ?
$str44 >
+44? @
$str55 (
)55( )
;55) *
Console66 
.66 	
	WriteLine66	 
(66 
)66 
;66 
Console77 
.77 	
	WriteLine77	 
(77 
$str77 -
)77- .
;77. /
Console88 
.88 	
ReadLine88	 
(88 
)88 
;88 
}99 
void;; 
Quit;; 	
(;;	 

);;
 
{<< 
bool== 
InvalidInput== 
=== 
false== 
;== 
Quit>> 
:>> 
Console?? 
.?? 	
Clear??	 
(?? 
)?? 
;?? 
Console@@ 
.@@ 	
	WriteLine@@	 
(@@ 
$str@@ $
)@@$ %
;@@% &
ConsoleAA 
.AA 	
	WriteLineAA	 
(AA 
)AA 
;AA 
ConsoleBB 
.BB 	
	WriteLineBB	 
(BB 
$strBB 
)BB 
;BB 
ConsoleCC 
.CC 	
	WriteLineCC	 
(CC 
)CC 
;CC 
ConsoleDD 
.DD 	
	WriteLineDD	 
(DD 
$strDD 3
)DD3 4
;DD4 5
ConsoleEE 
.EE 	
	WriteLineEE	 
(EE 
)EE 
;EE 
ConsoleFF 
.FF 	
	WriteLineFF	 
(FF 
$strFF 
)FF 
;FF  
ConsoleGG 
.GG 	
	WriteLineGG	 
(GG 
$strGG  
)GG  !
;GG! "
ConsoleHH 
.HH 	
	WriteLineHH	 
(HH 
)HH 
;HH 
ifII 
(II 
InvalidInputII 
)II 
{JJ 
ConsoleKK 	
.KK	 

	WriteLineKK
 
(KK 
$strKK 1
)KK1 2
;KK2 3
}LL 
ConsoleMM 
.MM 	
WriteMM	 
(MM 
$strMM 
)MM 
;MM 
switchNN 
(NN 	
ConsoleNN	 
.NN 
ReadLineNN 
(NN 
)NN 
)NN 
{OO 
casePP 
$strPP 
:PP 
ConsolePP 
.PP 
ClearPP 
(PP 
)PP 
;PP 
EnvironmentPP *
.PP* +
ExitPP+ /
(PP/ 0
$numPP0 1
)PP1 2
;PP2 3
returnPP4 :
;PP: ;
caseQQ 
$strQQ 
:QQ 
returnQQ 
;QQ 
defaultRR 	
:RR	 

InvalidInputRR 
=RR 
trueRR 
;RR 
gotoRR  $
QuitRR% )
;RR) *
}SS 
;SS 
}TT 
voidVV 
PlayVV 	
(VV	 

)VV
 
{WW 
IEnumerableXX 
<XX 
TileXX 
>XX 
AdjacentTilesXX  
(XX  !
)XX! "
{YY 
intZZ 
xZZ 
=ZZ 	
PlayerLocationZZ
 
.ZZ 
XZZ 
;ZZ 
int[[ 
y[[ 
=[[ 	
PlayerLocation[[
 
.[[ 
Y[[ 
;[[ 
if\\ 
(\\ 
x\\ 
>\\ 	
$num\\
 
)\\ 
yield\\ 
return\\ 
Map\\ 
[\\ 
x\\ 
-\\  !
$num\\" #
,\\# $
y\\% &
]\\& '
;\\' (
if]] 
(]] 
x]] 
<]] 	
Map]]
 
.]] 
	GetLength]] 
(]] 
$num]] 
)]] 
-]] 
$num]] 
)]] 
yield]]  %
return]]& ,
Map]]- 0
[]]0 1
x]]1 2
+]]3 4
$num]]5 6
,]]6 7
y]]8 9
]]]9 :
;]]: ;
if^^ 
(^^ 
y^^ 
>^^ 	
$num^^
 
)^^ 
yield^^ 
return^^ 
Map^^ 
[^^ 
x^^ 
,^^  
y^^! "
-^^# $
$num^^% &
]^^& '
;^^' (
if__ 
(__ 
y__ 
<__ 	
Map__
 
.__ 
	GetLength__ 
(__ 
$num__ 
)__ 
-__ 
$num__ 
)__ 
yield__  %
return__& ,
Map__- 0
[__0 1
x__1 2
,__2 3
y__4 5
+__6 7
$num__8 9
]__9 :
;__: ;
}`` 
boolbb 
AdjacentToWumpusbb 
(bb 
)bb 
=>bb 
AdjacentTilesbb )
(bb) *
)bb* +
.bb+ ,
Containsbb, 4
(bb4 5
Tilebb5 9
.bb9 :
Wumpusbb: @
)bb@ A
;bbA B
boolcc 
AdjacentToPitcc 
(cc 
)cc 
=>cc 
AdjacentTilescc &
(cc& '
)cc' (
.cc( )
Containscc) 1
(cc1 2
Tilecc2 6
.cc6 7
Pitcc7 :
)cc: ;
;cc; <
boolee 
InvalidInputee 
=ee 
falseee 
;ee 
stringff 
?ff 
moveff	 
=ff 
nullff 
;ff 
Playgg 
:gg 
Consolehh 
.hh 	
Clearhh	 
(hh 
)hh 
;hh 
Consoleii 
.ii 	
	WriteLineii	 
(ii 
$strii $
)ii$ %
;ii% &
Consolejj 
.jj 	
	WriteLinejj	 
(jj 
)jj 
;jj 
Consolekk 
.kk 	
	WriteLinekk	 
(kk 
$strkk 
)kk 
;kk 
Consolell 
.ll 	
	WriteLinell	 
(ll 
)ll 
;ll 
ifmm 
(mm 
movemm 	
ismm
 
notmm 
nullmm 
)mm 
{nn 
Consoleoo 	
.oo	 

	WriteLineoo
 
(oo 
moveoo 
)oo 
;oo 
Consolepp 	
.pp	 

	WriteLinepp
 
(pp 
)pp 
;pp 
}qq 
Consolerr 
.rr 	
Writerr	 
(rr 
$strrr 7
)rr7 8
;rr8 9
ifss 
(ss 
AdjacentToWumpusss 
(ss 
)ss 
)ss 
{tt 
Consoleuu 	
.uu	 

Writeuu
 
(uu 
$struu ?
)uu? @
;uu@ A
}vv 
ifww 
(ww 
AdjacentToPitww 
(ww 
)ww 
)ww 
{xx 
Consoleyy 	
.yy	 

Writeyy
 
(yy 
$stryy 6
)yy6 7
;yy7 8
}zz 
Console{{ 
.{{ 	
	WriteLine{{	 
({{ 
){{ 
;{{ 
Console|| 
.|| 	
	WriteLine||	 
(|| 
)|| 
;|| 
Console}} 
.}} 	
	WriteLine}}	 
(}} 
$str}} #
)}}# $
;}}$ %
Console~~ 
.~~ 	
	WriteLine~~	 
(~~ 
$str~~ %
)~~% &
;~~& '
Console 
. 	
	WriteLine	 
( 
$str %
)% &
;& '
Console
 
.
 	
	WriteLine
	 
(
 
$str
 &
)
& '
;
' (
Console
 
.
 	
	WriteLine
	 
(
 
$str
 -
)
- .
;
. /
Console
 
.
 	
	WriteLine
	 
(
 
$str
 %
)
% &
;
& '
Console
 
.
 	
	WriteLine
	 
(
 
)
 
;
 
if
 
(
 
InvalidInput
 
)
 
{
 
Console
 	
.
	 

	WriteLine

 
(
 
$str
 1
)
1 2
;
2 3
InvalidInput
 
=
 
false
 
;
 
}
 
Console
 
.
 	
Write
	 
(
 
$str
 
)
 
;
 
	Direction
 

movement
 
;
 
switch
 
(
 	
Console
	 
.
 
ReadLine
 
(
 
)
 
)
 
{
 
case
 
$str
 
:
 
Quit
 
(
 
)
 
;
 
goto
 
Play
  
;
  !
case
 
$str
 
:
 
Info
 
(
 
)
 
;
 
goto
 
Play
  
;
  !
case
 
$str
 
:
 
movement
 
=
 
	Direction
 !
.
! "
Up
" $
;
$ %
break
& +
;
+ ,
case
 
$str
 
:
 
movement
 
=
 
	Direction
 #
.
# $
Down
$ (
;
( )
break
* /
;
/ 0
case
 
$str
 
:
 
movement
 
=
 
	Direction
 #
.
# $
Left
$ (
;
( )
break
* /
;
/ 0
case
 
$str
 
:
 
movement
 
=
 
	Direction
 $
.
$ %
Right
% *
;
* +
break
, 1
;
1 2
default
 	
:
	 

InvalidInput
 
=
 
true
 
;
 
goto
  $
Play
% )
;
) *
}
 
;
 
bool
 
	insideMap
 
=
 
movement
 
switch
 !
{
 
	Direction
 
.
 
Up
 
=>
 
PlayerLocation
  
.
  !
Y
! "
<
# $
Map
% (
.
( )
	GetLength
) 2
(
2 3
$num
3 4
)
4 5
-
6 7
$num
8 9
,
9 :
	Direction
 
.
 
Down
 
=>
 
PlayerLocation
 "
.
" #
Y
# $
>
% &
$num
' (
,
( )
	Direction
 
.
 
Left
 
=>
 
PlayerLocation
 "
.
" #
X
# $
>
% &
$num
' (
,
( )
	Direction
 
.
 
Right
 
=>
 
PlayerLocation
 #
.
# $
X
$ %
<
& '
Map
( +
.
+ ,
	GetLength
, 5
(
5 6
$num
6 7
)
7 8
-
9 :
$num
; <
,
< =
_
 
=>
 
throw
 
new
 
	Exception
 
(
 
)
 
,
 
}
 
;
 
move
 
=
 
	insideMap
 
?
 
$str
 
+
 
movement
 
.
 
ToString
 $
(
$ %
)
% &
.
& '
ToLower
' .
(
. /
)
/ 0
+
1 2
$str
3 6
:
 
$str
 
+
 
movement
 #
.
# $
ToString
$ ,
(
, -
)
- .
.
. /
ToLower
/ 6
(
6 7
)
7 8
+
9 :
$str
; V
;
V W
if
   
(
   
	insideMap
   
)
   
{
¡¡ 
PlayerLocation
¢¢ 
=
¢¢ 
movement
¢¢ 
switch
¢¢ "
{
££ 
	Direction
¤¤ 
.
¤¤ 
Up
¤¤ 
=>
¤¤ 
(
¤¤ 
PlayerLocation
¤¤ "
.
¤¤" #
X
¤¤# $
,
¤¤$ %
PlayerLocation
¤¤& 4
.
¤¤4 5
Y
¤¤5 6
+
¤¤7 8
$num
¤¤9 :
)
¤¤: ;
,
¤¤; <
	Direction
¥¥ 
.
¥¥ 
Down
¥¥ 
=>
¥¥ 
(
¥¥ 
PlayerLocation
¥¥ $
.
¥¥$ %
X
¥¥% &
,
¥¥& '
PlayerLocation
¥¥( 6
.
¥¥6 7
Y
¥¥7 8
-
¥¥9 :
$num
¥¥; <
)
¥¥< =
,
¥¥= >
	Direction
¦¦ 
.
¦¦ 
Left
¦¦ 
=>
¦¦ 
(
¦¦ 
PlayerLocation
¦¦ $
.
¦¦$ %
X
¦¦% &
-
¦¦' (
$num
¦¦) *
,
¦¦* +
PlayerLocation
¦¦, :
.
¦¦: ;
Y
¦¦; <
)
¦¦< =
,
¦¦= >
	Direction
§§ 
.
§§ 
Right
§§ 
=>
§§ 
(
§§ 
PlayerLocation
§§ %
.
§§% &
X
§§& '
+
§§( )
$num
§§* +
,
§§+ ,
PlayerLocation
§§- ;
.
§§; <
Y
§§< =
)
§§= >
,
§§> ?
_
¨¨ 
=>
¨¨ 
throw
¨¨ 
new
¨¨ 
	Exception
¨¨ 
(
¨¨ 
)
¨¨ 
,
¨¨ 
}
©© 
;
©© 
switch
ªª 
(
ªª	 

Map
ªª
 
[
ªª 
PlayerLocation
ªª 
.
ªª 
X
ªª 
,
ªª 
PlayerLocation
ªª  .
.
ªª. /
Y
ªª/ 0
]
ªª0 1
)
ªª1 2
{
«« 
case
¬¬ 
Tile
¬¬ 
.
¬¬ 
Gold
¬¬ 
:
¬¬ 
Console
¬¬ 
.
¬¬ 
Clear
¬¬  
(
¬¬  !
)
¬¬! "
;
¬¬" #
Console
¬¬$ +
.
¬¬+ ,
	WriteLine
¬¬, 5
(
¬¬5 6
$str
¬¬6 z
)
¬¬z {
;
¬¬{ |
Console¬¬} 
.¬¬ 
ReadLine¬¬ 
(¬¬ 
)¬¬ 
;¬¬ 
return¬¬ 
;¬¬ 
case
­­ 
Tile
­­ 
.
­­ 
Wumpus
­­ 
:
­­ 
Console
­­ 
.
­­ 
Clear
­­ "
(
­­" #
)
­­# $
;
­­$ %
Console
­­& -
.
­­- .
	WriteLine
­­. 7
(
­­7 8
$str
­­8 `
)
­­` a
;
­­a b
Console
­­c j
.
­­j k
ReadLine
­­k s
(
­­s t
)
­­t u
;
­­u v
return
­­w }
;
­­} ~
case
®® 
Tile
®® 
.
®® 
Pit
®® 
:
®® 
Console
®® 
.
®® 
Clear
®® 
(
®®  
)
®®  !
;
®®! "
Console
®®# *
.
®®* +
	WriteLine
®®+ 4
(
®®4 5
$str
®®5 h
)
®®h i
;
®®i j
Console
®®k r
.
®®r s
ReadLine
®®s {
(
®®{ |
)
®®| }
;
®®} ~
return®® 
;®® 
}
¯¯ 
}
°° 
goto
±± 
Play
±± 

;
±±
 
}²² 
void´´ 
GenerateCave
´´ 
(
´´ 
)
´´ 
{µµ 
const
¶¶ 
int
¶¶ 

width
¶¶ 
=
¶¶ 
$num
¶¶ 
;
¶¶ 
const
·· 
int
·· 

height
·· 
=
·· 
$num
·· 
;
·· 
Map
¸¸ 
=
¸¸ 
new
¸¸ 

Tile
¸¸ 
[
¸¸ 
width
¸¸ 
,
¸¸ 
height
¸¸ 
]
¸¸ 
;
¸¸ 
Random
ºº 
random
ºº 
=
ºº 
new
ºº 
(
ºº 
)
ºº 
;
ºº 
(
»» 
int
»» 
X
»» 
,
»» 
int
»»	 
Y
»» 
)
»» 
[
»» 
]
»» 
randomCoordinates
»» #
=
»»$ %
random
»»& ,
.
»», -

NextUnique
»»- 7
(
»»7 8
$num
»»8 9
,
»»9 :
$num
»»; <
,
»»< =
(
»»> ?
width
»»? D
*
»»E F
height
»»G M
)
»»M N
)
»»N O
.
»»O P
Select
»»P V
(
»»V W
i
»»W X
=>
»»Y [
(
»»\ ]
i
»»] ^
/
»»_ `
width
»»a f
,
»»f g
i
»»h i
%
»»j k
width
»»l q
)
»»q r
)
»»r s
.
»»s t
ToArray
»»t {
(
»»{ |
)
»»| }
;
»»} ~
var
¼¼ 
wumpusLocation
¼¼ 
=
¼¼ 
randomCoordinates
¼¼ '
[
¼¼' (
$num
¼¼( )
]
¼¼) *
;
¼¼* +
var
½½ 
goldLocation
½½ 
=
½½ 
randomCoordinates
½½ %
[
½½% &
$num
½½& '
]
½½' (
;
½½( )
var
¾¾ 
pitLocations
¾¾ 
=
¾¾ 
randomCoordinates
¾¾ %
[
¾¾% &
$num
¾¾& '
..
¾¾' )
^
¾¾) *
$num
¾¾* +
]
¾¾+ ,
;
¾¾, -
Map
ÀÀ 
[
ÀÀ 
wumpusLocation
ÀÀ 
.
ÀÀ 
X
ÀÀ 
,
ÀÀ 
wumpusLocation
ÀÀ %
.
ÀÀ% &
Y
ÀÀ& '
]
ÀÀ' (
=
ÀÀ) *
Tile
ÀÀ+ /
.
ÀÀ/ 0
Wumpus
ÀÀ0 6
;
ÀÀ6 7
Map
ÁÁ 
[
ÁÁ 
goldLocation
ÁÁ 
.
ÁÁ 
X
ÁÁ 
,
ÁÁ 
goldLocation
ÁÁ !
.
ÁÁ! "
Y
ÁÁ" #
]
ÁÁ# $
=
ÁÁ% &
Tile
ÁÁ' +
.
ÁÁ+ ,
Gold
ÁÁ, 0
;
ÁÁ0 1
Array
ÂÂ 
.
ÂÂ 
ForEach
ÂÂ 
(
ÂÂ 
pitLocations
ÂÂ 
,
ÂÂ 
pit
ÂÂ  
=>
ÂÂ! #
Map
ÂÂ$ '
[
ÂÂ' (
pit
ÂÂ( +
.
ÂÂ+ ,
X
ÂÂ, -
,
ÂÂ- .
pit
ÂÂ/ 2
.
ÂÂ2 3
Y
ÂÂ3 4
]
ÂÂ4 5
=
ÂÂ6 7
Tile
ÂÂ8 <
.
ÂÂ< =
Pit
ÂÂ= @
)
ÂÂ@ A
;
ÂÂA B
PlayerLocation
ÄÄ 
=
ÄÄ 
default
ÄÄ 
;
ÄÄ 
}ÅÅ 
enumÇÇ 
	Direction
ÇÇ 
{ÈÈ 
Up
ÉÉ 
,
ÉÉ 
Down
ÊÊ 
,
ÊÊ 
Left
ËË 
,
ËË 
Right
ÌÌ 
,
ÌÌ 
}ÍÍ 
enumÏÏ 
Tile
ÏÏ 	
{ÐÐ 
Normal
ÑÑ 
=
ÑÑ 	
$num
ÑÑ
 
,
ÑÑ 
Wumpus
ÒÒ 
,
ÒÒ 
Gold
ÓÓ 
,
ÓÓ 
Pit
ÔÔ 
,
ÔÔ 
}ÕÕ 
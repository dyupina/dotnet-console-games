Îî
QC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Sudoku\Program.cs
bool 
closeRequested 
= 
false 
; 
while 
( 
! 
closeRequested 
) 
{ 
	NewPuzzle		 	
:			 

Console 
. 	
Clear	 
( 
) 
; 
int 
? 
[ 
, 
] 
generatedBoard	 
= 
Sudoku  
.  !
Generate! )
() *
)* +
;+ ,
int 
? 
[ 
, 
] 
activeBoard	 
= 
( 
int 
? 
[ 
, 
] 
)  
generatedBoard  .
.. /
Clone/ 4
(4 5
)5 6
;6 7
int 
x 
= 
$num	 

;
 
int 
y 
= 
$num	 

;
 
Console 
. 	
Clear	 
( 
) 
; 
while 
( 
! 	
closeRequested	 
&& 
ContainsNulls (
(( )
activeBoard) 4
)4 5
)5 6
{ 
Console 	
.	 

SetCursorPosition
 
( 
$num 
, 
$num  
)  !
;! "
Console 	
.	 

	WriteLine
 
( 
$str 
) 
; 
Console 	
.	 

	WriteLine
 
( 
) 
; 
ConsoleWrite 
( 
activeBoard 
, 
generatedBoard *
)* +
;+ ,
Console 	
.	 

	WriteLine
 
( 
) 
; 
Console 	
.	 

	WriteLine
 
( 
$str 8
)8 9
;9 :
Console 	
.	 

	WriteLine
 
( 
$str 1
)1 2
;2 3
Console 	
.	 

	WriteLine
 
( 
$str >
)> ?
;? @
Console 	
.	 

	WriteLine
 
( 
$str -
)- .
;. /
Console   	
.  	 

	WriteLine  
 
(   
$str   ;
)  ; <
;  < =
Console"" 	
.""	 

SetCursorPosition""
 
("" 
y"" 
*"" 
$num""  !
+""" #
$num""$ %
+""& '
(""( )
y"") *
/""+ ,
$num""- .
*""/ 0
$num""1 2
)""2 3
,""3 4
x""5 6
+""7 8
$num""9 :
+""; <
+""= >
(""> ?
x""? @
/""A B
$num""C D
)""D E
)""E F
;""F G
switch$$ 
($$	 

Console$$
 
.$$ 
ReadKey$$ 
($$ 
true$$ 
)$$ 
.$$  
Key$$  #
)$$# $
{%% 
case&& 

ConsoleKey&& 
.&& 
UpArrow&& 
:&& 
x&& 
=&& 
x&&  !
<=&&" $
$num&&% &
?&&' (
$num&&) *
:&&+ ,
x&&- .
-&&/ 0
$num&&1 2
;&&2 3
break&&4 9
;&&9 :
case'' 

ConsoleKey'' 
.'' 
	DownArrow'' 
:'' 
x'' 
=''  !
x''" #
>=''$ &
$num''' (
?'') *
$num''+ ,
:''- .
x''/ 0
+''1 2
$num''3 4
;''4 5
break''6 ;
;''; <
case(( 

ConsoleKey(( 
.(( 
	LeftArrow(( 
:(( 
y(( 
=((  !
y((" #
<=(($ &
$num((' (
?(() *
$num((+ ,
:((- .
y((/ 0
-((1 2
$num((3 4
;((4 5
break((6 ;
;((; <
case)) 

ConsoleKey)) 
.)) 

RightArrow)) 
:)) 
y))  
=))! "
y))# $
>=))% '
$num))( )
?))* +
$num)), -
:)). /
y))0 1
+))2 3
$num))4 5
;))5 6
break))7 <
;))< =
case++ 

ConsoleKey++ 
.++ 
D1++ 
:++ 
case++ 

ConsoleKey++ &
.++& '
NumPad1++' .
:++. /
activeBoard++0 ;
[++; <
x++< =
,++= >
y++? @
]++@ A
=++B C
IsValidMove++D O
(++O P
activeBoard++P [
,++[ \
generatedBoard++] k
,++k l
$num++m n
,++n o
x++p q
,++q r
y++s t
)++t u
?++v w
$num++x y
:++z {
activeBoard	++| á
[
++á à
x
++à â
,
++â ä
y
++ã å
]
++å ç
;
++ç é
break
++è î
;
++î ï
case,, 

ConsoleKey,, 
.,, 
D2,, 
:,, 
case,, 

ConsoleKey,, &
.,,& '
NumPad2,,' .
:,,. /
activeBoard,,0 ;
[,,; <
x,,< =
,,,= >
y,,? @
],,@ A
=,,B C
IsValidMove,,D O
(,,O P
activeBoard,,P [
,,,[ \
generatedBoard,,] k
,,,k l
$num,,m n
,,,n o
x,,p q
,,,q r
y,,s t
),,t u
?,,v w
$num,,x y
:,,z {
activeBoard	,,| á
[
,,á à
x
,,à â
,
,,â ä
y
,,ã å
]
,,å ç
;
,,ç é
break
,,è î
;
,,î ï
case-- 

ConsoleKey-- 
.-- 
D3-- 
:-- 
case-- 

ConsoleKey-- &
.--& '
NumPad3--' .
:--. /
activeBoard--0 ;
[--; <
x--< =
,--= >
y--? @
]--@ A
=--B C
IsValidMove--D O
(--O P
activeBoard--P [
,--[ \
generatedBoard--] k
,--k l
$num--m n
,--n o
x--p q
,--q r
y--s t
)--t u
?--v w
$num--x y
:--z {
activeBoard	--| á
[
--á à
x
--à â
,
--â ä
y
--ã å
]
--å ç
;
--ç é
break
--è î
;
--î ï
case.. 

ConsoleKey.. 
... 
D4.. 
:.. 
case.. 

ConsoleKey.. &
...& '
NumPad4..' .
:... /
activeBoard..0 ;
[..; <
x..< =
,..= >
y..? @
]..@ A
=..B C
IsValidMove..D O
(..O P
activeBoard..P [
,..[ \
generatedBoard..] k
,..k l
$num..m n
,..n o
x..p q
,..q r
y..s t
)..t u
?..v w
$num..x y
:..z {
activeBoard	..| á
[
..á à
x
..à â
,
..â ä
y
..ã å
]
..å ç
;
..ç é
break
..è î
;
..î ï
case// 

ConsoleKey// 
.// 
D5// 
:// 
case// 

ConsoleKey// &
.//& '
NumPad5//' .
://. /
activeBoard//0 ;
[//; <
x//< =
,//= >
y//? @
]//@ A
=//B C
IsValidMove//D O
(//O P
activeBoard//P [
,//[ \
generatedBoard//] k
,//k l
$num//m n
,//n o
x//p q
,//q r
y//s t
)//t u
?//v w
$num//x y
://z {
activeBoard	//| á
[
//á à
x
//à â
,
//â ä
y
//ã å
]
//å ç
;
//ç é
break
//è î
;
//î ï
case00 

ConsoleKey00 
.00 
D600 
:00 
case00 

ConsoleKey00 &
.00& '
NumPad600' .
:00. /
activeBoard000 ;
[00; <
x00< =
,00= >
y00? @
]00@ A
=00B C
IsValidMove00D O
(00O P
activeBoard00P [
,00[ \
generatedBoard00] k
,00k l
$num00m n
,00n o
x00p q
,00q r
y00s t
)00t u
?00v w
$num00x y
:00z {
activeBoard	00| á
[
00á à
x
00à â
,
00â ä
y
00ã å
]
00å ç
;
00ç é
break
00è î
;
00î ï
case11 

ConsoleKey11 
.11 
D711 
:11 
case11 

ConsoleKey11 &
.11& '
NumPad711' .
:11. /
activeBoard110 ;
[11; <
x11< =
,11= >
y11? @
]11@ A
=11B C
IsValidMove11D O
(11O P
activeBoard11P [
,11[ \
generatedBoard11] k
,11k l
$num11m n
,11n o
x11p q
,11q r
y11s t
)11t u
?11v w
$num11x y
:11z {
activeBoard	11| á
[
11á à
x
11à â
,
11â ä
y
11ã å
]
11å ç
;
11ç é
break
11è î
;
11î ï
case22 

ConsoleKey22 
.22 
D822 
:22 
case22 

ConsoleKey22 &
.22& '
NumPad822' .
:22. /
activeBoard220 ;
[22; <
x22< =
,22= >
y22? @
]22@ A
=22B C
IsValidMove22D O
(22O P
activeBoard22P [
,22[ \
generatedBoard22] k
,22k l
$num22m n
,22n o
x22p q
,22q r
y22s t
)22t u
?22v w
$num22x y
:22z {
activeBoard	22| á
[
22á à
x
22à â
,
22â ä
y
22ã å
]
22å ç
;
22ç é
break
22è î
;
22î ï
case33 

ConsoleKey33 
.33 
D933 
:33 
case33 

ConsoleKey33 &
.33& '
NumPad933' .
:33. /
activeBoard330 ;
[33; <
x33< =
,33= >
y33? @
]33@ A
=33B C
IsValidMove33D O
(33O P
activeBoard33P [
,33[ \
generatedBoard33] k
,33k l
$num33m n
,33n o
x33p q
,33q r
y33s t
)33t u
?33v w
$num33x y
:33z {
activeBoard	33| á
[
33á à
x
33à â
,
33â ä
y
33ã å
]
33å ç
;
33ç é
break
33è î
;
33î ï
case55 

ConsoleKey55 
.55 
End55 
:55 
goto55 
	NewPuzzle55 &
;55& '
case66 

ConsoleKey66 
.66 
	Backspace66 
:66 
case66 "

ConsoleKey66# -
.66- .
Delete66. 4
:664 5
activeBoard666 A
[66A B
x66B C
,66C D
y66E F
]66F G
=66H I
generatedBoard66J X
[66X Y
x66Y Z
,66Z [
y66\ ]
]66] ^
??66_ a
null66b f
;66f g
break66h m
;66m n
case77 

ConsoleKey77 
.77 
Escape77 
:77 
closeRequested77 )
=77* +
true77, 0
;770 1
break772 7
;777 8
}88 
}99 
if;; 
(;; 
!;; 
closeRequested;; 
);; 
{<< 
Console== 	
.==	 

Clear==
 
(== 
)== 
;== 
Console>> 	
.>>	 

	WriteLine>>
 
(>> 
$str>> 
)>> 
;>> 
Console?? 	
.??	 

	WriteLine??
 
(?? 
)?? 
;?? 
ConsoleWrite@@ 
(@@ 
activeBoard@@ 
,@@ 
generatedBoard@@ *
)@@* +
;@@+ ,
ConsoleAA 	
.AA	 

	WriteLineAA
 
(AA 
)AA 
;AA 
ConsoleBB 	
.BB	 

	WriteLineBB
 
(BB 
$strBB 
)BB 
;BB  
ConsoleCC 	
.CC	 

	WriteLineCC
 
(CC 
)CC 
;CC 
ConsoleDD 	
.DD	 

	WriteLineDD
 
(DD 
$strDD ;
)DD; <
;DD< =
GetInputEE 	
:EE	 

switchFF 
(FF	 

ConsoleFF
 
.FF 
ReadKeyFF 
(FF 
trueFF 
)FF 
.FF  
KeyFF  #
)FF# $
{GG 
caseHH 

ConsoleKeyHH 
.HH 
EnterHH 
:HH 
breakHH 
;HH  
caseII 

ConsoleKeyII 
.II 
EscapeII 
:II 
closeRequestedJJ 
=JJ 
trueJJ 
;JJ 
ConsoleKK 
.KK 
ClearKK 
(KK 
)KK 
;KK 
breakLL 	
;LL	 

defaultMM 

:MM
 
gotoMM 
GetInputMM 
;MM 
}NN 
}OO 
}PP 
ConsoleQQ 
.QQ 
ClearQQ 
(QQ 
)QQ 
;QQ 
ConsoleRR 
.RR 
WriteRR 
(RR 
$strRR "
)RR" #
;RR# $
boolTT 
IsValidMoveTT 
(TT 
intTT 
?TT 
[TT 
,TT 
]TT 
boardTT 
,TT 
intTT  #
?TT# $
[TT$ %
,TT% &
]TT& '
lockedBoardTT( 3
,TT3 4
intTT5 8
valueTT9 >
,TT> ?
intTT@ C
xTTD E
,TTE F
intTTG J
yTTK L
)TTL M
{UU 
ifWW 
(WW 
lockedBoardWW 
[WW 
xWW 
,WW 
yWW 
]WW 
isWW 
notWW 
nullWW "
)WW" #
{XX 
returnYY 
falseYY	 
;YY 
}ZZ 
for\\ 
(\\ 
int\\ 	
i\\
 
=\\ 
x\\ 
-\\ 
x\\ 
%\\ 
$num\\ 
;\\ 
i\\ 
<=\\ 
x\\ 
-\\  !
x\\" #
%\\$ %
$num\\& '
+\\( )
$num\\* +
;\\+ ,
i\\- .
++\\. 0
)\\0 1
{]] 
for^^ 
(^^ 
int^^ 

j^^ 
=^^ 
y^^ 
-^^ 
y^^ 
%^^ 
$num^^ 
;^^ 
j^^ 
<=^^ 
y^^  
-^^! "
y^^# $
%^^% &
$num^^' (
+^^) *
$num^^+ ,
;^^, -
j^^. /
++^^/ 1
)^^1 2
{__ 
if`` 
(`` 
board`` 
[`` 
i`` 
,`` 
j`` 
]`` 
==`` 
value`` 
)`` 
{aa 
returnbb 

falsebb 
;bb 
}cc 
}dd 
}ee 
forgg 
(gg 
intgg 	
igg
 
=gg 
$numgg 
;gg 
igg 
<gg 
$numgg 
;gg 
igg 
++gg 
)gg 
{hh 
ifii 
(ii 
boardii 
[ii 
xii 
,ii 
iii 
]ii 
==ii 
valueii 
)ii 
{jj 
returnkk 	
falsekk
 
;kk 
}ll 
}mm 
foroo 
(oo 
intoo 	
ioo
 
=oo 
$numoo 
;oo 
ioo 
<oo 
$numoo 
;oo 
ioo 
++oo 
)oo 
{pp 
ifqq 
(qq 
boardqq 
[qq 
iqq 
,qq 
yqq 
]qq 
==qq 
valueqq 
)qq 
{rr 
returnss 	
falsess
 
;ss 
}tt 
}uu 
returnvv 
truevv 
;vv 
}ww 
boolyy 
ContainsNullsyy 
(yy 
intyy 
?yy 
[yy 
,yy 
]yy 
boardyy  
)yy  !
{zz 
for{{ 
({{ 
int{{ 	
i{{
 
={{ 
$num{{ 
;{{ 
i{{ 
<{{ 
$num{{ 
;{{ 
i{{ 
++{{ 
){{ 
{|| 
for}} 
(}} 
int}} 

j}} 
=}} 
$num}} 
;}} 
j}} 
<}} 
$num}} 
;}} 
j}} 
++}} 
)}} 
{~~ 
if 
( 
board 
[ 
i 
, 
j 
] 
is 
null 
) 
{
ÄÄ 
return
ÅÅ 

true
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 
return
ÖÖ 
false
ÖÖ 
;
ÖÖ 
}ÜÜ 
voidàà 
ConsoleWrite
àà 
(
àà 
int
àà 
?
àà 
[
àà 
,
àà 
]
àà 
board
àà 
,
àà  
int
àà! $
?
àà$ %
[
àà% &
,
àà& '
]
àà' (
lockedBoard
àà) 4
)
àà4 5
{ââ 
ConsoleColor
ää 
consoleColor
ää 
=
ää 
Console
ää $
.
ää$ %
ForegroundColor
ää% 4
;
ää4 5
Console
ãã 
.
ãã 	
ForegroundColor
ãã	 
=
ãã 
ConsoleColor
ãã '
.
ãã' (
DarkGray
ãã( 0
;
ãã0 1
Console
åå 
.
åå 	
	WriteLine
åå	 
(
åå 
$str
åå .
)
åå. /
;
åå/ 0
for
çç 
(
çç 
int
çç 	
i
çç
 
=
çç 
$num
çç 
;
çç 
i
çç 
<
çç 
$num
çç 
;
çç 
i
çç 
++
çç 
)
çç 
{
éé 
Console
èè 	
.
èè	 

Write
èè
 
(
èè 
$str
èè 
)
èè 
;
èè 
for
êê 
(
êê 
int
êê 

j
êê 
=
êê 
$num
êê 
;
êê 
j
êê 
<
êê 
$num
êê 
;
êê 
j
êê 
++
êê 
)
êê 
{
ëë 
if
íí 
(
íí 
lockedBoard
íí 
is
íí 
not
íí 
null
íí 
&&
íí !
lockedBoard
íí" -
[
íí- .
i
íí. /
,
íí/ 0
j
íí1 2
]
íí2 3
is
íí4 6
not
íí7 :
null
íí; ?
)
íí? @
{
ìì 
Console
îî 
.
îî 
Write
îî 
(
îî 
(
îî 
lockedBoard
îî 
[
îî 
i
îî  
,
îî  !
j
îî" #
]
îî# $
.
îî$ %
HasValue
îî% -
?
îî. /
lockedBoard
îî0 ;
[
îî; <
i
îî< =
,
îî= >
j
îî? @
]
îî@ A
.
îîA B
ToString
îîB J
(
îîJ K
)
îîK L
:
îîM N
$str
îîO R
)
îîR S
+
îîT U
$str
îîV Y
)
îîY Z
;
îîZ [
}
ïï 
else
ññ 
{
óó 
Console
òò 
.
òò 
ForegroundColor
òò 
=
òò 
ConsoleColor
òò *
.
òò* +
White
òò+ 0
;
òò0 1
Console
ôô 
.
ôô 
Write
ôô 
(
ôô 
(
ôô 
board
ôô 
[
ôô 
i
ôô 
,
ôô 
j
ôô 
]
ôô 
.
ôô 
HasValue
ôô '
?
ôô( )
board
ôô* /
[
ôô/ 0
i
ôô0 1
,
ôô1 2
j
ôô3 4
]
ôô4 5
.
ôô5 6
ToString
ôô6 >
(
ôô> ?
)
ôô? @
:
ôôA B
$str
ôôC F
)
ôôF G
+
ôôH I
$str
ôôJ M
)
ôôM N
;
ôôN O
Console
öö 
.
öö 
ForegroundColor
öö 
=
öö 
ConsoleColor
öö *
.
öö* +
DarkGray
öö+ 3
;
öö3 4
}
õõ 
if
úú 
(
úú 
j
úú 
==
úú	 
$num
úú 
||
úú 
j
úú 
==
úú 
$num
úú 
)
úú 
{
ùù 
Console
ûû 
.
ûû 
Write
ûû 
(
ûû 
$str
ûû 
)
ûû 
;
ûû 
}
üü 
}
†† 
Console
°° 	
.
°°	 

	WriteLine
°°
 
(
°° 
$str
°° 
)
°° 
;
°° 
if
¢¢ 
(
¢¢ 
i
¢¢ 
==
¢¢ 

$num
¢¢ 
||
¢¢ 
i
¢¢ 
==
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 
Console
§§ 

.
§§
 
	WriteLine
§§ 
(
§§ 
$str
§§ 0
)
§§0 1
;
§§1 2
}
•• 
}
¶¶ 
Console
ßß 
.
ßß 	
	WriteLine
ßß	 
(
ßß 
$str
ßß .
)
ßß. /
;
ßß/ 0
Console
®® 
.
®® 	
ForegroundColor
®®	 
=
®® 
consoleColor
®® '
;
®®' (
}©© 
public´´ 
static
´´ 
class
´´ 
Sudoku
´´ 
{¨¨ 
public
≠≠ 
static
≠≠ 
int
≠≠ 
?
≠≠ 
[
≠≠ 
,
≠≠ 
]
≠≠ 
Generate
≠≠ 
(
≠≠  
Random
ÆÆ 
?
ÆÆ 	
random
ÆÆ
 
=
ÆÆ 
null
ÆÆ 
,
ÆÆ 
int
ØØ 
?
ØØ 
blanks
ØØ 
=
ØØ 
null
ØØ 
)
ØØ 
{
∞∞ 
random
±± 
??=
±±	 
new
±± 
Random
±± 
(
±± 
)
±± 
;
±± 
if
≤≤ 
(
≤≤ 
blanks
≤≤ 
.
≤≤ 
HasValue
≤≤ 
&&
≤≤ 
blanks
≤≤ 
<
≤≤  !
$num
≤≤" #
||
≤≤$ &
$num
≤≤' )
<
≤≤* +
blanks
≤≤, 2
)
≤≤2 3
{
≥≥ 
throw
¥¥ 
new
¥¥	 )
ArgumentOutOfRangeException
¥¥ (
(
¥¥( )
nameof
¥¥) /
(
¥¥/ 0
blanks
¥¥0 6
)
¥¥6 7
,
¥¥7 8
blanks
¥¥9 ?
.
¥¥? @
Value
¥¥@ E
,
¥¥E F
$"
¥¥G I
{
¥¥I J
nameof
¥¥J P
(
¥¥P Q
blanks
¥¥Q W
)
¥¥W X
}
¥¥X Y
$str
¥¥Y f
{
¥¥f g
nameof
¥¥g m
(
¥¥m n
blanks
¥¥n t
)
¥¥t u
}
¥¥u v
"
¥¥v w
)
¥¥w x
;
¥¥x y
}
µµ 
else
∂∂ 
if
∂∂ 	
(
∂∂
 
!
∂∂ 
blanks
∂∂ 
.
∂∂ 
HasValue
∂∂ 
)
∂∂ 
{
∑∑ 
blanks
∏∏ 	
=
∏∏
 
random
∏∏ 
.
∏∏ 
Next
∏∏ 
(
∏∏ 
$num
∏∏ 
,
∏∏ 
$num
∏∏ 
)
∏∏ 
;
∏∏ 
}
ππ 
int
ªª 
?
ªª 
[
ªª 
,
ªª 
]
ªª 	
board
ªª
 
=
ªª 
new
ªª 
int
ªª 
?
ªª 
[
ªª 
$num
ªª 
,
ªª 
$num
ªª 
]
ªª  
;
ªª  !
(
ºº 
int
ºº 
[
ºº 
]
ºº 
Values
ºº	 
,
ºº 
int
ºº 
Count
ºº 
)
ºº 
[
ºº 
,
ºº 
]
ºº 
valids
ºº %
=
ºº& '
new
ºº( +
(
ºº, -
int
ºº- 0
[
ºº0 1
]
ºº1 2
Values
ºº3 9
,
ºº9 :
int
ºº; >
Count
ºº? D
)
ººD E
[
ººE F
$num
ººF G
,
ººG H
$num
ººI J
]
ººJ K
;
ººK L
for
ΩΩ 
(
ΩΩ 
int
ΩΩ 

i
ΩΩ 
=
ΩΩ 
$num
ΩΩ 
;
ΩΩ 
i
ΩΩ 
<
ΩΩ 
$num
ΩΩ 
;
ΩΩ 
i
ΩΩ 
++
ΩΩ 
)
ΩΩ 
{
ææ 
for
øø 
(
øø 
int
øø 
j
øø 
=
øø 
$num
øø 
;
øø 
j
øø 
<
øø 
$num
øø 
;
øø 
j
øø 
++
øø 
)
øø 
{
¿¿ 
valids
¡¡ 

[
¡¡
 
i
¡¡ 
,
¡¡ 
j
¡¡ 
]
¡¡ 
=
¡¡ 
(
¡¡ 
new
¡¡ 
int
¡¡ 
[
¡¡ 
$num
¡¡ 
]
¡¡ 
,
¡¡ 
-
¡¡  !
$num
¡¡! "
)
¡¡" #
;
¡¡# $
}
¬¬ 
}
√√ 
void
«« 
GetValidValues
«« 
(
«« 
int
«« 
row
«« 
,
«« 
int
«« "
column
««# )
)
««) *
{
»» 
bool
…… 
SquareValid
…… 
(
…… 
int
…… 
value
…… 
,
…… 
int
…… "
row
……# &
,
……& '
int
……( +
column
……, 2
)
……2 3
{
   
for
ÀÀ 
(
ÀÀ 	
int
ÀÀ	 
i
ÀÀ 
=
ÀÀ 
row
ÀÀ 
-
ÀÀ 
row
ÀÀ 
%
ÀÀ 
$num
ÀÀ 
;
ÀÀ 
i
ÀÀ  !
<=
ÀÀ" $
row
ÀÀ% (
;
ÀÀ( )
i
ÀÀ* +
++
ÀÀ+ -
)
ÀÀ- .
{
ÃÃ 
for
ÕÕ 
(
ÕÕ	 

int
ÕÕ
 
j
ÕÕ 
=
ÕÕ 
column
ÕÕ 
-
ÕÕ 
column
ÕÕ !
%
ÕÕ" #
$num
ÕÕ$ %
;
ÕÕ% &
j
ÕÕ' (
<=
ÕÕ) +
column
ÕÕ, 2
-
ÕÕ3 4
column
ÕÕ5 ;
%
ÕÕ< =
$num
ÕÕ> ?
+
ÕÕ@ A
$num
ÕÕB C
&&
ÕÕD F
!
ÕÕG H
(
ÕÕH I
i
ÕÕI J
==
ÕÕK M
row
ÕÕN Q
&&
ÕÕR T
j
ÕÕU V
==
ÕÕW Y
column
ÕÕZ `
)
ÕÕ` a
;
ÕÕa b
j
ÕÕc d
++
ÕÕd f
)
ÕÕf g
{
ŒŒ 
if
œœ 
(
œœ	 

board
œœ
 
[
œœ 
i
œœ 
,
œœ 
j
œœ 
]
œœ 
==
œœ 
value
œœ 
)
œœ 
{
–– 
return
—— 
false
—— 
;
—— 
}
““ 
}
”” 
}
‘‘ 
return
’’ 

true
’’ 
;
’’ 
}
÷÷ 
bool
ÿÿ 
RowValid
ÿÿ 
(
ÿÿ 
int
ÿÿ 
value
ÿÿ 
,
ÿÿ 
int
ÿÿ 
row
ÿÿ  #
,
ÿÿ# $
int
ÿÿ% (
column
ÿÿ) /
)
ÿÿ/ 0
{
ŸŸ 
for
⁄⁄ 
(
⁄⁄ 	
int
⁄⁄	 
i
⁄⁄ 
=
⁄⁄ 
$num
⁄⁄ 
;
⁄⁄ 
i
⁄⁄ 
<
⁄⁄ 
column
⁄⁄ 
;
⁄⁄ 
i
⁄⁄  !
++
⁄⁄! #
)
⁄⁄# $
{
€€ 
if
‹‹ 
(
‹‹ 	
board
‹‹	 
[
‹‹ 
row
‹‹ 
,
‹‹ 
i
‹‹ 
]
‹‹ 
==
‹‹ 
value
‹‹ 
)
‹‹  
{
›› 
return
ﬁﬁ 
false
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
return
·· 

true
·· 
;
·· 
}
‚‚ 
bool
‰‰ 
ColumnValid
‰‰ 
(
‰‰ 
int
‰‰ 
value
‰‰ 
,
‰‰ 
int
‰‰ "
row
‰‰# &
,
‰‰& '
int
‰‰( +
column
‰‰, 2
)
‰‰2 3
{
ÂÂ 
for
ÊÊ 
(
ÊÊ 	
int
ÊÊ	 
i
ÊÊ 
=
ÊÊ 
$num
ÊÊ 
;
ÊÊ 
i
ÊÊ 
<
ÊÊ 
row
ÊÊ 
;
ÊÊ 
i
ÊÊ 
++
ÊÊ  
)
ÊÊ  !
{
ÁÁ 
if
ËË 
(
ËË 	
board
ËË	 
[
ËË 
i
ËË 
,
ËË 
column
ËË 
]
ËË 
==
ËË 
value
ËË "
)
ËË" #
{
ÈÈ 
return
ÍÍ 
false
ÍÍ 
;
ÍÍ 
}
ÎÎ 
}
ÏÏ 
return
ÌÌ 

true
ÌÌ 
;
ÌÌ 
}
ÓÓ 
valids
 	
[
	 

row

 
,
 
column
 
]
 
.
 
Count
 
=
 
$num
  
;
  !
for
ÒÒ 
(
ÒÒ 
int
ÒÒ 
i
ÒÒ 
=
ÒÒ 
$num
ÒÒ 
;
ÒÒ 
i
ÒÒ 
<=
ÒÒ 
$num
ÒÒ 
;
ÒÒ 
i
ÒÒ 
++
ÒÒ 
)
ÒÒ 
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
SquareValid
ÛÛ 
(
ÛÛ 
i
ÛÛ 
,
ÛÛ 
row
ÛÛ 
,
ÛÛ 
column
ÛÛ "
)
ÛÛ" #
&&
ÛÛ$ &
RowValid
ÙÙ 
(
ÙÙ 
i
ÙÙ 
,
ÙÙ 
row
ÙÙ 
,
ÙÙ 
column
ÙÙ 
)
ÙÙ 
&&
ÙÙ  
ColumnValid
ıı 
(
ıı 
i
ıı 
,
ıı 
row
ıı 
,
ıı 
column
ıı 
)
ıı  
)
ıı  !
{
ˆˆ 
valids
˜˜ 
[
˜˜ 
row
˜˜ 
,
˜˜ 
column
˜˜ 
]
˜˜ 
.
˜˜ 
Values
˜˜ 
[
˜˜  
valids
˜˜  &
[
˜˜& '
row
˜˜' *
,
˜˜* +
column
˜˜, 2
]
˜˜2 3
.
˜˜3 4
Count
˜˜4 9
++
˜˜9 ;
]
˜˜; <
=
˜˜= >
i
˜˜? @
;
˜˜@ A
}
¯¯ 
}
˘˘ 
}
˙˙ 
for
ˇˇ 
(
ˇˇ 
int
ˇˇ 

i
ˇˇ 
=
ˇˇ 
$num
ˇˇ 
;
ˇˇ 
i
ˇˇ 
<
ˇˇ 
$num
ˇˇ 
;
ˇˇ 
i
ˇˇ 
++
ˇˇ 
)
ˇˇ 
{
ÄÄ 
for
ÅÅ 
(
ÅÅ 
int
ÅÅ 
j
ÅÅ 
=
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
j
ÅÅ 
<
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
j
ÅÅ 
++
ÅÅ 
)
ÅÅ 
{
ÇÇ 
GetValidValues
ÉÉ 
(
ÉÉ 
i
ÉÉ 
,
ÉÉ 
j
ÉÉ 
)
ÉÉ 
;
ÉÉ 
while
ÑÑ 	
(
ÑÑ
 
valids
ÑÑ 
[
ÑÑ 
i
ÑÑ 
,
ÑÑ 
j
ÑÑ 
]
ÑÑ 
.
ÑÑ 
Count
ÑÑ 
==
ÑÑ  
$num
ÑÑ! "
)
ÑÑ" #
{
ÖÖ 
board
ÜÜ 

[
ÜÜ
 
i
ÜÜ 
,
ÜÜ 
j
ÜÜ 
]
ÜÜ 
=
ÜÜ 
null
ÜÜ 
;
ÜÜ 
i
áá 
=
áá 
j
áá	 

==
áá 
$num
áá 
?
áá 
i
áá 
-
áá 
$num
áá 
:
áá 
i
áá 
;
áá 
j
àà 
=
àà 
j
àà	 

==
àà 
$num
àà 
?
àà 
$num
àà 
:
àà 
j
àà 
-
àà 
$num
àà 
;
àà 
}
èè 
int
êê 
index
êê 
=
êê 
random
êê 
.
êê 
Next
êê 
(
êê 
$num
êê 
,
êê 
valids
êê %
[
êê% &
i
êê& '
,
êê' (
j
êê) *
]
êê* +
.
êê+ ,
Count
êê, 1
)
êê1 2
;
êê2 3
int
ëë 
value
ëë 
=
ëë 
valids
ëë 
[
ëë 
i
ëë 
,
ëë 
j
ëë 
]
ëë 
.
ëë 
Values
ëë #
[
ëë# $
index
ëë$ )
]
ëë) *
;
ëë* +
valids
íí 

[
íí
 
i
íí 
,
íí 
j
íí 
]
íí 
.
íí 
Values
íí 
[
íí 
index
íí 
]
íí 
=
íí  
valids
íí! '
[
íí' (
i
íí( )
,
íí) *
j
íí+ ,
]
íí, -
.
íí- .
Values
íí. 4
[
íí4 5
valids
íí5 ;
[
íí; <
i
íí< =
,
íí= >
j
íí? @
]
íí@ A
.
ííA B
Count
ííB G
-
ííH I
$num
ííJ K
]
ííK L
;
ííL M
valids
ìì 

[
ìì
 
i
ìì 
,
ìì 
j
ìì 
]
ìì 
.
ìì 
Count
ìì 
--
ìì 
;
ìì 
board
îî 	
[
îî	 

i
îî
 
,
îî 
j
îî 
]
îî 
=
îî 
value
îî 
;
îî 
}
õõ 
}
úú 
foreach
ûû 	
(
ûû
 
int
ûû 
i
ûû 
in
ûû 
random
ûû 
.
ûû 

NextUnique
ûû %
(
ûû% &
Math
ûû& *
.
ûû* +
Max
ûû+ .
(
ûû. /
$num
ûû/ 0
,
ûû0 1
blanks
ûû2 8
.
ûû8 9
Value
ûû9 >
)
ûû> ?
,
ûû? @
$num
ûûA B
,
ûûB C
$num
ûûD F
)
ûûF G
)
ûûG H
{
üü 
int
†† 
row
†† 

=
†† 
i
†† 
/
†† 
$num
†† 
;
†† 
int
°° 
column
°° 
=
°° 
i
°° 
%
°° 
$num
°° 
;
°° 
board
¢¢ 
[
¢¢ 	
row
¢¢	 
,
¢¢ 
column
¢¢ 
]
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 
return
•• 
board
••	 
;
•• 
}
¶¶ 
}ßß 
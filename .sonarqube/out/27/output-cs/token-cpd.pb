“◊
RC:\ProgramData\Jenkins\.jenkins\workspace\GamePipeline\Projects\Mancala\Program.cs
	Exception 	
?	 

	exception 
= 
null 
; 
int 
[ 
] 
pitsAndStores 
; 
int		 
[		 
]		 
changes		 
;		 
bool

 
closeRequested

 
;

 
State 
state 
; 
int 
	selection 
; 
Random 
random 
; 
try 
{ 
closeRequested 
= 
false 
; 
random 
= 	
new
 
Random 
( 
) 
; 
Console 
. 	
BackgroundColor	 
= 
ConsoleColor '
.' (
Black( -
;- .
Console 
. 	
ForegroundColor	 
= 
ConsoleColor '
.' (
White( -
;- .
Console 
. 	
Clear	 
( 
) 
; 

Initialize 
( 
) 
; 
GetInput 
: 	
if 
( 
state 

is 
State 
. !
OutOfMovesConfimation )
)) *
{  
MoveAllSeedsToStores 
( 
) 
; 
} 
Console 
. 	
CursorVisible	 
= 
false 
; 
Render 
( 
) 	
;	 

if 
( 
closeRequested 
) 
{ 
return   
;   	
}!! 
Console"" 
."" 	
CursorVisible""	 
="" 
false"" 
;"" 
switch## 
(## 	
Console##	 
.## 
ReadKey## 
(## 
true## 
)## 
.## 
Key## "
)##" #
{$$ 
case%% 

ConsoleKey%% 
.%% 
	LeftArrow%% 
:%% 
if&& 
(&& 
state&& 
is&& 
State&& 
.&& 
MoveSelection&& #
or&&$ &
State&&' ,
.&&, -
InvalidMove&&- 8
)&&8 9
{'' 
	selection(( 
=(( 
Math(( 
.(( 
Max(( 
((( 
$num(( 
,(( 
	selection(( %
-((& '
$num((( )
)(() *
;((* +
state)) 	
=))
 
State)) 
.)) 
MoveSelection)) 
;))  
}** 
goto++ 
GetInput++ 
;++ 
case,, 

ConsoleKey,, 
.,, 

RightArrow,, 
:,, 
if-- 
(-- 
state-- 
is-- 
State-- 
.-- 
MoveSelection-- #
or--$ &
State--' ,
.--, -
InvalidMove--- 8
)--8 9
{.. 
	selection// 
=// 
Math// 
.// 
Min// 
(// 
$num// 
,// 
	selection// %
+//& '
$num//( )
)//) *
;//* +
state00 	
=00
 
State00 
.00 
MoveSelection00 
;00  
}11 
goto22 
GetInput22 
;22 
case33 

ConsoleKey33 
.33 
Enter33 
:33 
switch44 	
(44
 
state44 
)44 
{55 
case66 
State66	 
.66 
MoveSelection66 
:66 
if77 
(77 	
pitsAndStores77	 
[77 
	selection77  
]77  !
>77" #
$num77$ %
)77% &
{88 
state99 
=99 
Move99 
(99 
	selection99 
)99 
?:: 
State::	 
.:: (
MoveConfirmationAndMoveAgain:: +
:;; 
State;;	 
.;; 
MoveConfirmation;; 
;;;  
}<< 
else== 	
{>> 
state?? 
=?? 
State?? 
.?? 
InvalidMove?? 
;??  
}@@ 
gotoAA 	
GetInputAA
 
;AA 
caseBB 
StateBB	 
.BB (
MoveConfirmationAndMoveAgainBB +
:BB+ ,
forCC 
(CC	 

intCC
 
iCC 
=CC 
$numCC 
;CC 
iCC 
<CC 
changesCC  
.CC  !
LengthCC! '
;CC' (
iCC) *
++CC* ,
)CC, -
{DD 
changesEE 
[EE 
iEE 
]EE 
=EE 
$numEE 
;EE 
}FF 
stateGG 

=GG 

IsGameOverGG 
(GG 
)GG 
?HH 
StateHH 
.HH !
OutOfMovesConfimationHH #
:II 
StateII 
.II 
MoveSelectionII 
;II 
gotoJJ 	
GetInputJJ
 
;JJ 
caseKK 
StateKK	 
.KK 
MoveConfirmationKK 
orKK  "
StateKK# (
.KK( )-
!OpponentMoveConfirmationMoveAgainKK) J
:KKJ K
forLL 
(LL	 

intLL
 
iLL 
=LL 
$numLL 
;LL 
iLL 
<LL 
changesLL  
.LL  !
LengthLL! '
;LL' (
iLL) *
++LL* ,
)LL, -
{MM 
changesNN 
[NN 
iNN 
]NN 
=NN 
$numNN 
;NN 
}OO 
statePP 

=PP 

IsGameOverQQ 
(QQ 
)QQ 
?QQ 
StateQQ 
.QQ !
OutOfMovesConfimationQQ 0
:QQ1 2
OpponentMoveRR 
(RR 
)RR 
?SS 
StateSS	 
.SS -
!OpponentMoveConfirmationMoveAgainSS 0
:TT 
StateTT	 
.TT $
OpponentMoveConfirmationTT '
;TT' (
gotoUU 	
GetInputUU
 
;UU 
caseVV 
StateVV	 
.VV $
OpponentMoveConfirmationVV '
:VV' (
forWW 
(WW	 

intWW
 
iWW 
=WW 
$numWW 
;WW 
iWW 
<WW 
changesWW  
.WW  !
LengthWW! '
;WW' (
iWW) *
++WW* ,
)WW, -
{XX 
changesYY 
[YY 
iYY 
]YY 
=YY 
$numYY 
;YY 
}ZZ 
state[[ 

=[[ 

IsGameOver[[ 
([[ 
)[[ 
?\\ 
State\\ 
.\\ !
OutOfMovesConfimation\\ #
:]] 
State]] 
.]] 
MoveSelection]] 
;]] 
goto^^ 	
GetInput^^
 
;^^ 
case__ 
State__	 
.__ !
OutOfMovesConfimation__ $
:__$ %
for`` 
(``	 

int``
 
i`` 
=`` 
$num`` 
;`` 
i`` 
<`` 
changes``  
.``  !
Length``! '
;``' (
i``) *
++``* ,
)``, -
{aa 
changesbb 
[bb 
ibb 
]bb 
=bb 
$numbb 
;bb 
}cc 
statedd 

=dd 
Statedd 
.dd  
GameOverConfirmationdd '
;dd' (
gotoee 	
GetInputee
 
;ee 
caseff 
Stateff	 
.ff  
GameOverConfirmationff #
:ff# $

Initializegg 
(gg 
)gg 
;gg 
gotohh 	
GetInputhh
 
;hh 
}ii 
gotojj 
GetInputjj 
;jj 
casekk 

ConsoleKeykk 
.kk 
Escapekk 
:kk 
closeRequestedll 
=ll 
truell 
;ll 
returnmm 	
;mm	 

defaultnn 	
:nn	 

gotooo 
GetInputoo 
;oo 
}pp 
}qq 
catchrr 
(rr 
	Exceptionrr 
err 
)rr 
{ss 
	exceptiontt 

=tt 
ett 
;tt 
throwuu 
;uu 
}vv 
finallyww 
{xx 
Consoleyy 
.yy 	

ResetColoryy	 
(yy 
)yy 
;yy 
Consolezz 
.zz 	
Clearzz	 
(zz 
)zz 
;zz 
Console{{ 
.{{ 	
	WriteLine{{	 
({{ 
	exception{{ 
?{{ 
.{{ 
ToString{{ &
({{& '
){{' (
??{{) +
$str{{, =
){{= >
;{{> ?
Console|| 
.|| 	
CursorVisible||	 
=|| 
true|| 
;|| 
}}} 
void 

Initialize 
( 
) 
{ÄÄ 
state
ÅÅ 
=
ÅÅ 
State
ÅÅ	 
.
ÅÅ 
MoveSelection
ÅÅ 
;
ÅÅ 
	selection
ÇÇ 

=
ÇÇ 
$num
ÇÇ 
;
ÇÇ 
pitsAndStores
ÉÉ 
=
ÉÉ 
new
ÉÉ 
int
ÉÉ 
[
ÉÉ 
$num
ÉÉ 
]
ÉÉ 
;
ÉÉ 
changes
ÑÑ 
=
ÑÑ	 

new
ÑÑ 
int
ÑÑ 
[
ÑÑ 
$num
ÑÑ 
]
ÑÑ 
;
ÑÑ 
for
ÖÖ 
(
ÖÖ 
int
ÖÖ 	
i
ÖÖ
 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
i
ÖÖ 
<
ÖÖ 
pitsAndStores
ÖÖ "
.
ÖÖ" #
Length
ÖÖ# )
;
ÖÖ) *
i
ÖÖ+ ,
++
ÖÖ, .
)
ÖÖ. /
{
ÜÜ 
pitsAndStores
áá 
[
áá 
i
áá 
]
áá 
=
áá 
i
áá 
is
áá 
$num
áá 
or
áá 
$num
áá !
?
áá" #
$num
áá$ %
:
áá& '
$num
áá( )
;
áá) *
changes
àà 	
[
àà	 

i
àà
 
]
àà 
=
àà 
$num
àà 
;
àà 
}
ââ 
}ää 
boolåå 
Move
åå 	
(
åå	 

int
åå
 
pit
åå 
)
åå 
{çç 
bool
éé 

isOpponent
éé 
=
éé 
pit
éé 
>
éé 
$num
éé 
;
éé 
int
èè 
[
èè 
]
èè 

pitsBefore
èè 
=
èè 
(
èè 
int
èè 
[
èè 
]
èè 
)
èè 
pitsAndStores
èè (
.
èè( )
Clone
èè) .
(
èè. /
)
èè/ 0
;
èè0 1
int
êê 
count
êê 

=
êê 
pitsAndStores
êê 
[
êê 
pit
êê 
]
êê 
;
êê  
pitsAndStores
ëë 
[
ëë 
pit
ëë 
]
ëë 
=
ëë 
$num
ëë 
;
ëë 
changes
íí 
[
íí 	
pit
íí	 
]
íí 
=
íí 
-
íí 
count
íí 
;
íí 
int
ìì 
j
ìì 
=
ìì 
$num
ìì	 

;
ìì
 
for
îî 
(
îî 
int
îî 	
i
îî
 
=
îî 
$num
îî 
,
îî 
skipped
îî 
=
îî 
$num
îî 
;
îî 
i
îî 
<
îî  !
count
îî" '
+
îî( )
skipped
îî* 1
;
îî1 2
i
îî3 4
++
îî4 6
)
îî6 7
{
ïï 
j
ññ 
=
ññ 
(
ññ 
i
ññ 
+
ññ	 

pit
ññ 
+
ññ 
$num
ññ 
)
ññ 
%
ññ 
pitsAndStores
ññ #
.
ññ# $
Length
ññ$ *
;
ññ* +
if
óó 
(
óó 
(
óó 

isOpponent
óó 
&&
óó 
j
óó 
is
óó 
$num
óó 
)
óó 
||
óó 
(
óó  !
!
óó! "

isOpponent
óó" ,
&&
óó- /
j
óó0 1
is
óó2 4
$num
óó5 7
)
óó7 8
)
óó8 9
{
òò 
skipped
ôô 

++
ôô
 
;
ôô 
}
öö 
else
õõ 
{
úú 
pitsAndStores
ùù 
[
ùù 
j
ùù 
]
ùù 
++
ùù 
;
ùù 
}
ûû 
}
üü 
if
†† 
(
†† 

isOpponent
†† 
&&
†† 
j
†† 
>
†† 
$num
†† 
&&
†† 
j
†† 
<
†† 
$num
††  "
&&
††# %

pitsBefore
††& 0
[
††0 1
j
††1 2
]
††2 3
is
††4 6
$num
††7 8
&&
††9 ;
pitsAndStores
††< I
[
††I J
j
††J K
]
††K L
is
††M O
$num
††P Q
)
††Q R
{
°° 
int
¢¢ 
	mirrorPit
¢¢ 
=
¢¢ 
$num
¢¢ 
-
¢¢ 
j
¢¢ 
-
¢¢ 
$num
¢¢ 
;
¢¢ 
if
££ 
(
££ 
pitsAndStores
££ 
[
££ 
	mirrorPit
££ 
]
££ 
>
££  
$num
££! "
)
££" #
{
§§ 
pitsAndStores
•• 
[
•• 
$num
•• 
]
•• 
+=
•• 
pitsAndStores
•• %
[
••% &
	mirrorPit
••& /
]
••/ 0
;
••0 1
pitsAndStores
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶ 
+=
¶¶ 
pitsAndStores
¶¶ %
[
¶¶% &
j
¶¶& '
]
¶¶' (
;
¶¶( )
pitsAndStores
ßß 
[
ßß 
	mirrorPit
ßß 
]
ßß 
=
ßß 
$num
ßß 
;
ßß  
pitsAndStores
®® 
[
®® 
j
®® 
]
®® 
=
®® 
$num
®® 
;
®® 
}
©© 
}
™™ 
if
´´ 
(
´´ 
!
´´ 

isOpponent
´´ 
&&
´´ 
j
´´ 
<
´´ 
$num
´´ 
&&
´´ 
j
´´ 
>=
´´ !
$num
´´" #
&&
´´$ &

pitsBefore
´´' 1
[
´´1 2
j
´´2 3
]
´´3 4
is
´´5 7
$num
´´8 9
&&
´´: <
pitsAndStores
´´= J
[
´´J K
j
´´K L
]
´´L M
is
´´N P
$num
´´Q R
)
´´R S
{
¨¨ 
int
≠≠ 
	mirrorPit
≠≠ 
=
≠≠ 
$num
≠≠ 
-
≠≠ 
j
≠≠ 
+
≠≠ 
$num
≠≠ 
;
≠≠ 
if
ÆÆ 
(
ÆÆ 
pitsAndStores
ÆÆ 
[
ÆÆ 
	mirrorPit
ÆÆ 
]
ÆÆ 
>
ÆÆ  
$num
ÆÆ! "
)
ÆÆ" #
{
ØØ 
pitsAndStores
∞∞ 
[
∞∞ 
$num
∞∞ 
]
∞∞ 
+=
∞∞ 
pitsAndStores
∞∞ $
[
∞∞$ %
	mirrorPit
∞∞% .
]
∞∞. /
;
∞∞/ 0
pitsAndStores
±± 
[
±± 
$num
±± 
]
±± 
+=
±± 
pitsAndStores
±± $
[
±±$ %
j
±±% &
]
±±& '
;
±±' (
pitsAndStores
≤≤ 
[
≤≤ 
	mirrorPit
≤≤ 
]
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤  
pitsAndStores
≥≥ 
[
≥≥ 
j
≥≥ 
]
≥≥ 
=
≥≥ 
$num
≥≥ 
;
≥≥ 
}
¥¥ 
}
µµ 
for
∂∂ 
(
∂∂ 
int
∂∂ 	
i
∂∂
 
=
∂∂ 
$num
∂∂ 
;
∂∂ 
i
∂∂ 
<
∂∂ 
pitsAndStores
∂∂ "
.
∂∂" #
Length
∂∂# )
;
∂∂) *
i
∂∂+ ,
++
∂∂, .
)
∂∂. /
{
∑∑ 
changes
∏∏ 	
[
∏∏	 

i
∏∏
 
]
∏∏ 
=
∏∏ 
pitsAndStores
∏∏ 
[
∏∏ 
i
∏∏ 
]
∏∏ 
-
∏∏  !

pitsBefore
∏∏" ,
[
∏∏, -
i
∏∏- .
]
∏∏. /
;
∏∏/ 0
}
ππ 
return
∫∫ 
(
∫∫ 	

isOpponent
∫∫	 
&&
∫∫ 
j
∫∫ 
is
∫∫ 
$num
∫∫ 
)
∫∫ 
||
∫∫  "
(
∫∫# $
!
∫∫$ %

isOpponent
∫∫% /
&&
∫∫0 2
j
∫∫3 4
is
∫∫5 7
$num
∫∫8 9
)
∫∫9 :
;
∫∫: ;
}ªª 
voidΩΩ "
MoveAllSeedsToStores
ΩΩ 
(
ΩΩ 
)
ΩΩ 
{ææ 
int
øø 
[
øø 
]
øø 

pitsBefore
øø 
=
øø 
(
øø 
int
øø 
[
øø 
]
øø 
)
øø 
pitsAndStores
øø (
.
øø( )
Clone
øø) .
(
øø. /
)
øø/ 0
;
øø0 1
for
¿¿ 
(
¿¿ 
int
¿¿ 	
i
¿¿
 
=
¿¿ 
$num
¿¿ 
;
¿¿ 
i
¿¿ 
<
¿¿ 
$num
¿¿ 
;
¿¿ 
i
¿¿ 
++
¿¿ 
)
¿¿ 
{
¡¡ 
pitsAndStores
¬¬ 
[
¬¬ 
$num
¬¬ 
]
¬¬ 
+=
¬¬ 
pitsAndStores
¬¬ #
[
¬¬# $
i
¬¬$ %
]
¬¬% &
;
¬¬& '
pitsAndStores
√√ 
[
√√ 
i
√√ 
]
√√ 
=
√√ 
$num
√√ 
;
√√ 
}
ƒƒ 
for
≈≈ 
(
≈≈ 
int
≈≈ 	
i
≈≈
 
=
≈≈ 
$num
≈≈ 
;
≈≈ 
i
≈≈ 
<
≈≈ 
$num
≈≈ 
;
≈≈ 
i
≈≈ 
++
≈≈ 
)
≈≈ 
{
∆∆ 
pitsAndStores
«« 
[
«« 
$num
«« 
]
«« 
+=
«« 
pitsAndStores
«« $
[
««$ %
i
««% &
]
««& '
;
««' (
pitsAndStores
»» 
[
»» 
i
»» 
]
»» 
=
»» 
$num
»» 
;
»» 
}
…… 
for
   
(
   
int
   	
i
  
 
=
   
$num
   
;
   
i
   
<
   
pitsAndStores
   "
.
  " #
Length
  # )
;
  ) *
i
  + ,
++
  , .
)
  . /
{
ÀÀ 
changes
ÃÃ 	
[
ÃÃ	 

i
ÃÃ
 
]
ÃÃ 
=
ÃÃ 
pitsAndStores
ÃÃ 
[
ÃÃ 
i
ÃÃ 
]
ÃÃ 
-
ÃÃ  !

pitsBefore
ÃÃ" ,
[
ÃÃ, -
i
ÃÃ- .
]
ÃÃ. /
;
ÃÃ/ 0
}
ÕÕ 
}ŒŒ 
bool–– 
OpponentMove
–– 
(
–– 
)
–– 
{—— 
List
““ 
<
““ 
int
““ 	
>
““	 

possibleMoves
““ 
=
““ 
new
““ 
(
““ 
)
““  
;
““  !
for
”” 
(
”” 
int
”” 	
i
””
 
=
”” 
$num
”” 
;
”” 
i
”” 
<
”” 
$num
”” 
;
”” 
i
”” 
++
”” 
)
”” 
{
‘‘ 
if
’’ 
(
’’ 
pitsAndStores
’’ 
[
’’ 
i
’’ 
]
’’ 
is
’’ 
not
’’ 
$num
’’ 
)
’’  
{
÷÷ 
possibleMoves
◊◊ 
.
◊◊ 
Add
◊◊ 
(
◊◊ 
i
◊◊ 
)
◊◊ 
;
◊◊ 
}
ÿÿ 
}
ŸŸ 
int
⁄⁄ 
move
⁄⁄ 	
=
⁄⁄
 
possibleMoves
⁄⁄ 
[
⁄⁄ 
random
⁄⁄  
.
⁄⁄  !
Next
⁄⁄! %
(
⁄⁄% &
possibleMoves
⁄⁄& 3
.
⁄⁄3 4
Count
⁄⁄4 9
)
⁄⁄9 :
]
⁄⁄: ;
;
⁄⁄; <
return
€€ 
Move
€€ 
(
€€ 
move
€€ 
)
€€ 
;
€€ 
}‹‹ 
voidﬁﬁ 
Render
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ 
{ﬂﬂ 
string
‡‡ 
PitValue
‡‡ 
(
‡‡ 
int
‡‡ 
pit
‡‡ 
)
‡‡ 
{
·· 
string
‚‚ 
value
‚‚	 
=
‚‚ 
pitsAndStores
‚‚ 
[
‚‚ 
pit
‚‚ "
]
‚‚" #
.
‚‚# $
ToString
‚‚$ ,
(
‚‚, -
CultureInfo
‚‚- 8
.
‚‚8 9
InvariantCulture
‚‚9 I
)
‚‚I J
;
‚‚J K
return
„„ 
value
„„	 
.
„„ 
Length
„„ 
<
„„ 
$num
„„ 
?
„„ 
$str
„„ 
+
„„  !
value
„„" '
:
„„( )
value
„„* /
;
„„/ 0
}
‰‰ 
void
ÊÊ $
WriteAlignedDifference
ÊÊ 
(
ÊÊ 
int
ÊÊ  
pit
ÊÊ! $
,
ÊÊ$ %
bool
ÊÊ& *
isLeft
ÊÊ+ 1
)
ÊÊ1 2
{
ÁÁ 
if
ËË 
(
ËË 
changes
ËË 
[
ËË 
pit
ËË 
]
ËË 
<
ËË 
$num
ËË 
&&
ËË 
!
ËË 
isLeft
ËË "
)
ËË" #
{
ÈÈ 
Console
ÍÍ 

.
ÍÍ
 
Write
ÍÍ 
(
ÍÍ 
$char
ÍÍ 
)
ÍÍ 
;
ÍÍ 
}
ÎÎ 
WriteDifference
ÏÏ 
(
ÏÏ 
pit
ÏÏ 
)
ÏÏ 
;
ÏÏ 
if
ÌÌ 
(
ÌÌ 
changes
ÌÌ 
[
ÌÌ 
pit
ÌÌ 
]
ÌÌ 
<
ÌÌ 
$num
ÌÌ 
&&
ÌÌ 
isLeft
ÌÌ !
)
ÌÌ! "
{
ÓÓ 
Console
ÔÔ 

.
ÔÔ
 
Write
ÔÔ 
(
ÔÔ 
$char
ÔÔ 
)
ÔÔ 
;
ÔÔ 
}
 
}
ÒÒ 
void
ÛÛ 
WriteDifference
ÛÛ 
(
ÛÛ 
int
ÛÛ 
pit
ÛÛ 
)
ÛÛ 
{
ÙÙ 
string
ıı 
valueString
ıı	 
=
ıı 
Math
ıı 
.
ıı 
Abs
ıı 
(
ıı  
changes
ıı  '
[
ıı' (
pit
ıı( +
]
ıı+ ,
)
ıı, -
.
ıı- .
ToString
ıı. 6
(
ıı6 7
CultureInfo
ıı7 B
.
ııB C
InvariantCulture
ııC S
)
ııS T
;
ııT U
switch
ˆˆ 
(
ˆˆ	 

changes
ˆˆ
 
[
ˆˆ 
pit
ˆˆ 
]
ˆˆ 
)
ˆˆ 
{
˜˜ 
case
¯¯ 
$num
¯¯ 	
:
¯¯	 

Console
˘˘ 
.
˘˘ 
Write
˘˘ 
(
˘˘ 
$str
˘˘ 
)
˘˘ 
;
˘˘ 
break
˙˙ 	
;
˙˙	 

case
˚˚ 
<
˚˚ 	
$num
˚˚
 
:
˚˚ 
Console
¸¸ 
.
¸¸ 
ForegroundColor
¸¸ 
=
¸¸ 
ConsoleColor
¸¸ *
.
¸¸* +
DarkRed
¸¸+ 2
;
¸¸2 3
Console
˝˝ 
.
˝˝ 
Write
˝˝ 
(
˝˝ 
$char
˝˝ 
)
˝˝ 
;
˝˝ 
Console
˛˛ 
.
˛˛ 
Write
˛˛ 
(
˛˛ 
valueString
˛˛ 
)
˛˛ 
;
˛˛ 
Console
ˇˇ 
.
ˇˇ 
ForegroundColor
ˇˇ 
=
ˇˇ 
ConsoleColor
ˇˇ *
.
ˇˇ* +
White
ˇˇ+ 0
;
ˇˇ0 1
break
ÄÄ 	
;
ÄÄ	 

case
ÅÅ 
>
ÅÅ 	
$num
ÅÅ
 
:
ÅÅ 
Console
ÇÇ 
.
ÇÇ 
ForegroundColor
ÇÇ 
=
ÇÇ 
ConsoleColor
ÇÇ *
.
ÇÇ* +
	DarkGreen
ÇÇ+ 4
;
ÇÇ4 5
Console
ÉÉ 
.
ÉÉ 
Write
ÉÉ 
(
ÉÉ 
$char
ÉÉ 
)
ÉÉ 
;
ÉÉ 
Console
ÑÑ 
.
ÑÑ 
Write
ÑÑ 
(
ÑÑ 
valueString
ÑÑ 
)
ÑÑ 
;
ÑÑ 
Console
ÖÖ 
.
ÖÖ 
ForegroundColor
ÖÖ 
=
ÖÖ 
ConsoleColor
ÖÖ *
.
ÖÖ* +
White
ÖÖ+ 0
;
ÖÖ0 1
break
ÜÜ 	
;
ÜÜ	 

}
áá 
}
àà 
EnsureConsoleSize
ää 
(
ää 
)
ää 
;
ää 
if
ãã 
(
ãã 
closeRequested
ãã 
)
ãã 
{
åå 
return
çç 
;
çç 	
}
éé 
Console
èè 
.
èè 	
SetCursorPosition
èè	 
(
èè 
$num
èè 
,
èè 
$num
èè 
)
èè  
;
èè  !
Console
êê 
.
êê 	
	WriteLine
êê	 
(
êê 
)
êê 
;
êê 
Console
ëë 
.
ëë 	
	WriteLine
ëë	 
(
ëë 
$str
ëë 
)
ëë 
;
ëë  
Console
íí 
.
íí 	
	WriteLine
íí	 
(
íí 
)
íí 
;
íí 
Console
ìì 
.
ìì 	
	WriteLine
ìì	 
(
ìì 
$str
ìì ;
)
ìì; <
;
ìì< =
Console
îî 
.
îî 	
	WriteLine
îî	 
(
îî 
$"
îî 
$str
îî 
{
îî 
PitValue
îî '
(
îî' (
$num
îî( *
)
îî* +
}
îî+ ,
$str
îî, .
{
îî. /
PitValue
îî/ 7
(
îî7 8
$num
îî8 :
)
îî: ;
}
îî; <
$str
îî< >
{
îî> ?
PitValue
îî? G
(
îîG H
$num
îîH J
)
îîJ K
}
îîK L
$str
îîL N
{
îîN O
PitValue
îîO W
(
îîW X
$num
îîX Z
)
îîZ [
}
îî[ \
$str
îî\ ^
{
îî^ _
PitValue
îî_ g
(
îîg h
$num
îîh j
)
îîj k
}
îîk l
$str
îîl n
{
îîn o
PitValue
îîo w
(
îîw x
$num
îîx z
)
îîz {
}
îî{ |
$strîî| É
"îîÉ Ñ
)îîÑ Ö
;îîÖ Ü
Console
ïï 
.
ïï 	
Write
ïï	 
(
ïï 
$str
ïï 
)
ïï 
;
ïï 
for
ññ 
(
ññ 
int
ññ 	
i
ññ
 
=
ññ 
$num
ññ 
;
ññ 
i
ññ 
>
ññ 
$num
ññ 
;
ññ 
i
ññ 
--
ññ 
)
ññ 
{
óó 
WriteDifference
òò 
(
òò 
i
òò 
)
òò 
;
òò 
if
ôô 
(
ôô 
i
ôô 
>
ôô 	
$num
ôô
 
)
ôô 
{
öö 
Console
õõ 

.
õõ
 
Write
õõ 
(
õõ 
Math
õõ 
.
õõ 
Abs
õõ 
(
õõ 
changes
õõ !
[
õõ! "
i
õõ" #
]
õõ# $
)
õõ$ %
>=
õõ& (
$num
õõ) +
?
õõ, -
$str
õõ. 1
:
õõ2 3
$str
õõ4 8
)
õõ8 9
;
õõ9 :
}
úú 
}
ùù 
if
ûû 
(
ûû 
Math
ûû 	
.
ûû	 

Abs
ûû
 
(
ûû 
changes
ûû 
[
ûû 
$num
ûû 
]
ûû 
)
ûû 
<
ûû 
$num
ûû 
)
ûû 
{
üü 
Console
†† 	
.
††	 

Write
††
 
(
†† 
$char
†† 
)
†† 
;
†† 
}
°° 
Console
¢¢ 
.
¢¢ 	
	WriteLine
¢¢	 
(
¢¢ 
$str
¢¢ 
)
¢¢ 
;
¢¢ 
Console
££ 
.
££ 	
Write
££	 
(
££ 
$"
££ 
$str
££ 
{
££ 
PitValue
££ 
(
££  
$num
££  "
)
££" #
}
££# $
$str
££$ %
"
££% &
)
££& '
;
££' ($
WriteAlignedDifference
§§ 
(
§§ 
$num
§§ 
,
§§ 
true
§§  
)
§§  !
;
§§! "
Console
•• 
.
•• 	
Write
••	 
(
•• 
$str
•• #
)
••# $
;
••$ %$
WriteAlignedDifference
¶¶ 
(
¶¶ 
$num
¶¶ 
,
¶¶ 
false
¶¶  
)
¶¶  !
;
¶¶! "
Console
ßß 
.
ßß 	
	WriteLine
ßß	 
(
ßß 
$"
ßß 
$str
ßß 
{
ßß 
PitValue
ßß 
(
ßß  
$num
ßß  "
)
ßß" #
}
ßß# $
$str
ßß$ '
"
ßß' (
)
ßß( )
;
ßß) *
Console
®® 
.
®® 	
Write
®®	 
(
®® 
$"
®® 
$str
®® 
"
®® 
)
®® 
;
®® 
for
©© 
(
©© 
int
©© 	
i
©©
 
=
©© 
$num
©© 
;
©© 
i
©© 
<
©© 
$num
©© 
;
©© 
i
©© 
++
©© 
)
©© 
{
™™ 
if
´´ 
(
´´ 
state
´´ 
is
´´ 
State
´´ 
.
´´ 
MoveSelection
´´ "
or
´´# %
State
´´& +
.
´´+ ,
InvalidMove
´´, 7
&&
´´8 :
i
´´; <
==
´´= ?
	selection
´´@ I
)
´´I J
{
¨¨ 
Console
≠≠ 

.
≠≠
 
ForegroundColor
≠≠ 
=
≠≠ 
ConsoleColor
≠≠ )
.
≠≠) *
Yellow
≠≠* 0
;
≠≠0 1
Console
ÆÆ 

.
ÆÆ
 
Write
ÆÆ 
(
ÆÆ 
$str
ÆÆ 
)
ÆÆ 
;
ÆÆ 
Console
ØØ 

.
ØØ
 
ForegroundColor
ØØ 
=
ØØ 
ConsoleColor
ØØ )
.
ØØ) *
White
ØØ* /
;
ØØ/ 0
}
∞∞ 
else
±± 
{
≤≤ 
WriteDifference
≥≥ 
(
≥≥ 
i
≥≥ 
)
≥≥ 
;
≥≥ 
}
¥¥ 
if
µµ 
(
µµ 
i
µµ 
<
µµ 	
$num
µµ
 
)
µµ 
{
∂∂ 
Console
∑∑ 

.
∑∑
 
Write
∑∑ 
(
∑∑ 
Math
∑∑ 
.
∑∑ 
Abs
∑∑ 
(
∑∑ 
changes
∑∑ !
[
∑∑! "
i
∑∑" #
]
∑∑# $
)
∑∑$ %
>=
∑∑& (
$num
∑∑) +
?
∑∑, -
$str
∑∑. 1
:
∑∑2 3
$str
∑∑4 8
)
∑∑8 9
;
∑∑9 :
}
∏∏ 
}
ππ 
if
∫∫ 
(
∫∫ 
Math
∫∫ 	
.
∫∫	 

Abs
∫∫
 
(
∫∫ 
changes
∫∫ 
[
∫∫ 
$num
∫∫ 
]
∫∫ 
)
∫∫ 
<
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 
Console
ºº 	
.
ºº	 

Write
ºº
 
(
ºº 
$char
ºº 
)
ºº 
;
ºº 
}
ΩΩ 
Console
ææ 
.
ææ 	
	WriteLine
ææ	 
(
ææ 
$str
ææ 
)
ææ 
;
ææ 
Console
øø 
.
øø 	
	WriteLine
øø	 
(
øø 
$"
øø 
$str
øø 
{
øø 
PitValue
øø '
(
øø' (
$num
øø( *
)
øø* +
}
øø+ ,
$str
øø, .
{
øø. /
PitValue
øø/ 7
(
øø7 8
$num
øø8 :
)
øø: ;
}
øø; <
$str
øø< >
{
øø> ?
PitValue
øø? G
(
øøG H
$num
øøH J
)
øøJ K
}
øøK L
$str
øøL N
{
øøN O
PitValue
øøO W
(
øøW X
$num
øøX Z
)
øøZ [
}
øø[ \
$str
øø\ ^
{
øø^ _
PitValue
øø_ g
(
øøg h
$num
øøh j
)
øøj k
}
øøk l
$str
øøl n
{
øøn o
PitValue
øøo w
(
øøw x
$num
øøx z
)
øøz {
}
øø{ |
$strøø| É
"øøÉ Ñ
)øøÑ Ö
;øøÖ Ü
Console
¿¿ 
.
¿¿ 	
	WriteLine
¿¿	 
(
¿¿ 
$str
¿¿ ;
)
¿¿; <
;
¿¿< =
Console
¡¡ 
.
¡¡ 	
	WriteLine
¡¡	 
(
¡¡ 
)
¡¡ 
;
¡¡ 
switch
¬¬ 
(
¬¬ 	
state
¬¬	 
)
¬¬ 
{
√√ 
case
ƒƒ 
State
ƒƒ 
.
ƒƒ 
MoveSelection
ƒƒ 
:
ƒƒ 
Console
≈≈ 

.
≈≈
 
	WriteLine
≈≈ 
(
≈≈ 
$str
≈≈ D
)
≈≈D E
;
≈≈E F
Console
∆∆ 

.
∆∆
 
	WriteLine
∆∆ 
(
∆∆ 
$str
∆∆ D
)
∆∆D E
;
∆∆E F
break
«« 
;
«« 	
case
»» 
State
»» 
.
»» *
MoveConfirmationAndMoveAgain
»» )
:
»») *
Console
…… 

.
……
 
	WriteLine
…… 
(
…… 
$str
…… D
)
……D E
;
……E F
Console
   

.
  
 
	WriteLine
   
(
   
$str
   D
)
  D E
;
  E F
break
ÀÀ 
;
ÀÀ 	
case
ÃÃ 
State
ÃÃ 
.
ÃÃ 
MoveConfirmation
ÃÃ 
:
ÃÃ 
Console
ÕÕ 

.
ÕÕ
 
	WriteLine
ÕÕ 
(
ÕÕ 
$str
ÕÕ D
)
ÕÕD E
;
ÕÕE F
Console
ŒŒ 

.
ŒŒ
 
	WriteLine
ŒŒ 
(
ŒŒ 
$str
ŒŒ D
)
ŒŒD E
;
ŒŒE F
break
œœ 
;
œœ 	
case
–– 
State
–– 
.
–– &
OpponentMoveConfirmation
–– %
:
––% &
Console
—— 

.
——
 
	WriteLine
—— 
(
—— 
$str
—— D
)
——D E
;
——E F
Console
““ 

.
““
 
	WriteLine
““ 
(
““ 
$str
““ D
)
““D E
;
““E F
break
”” 
;
”” 	
case
‘‘ 
State
‘‘ 
.
‘‘ /
!OpponentMoveConfirmationMoveAgain
‘‘ .
:
‘‘. /
Console
’’ 

.
’’
 
	WriteLine
’’ 
(
’’ 
$str
’’ D
)
’’D E
;
’’E F
Console
÷÷ 

.
÷÷
 
	WriteLine
÷÷ 
(
÷÷ 
$str
÷÷ D
)
÷÷D E
;
÷÷E F
break
◊◊ 
;
◊◊ 	
case
ÿÿ 
State
ÿÿ 
.
ÿÿ 
InvalidMove
ÿÿ 
:
ÿÿ 
Console
ŸŸ 

.
ŸŸ
 
	WriteLine
ŸŸ 
(
ŸŸ 
$str
ŸŸ D
)
ŸŸD E
;
ŸŸE F
Console
⁄⁄ 

.
⁄⁄
 
	WriteLine
⁄⁄ 
(
⁄⁄ 
$str
⁄⁄ D
)
⁄⁄D E
;
⁄⁄E F
break
€€ 
;
€€ 	
case
‹‹ 
State
‹‹ 
.
‹‹ #
OutOfMovesConfimation
‹‹ "
:
‹‹" #
bool
›› 
playerIsEmpty
›› 
=
›› 
!
›› 
pitsAndStores
›› &
[
››& '
$num
››' (
..
››( *
$num
››* +
]
››+ ,
.
››, -
Any
››- 0
(
››0 1
seeds
››1 6
=>
››7 9
seeds
››: ?
>
››@ A
$num
››B C
)
››C D
;
››D E
if
ﬁﬁ 
(
ﬁﬁ 
playerIsEmpty
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
Console
‡‡ 
.
‡‡ 
	WriteLine
‡‡ 
(
‡‡ 
$str
‡‡ E
)
‡‡E F
;
‡‡F G
Console
·· 
.
·· 
	WriteLine
·· 
(
·· 
$str
·· E
)
··E F
;
··F G
}
‚‚ 
else
„„ 
{
‰‰ 
Console
ÂÂ 
.
ÂÂ 
	WriteLine
ÂÂ 
(
ÂÂ 
$str
ÂÂ E
)
ÂÂE F
;
ÂÂF G
Console
ÊÊ 
.
ÊÊ 
	WriteLine
ÊÊ 
(
ÊÊ 
$str
ÊÊ E
)
ÊÊE F
;
ÊÊF G
}
ÁÁ 
break
ËË 
;
ËË 	
case
ÈÈ 
State
ÈÈ 
.
ÈÈ "
GameOverConfirmation
ÈÈ !
:
ÈÈ! "
if
ÍÍ 
(
ÍÍ 
pitsAndStores
ÍÍ 
[
ÍÍ 
$num
ÍÍ 
]
ÍÍ 
>
ÍÍ 
pitsAndStores
ÍÍ '
[
ÍÍ' (
$num
ÍÍ( *
]
ÍÍ* +
)
ÍÍ+ ,
{
ÎÎ 
Console
ÏÏ 
.
ÏÏ 
	WriteLine
ÏÏ 
(
ÏÏ 
$str
ÏÏ E
)
ÏÏE F
;
ÏÏF G
}
ÌÌ 
else
ÓÓ 
if
ÓÓ 

(
ÓÓ 
pitsAndStores
ÓÓ 
[
ÓÓ 
$num
ÓÓ 
]
ÓÓ 
<
ÓÓ 
pitsAndStores
ÓÓ ,
[
ÓÓ, -
$num
ÓÓ- /
]
ÓÓ/ 0
)
ÓÓ0 1
{
ÔÔ 
Console
 
.
 
	WriteLine
 
(
 
$str
 E
)
E F
;
F G
}
ÒÒ 
else
ÚÚ 
{
ÛÛ 
Console
ÙÙ 
.
ÙÙ 
	WriteLine
ÙÙ 
(
ÙÙ 
$str
ÙÙ E
)
ÙÙE F
;
ÙÙF G
}
ıı 
Console
ˆˆ 

.
ˆˆ
 
	WriteLine
ˆˆ 
(
ˆˆ 
$str
ˆˆ D
)
ˆˆD E
;
ˆˆE F
break
˜˜ 
;
˜˜ 	
}
¯¯ 
Console
˘˘ 
.
˘˘ 	
	WriteLine
˘˘	 
(
˘˘ 
)
˘˘ 
;
˘˘ 
Console
˙˙ 
.
˙˙ 	
	WriteLine
˙˙	 
(
˙˙ 
$str
˙˙ "
)
˙˙" #
;
˙˙# $
Console
˚˚ 
.
˚˚ 	
	WriteLine
˚˚	 
(
˚˚ 
$str
˚˚ 9
)
˚˚9 :
;
˚˚: ;
Console
¸¸ 
.
¸¸ 	
	WriteLine
¸¸	 
(
¸¸ 
$str
¸¸ '
)
¸¸' (
;
¸¸( )
Console
˝˝ 
.
˝˝ 	
	WriteLine
˝˝	 
(
˝˝ 
$str
˝˝ &
)
˝˝& '
;
˝˝' (
}˛˛ 
voidÄÄ 
EnsureConsoleSize
ÄÄ 
(
ÄÄ 
)
ÄÄ 
{ÅÅ 
int
ÇÇ 
width
ÇÇ 

=
ÇÇ 
Console
ÇÇ 
.
ÇÇ 
WindowWidth
ÇÇ  
;
ÇÇ  !
int
ÉÉ 
height
ÉÉ 
=
ÉÉ 
Console
ÉÉ 
.
ÉÉ 
WindowHeight
ÉÉ "
;
ÉÉ" #
int
ÑÑ 
minWidth
ÑÑ 
=
ÑÑ 
$num
ÑÑ 
;
ÑÑ 
int
ÖÖ 
	minHeight
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
while
ÜÜ 
(
ÜÜ 
!
ÜÜ 	
closeRequested
ÜÜ	 
&&
ÜÜ 
(
ÜÜ 
width
ÜÜ !
<
ÜÜ" #
minWidth
ÜÜ$ ,
||
ÜÜ- /
height
ÜÜ0 6
<
ÜÜ7 8
	minHeight
ÜÜ9 B
)
ÜÜB C
)
ÜÜC D
{
áá 
Console
àà 	
.
àà	 

Clear
àà
 
(
àà 
)
àà 
;
àà 
Console
ââ 	
.
ââ	 

	WriteLine
ââ
 
(
ââ 
$str
ââ @
)
ââ@ A
;
ââA B
bool
ää 
enter
ää 
=
ää 
false
ää 
;
ää 
while
ãã 
(
ãã 	
!
ãã	 

closeRequested
ãã
 
&&
ãã 
!
ãã 
enter
ãã "
)
ãã" #
{
åå 
switch
çç 	
(
çç
 
Console
çç 
.
çç 
ReadKey
çç 
(
çç 
true
çç 
)
çç  
.
çç  !
Key
çç! $
)
çç$ %
{
éé 
case
èè 

ConsoleKey
èè	 
.
èè 
Enter
èè 
:
èè 
enter
êê 

=
êê 
true
êê 
;
êê 
break
ëë 

;
ëë
 
case
íí 

ConsoleKey
íí	 
.
íí 
Escape
íí 
:
íí 
closeRequested
ìì 
=
ìì 
true
ìì 
;
ìì 
break
îî 

;
îî
 
}
ïï 
}
ññ 
width
óó 
=
óó 	
Console
óó
 
.
óó 
WindowWidth
óó 
;
óó 
height
òò 
=
òò	 

Console
òò 
.
òò 
WindowHeight
òò 
;
òò  
Console
ôô 	
.
ôô	 

Clear
ôô
 
(
ôô 
)
ôô 
;
ôô 
}
öö 
}õõ 
boolùù 

IsGameOver
ùù 
(
ùù 
)
ùù 
{ûû 
bool
üü 
playerEmpty
üü 
=
üü 
true
üü 
;
üü 
for
†† 
(
†† 
int
†† 	
i
††
 
=
†† 
$num
†† 
;
†† 
i
†† 
<
†† 
$num
†† 
;
†† 
i
†† 
++
†† 
)
†† 
{
°° 
if
¢¢ 
(
¢¢ 
pitsAndStores
¢¢ 
[
¢¢ 
i
¢¢ 
]
¢¢ 
is
¢¢ 
not
¢¢ 
$num
¢¢ 
)
¢¢  
{
££ 
playerEmpty
§§ 
=
§§ 
false
§§ 
;
§§ 
}
•• 
}
¶¶ 
bool
ßß 
opponentEmpty
ßß 
=
ßß 
true
ßß 
;
ßß 
for
®® 
(
®® 
int
®® 	
i
®®
 
=
®® 
$num
®® 
;
®® 
i
®® 
>
®® 
$num
®® 
;
®® 
i
®® 
--
®® 
)
®® 
{
©© 
if
™™ 
(
™™ 
pitsAndStores
™™ 
[
™™ 
i
™™ 
]
™™ 
is
™™ 
not
™™ 
$num
™™ 
)
™™  
{
´´ 
opponentEmpty
¨¨ 
=
¨¨ 
false
¨¨ 
;
¨¨ 
}
≠≠ 
}
ÆÆ 
return
ØØ 
playerEmpty
ØØ 
||
ØØ 
opponentEmpty
ØØ $
;
ØØ$ %
}∞∞ 
enum≤≤ 
State
≤≤ 

{≥≥ 
InvalidMove
¥¥ 
,
¥¥ 
MoveSelection
µµ 
,
µµ 
MoveConfirmation
∂∂ 
,
∂∂ *
MoveConfirmationAndMoveAgain
∑∑ 
,
∑∑ &
OpponentMoveConfirmation
∏∏ 
,
∏∏ /
!OpponentMoveConfirmationMoveAgain
ππ "
,
ππ" ##
OutOfMovesConfimation
∫∫ 
,
∫∫ "
GameOverConfirmation
ªª 
,
ªª 
}ºº 